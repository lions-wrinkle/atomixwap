/*! For license information please see main.b6a48db1d2551776a0c8.js.LICENSE.txt */
(()=>{var e,t,r,n,s={6424:function(e){e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"encode",(function(){return I})),r.d(t,"decode",(function(){return N})),r.d(t,"decodeAsync",(function(){return G})),r.d(t,"decodeArrayStream",(function(){return Y})),r.d(t,"decodeStream",(function(){return X})),r.d(t,"Decoder",(function(){return q})),r.d(t,"Encoder",(function(){return k})),r.d(t,"ExtensionCodec",(function(){return x})),r.d(t,"ExtData",(function(){return p})),r.d(t,"EXT_TIMESTAMP",(function(){return m})),r.d(t,"encodeDateToTimeSpec",(function(){return w})),r.d(t,"encodeTimeSpecToTimestamp",(function(){return y})),r.d(t,"decodeTimestampToTimeSpec",(function(){return v})),r.d(t,"encodeTimestampExtension",(function(){return b})),r.d(t,"decodeTimestampExtension",(function(){return _}));var n=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,s,i=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)o.push(n.value)}catch(e){s={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(s)throw s.error}}return o},s=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e},i="undefined"!=typeof process&&"undefined"!=typeof TextEncoder&&"undefined"!=typeof TextDecoder;function o(e){for(var t=e.length,r=0,n=0;n<t;){var s=e.charCodeAt(n++);if(0!=(4294967168&s))if(0==(4294965248&s))r+=2;else{if(s>=55296&&s<=56319&&n<t){var i=e.charCodeAt(n);56320==(64512&i)&&(++n,s=((1023&s)<<10)+(1023&i)+65536)}r+=0==(4294901760&s)?3:4}else r++}return r}var a=i?new TextEncoder:void 0,c="undefined"!=typeof process?200:0,l=(null==a?void 0:a.encodeInto)?function(e,t,r){a.encodeInto(e,t.subarray(r))}:function(e,t,r){t.set(a.encode(e),r)};function u(e,t,r){for(var n=t,i=n+r,o=[],a="";n<i;){var c=e[n++];if(0==(128&c))o.push(c);else if(192==(224&c)){var l=63&e[n++];o.push((31&c)<<6|l)}else if(224==(240&c)){l=63&e[n++];var u=63&e[n++];o.push((31&c)<<12|l<<6|u)}else if(240==(248&c)){var h=(7&c)<<18|(l=63&e[n++])<<12|(u=63&e[n++])<<6|63&e[n++];h>65535&&(h-=65536,o.push(h>>>10&1023|55296),h=56320|1023&h),o.push(h)}else o.push(c);o.length>=4096&&(a+=String.fromCharCode.apply(String,s(o)),o.length=0)}return o.length>0&&(a+=String.fromCharCode.apply(String,s(o))),a}var h=i?new TextDecoder:null,d="undefined"!=typeof process?200:0,p=function(e,t){this.type=e,this.data=t};function f(e,t,r){var n=Math.floor(r/4294967296),s=r;e.setUint32(t,n),e.setUint32(t+4,s)}function g(e,t){var r=e.getInt32(t),n=e.getUint32(t+4),s=r<Math.floor(Number.MIN_SAFE_INTEGER/4294967296)||r===Math.floor(Number.MIN_SAFE_INTEGER/4294967296)&&0===n,i=r>Math.floor(Number.MAX_SAFE_INTEGER/4294967296);return s||i?BigInt(r)*BigInt(4294967296)+BigInt(n):4294967296*r+n}var m=-1;function y(e){var t,r=e.sec,n=e.nsec;if(r>=0&&n>=0&&r<=17179869183){if(0===n&&r<=4294967295){var s=new Uint8Array(4);return(t=new DataView(s.buffer)).setUint32(0,r),s}var i=r/4294967296,o=4294967295&r;return s=new Uint8Array(8),(t=new DataView(s.buffer)).setUint32(0,n<<2|3&i),t.setUint32(4,o),s}return s=new Uint8Array(12),(t=new DataView(s.buffer)).setUint32(0,n),f(t,4,r),s}function w(e){var t=e.getTime(),r=Math.floor(t/1e3),n=1e6*(t-1e3*r),s=Math.floor(n/1e9);return{sec:r+s,nsec:n-1e9*s}}function b(e){return e instanceof Date?y(w(e)):null}function v(e){var t=new DataView(e.buffer,e.byteOffset,e.byteLength);switch(e.byteLength){case 4:return{sec:t.getUint32(0),nsec:0};case 8:var r=t.getUint32(0);return{sec:4294967296*(3&r)+t.getUint32(4),nsec:r>>>2};case 12:return{sec:g(t,4),nsec:t.getUint32(0)};default:throw new Error("Unrecognized data size for timestamp: "+e.length)}}function _(e){var t=v(e);return new Date(1e3*t.sec+t.nsec/1e6)}var A={type:m,encode:b,decode:_},x=function(){function e(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(A)}return e.prototype.register=function(e){var t=e.type,r=e.encode,n=e.decode;if(t>=0)this.encoders[t]=r,this.decoders[t]=n;else{var s=1+t;this.builtInEncoders[s]=r,this.builtInDecoders[s]=n}},e.prototype.tryToEncode=function(e,t){for(var r=0;r<this.builtInEncoders.length;r++)if(null!=(n=this.builtInEncoders[r])&&null!=(s=n(e,t)))return new p(-1-r,s);for(r=0;r<this.encoders.length;r++){var n,s;if(null!=(n=this.encoders[r])&&null!=(s=n(e,t)))return new p(r,s)}return e instanceof p?e:null},e.prototype.decode=function(e,t,r){var n=t<0?this.builtInDecoders[-1-t]:this.decoders[t];return n?n(e,t,r):new p(t,e)},e.defaultCodec=new e,e}();function E(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?new Uint8Array(e):Uint8Array.from(e)}var T=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},k=function(){function e(e,t,r,n,s,i,o,a){void 0===e&&(e=x.defaultCodec),void 0===t&&(t=void 0),void 0===r&&(r=100),void 0===n&&(n=2048),void 0===s&&(s=!1),void 0===i&&(i=!1),void 0===o&&(o=!1),void 0===a&&(a=!1),this.extensionCodec=e,this.context=t,this.maxDepth=r,this.initialBufferSize=n,this.sortKeys=s,this.forceFloat32=i,this.ignoreUndefined=o,this.forceIntegerToFloat=a,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return e.prototype.getUint8Array=function(){return this.bytes.subarray(0,this.pos)},e.prototype.reinitializeState=function(){this.pos=0},e.prototype.encode=function(e){return this.reinitializeState(),this.doEncode(e,1),this.getUint8Array()},e.prototype.doEncode=function(e,t){if(t>this.maxDepth)throw new Error("Too deep objects in depth "+t);null==e?this.encodeNil():"boolean"==typeof e?this.encodeBoolean(e):"number"==typeof e?this.encodeNumber(e):"string"==typeof e?this.encodeString(e):"bigint"==typeof e?this.encodebigint(e):this.encodeObject(e,t)},e.prototype.ensureBufferSizeToWrite=function(e){var t=this.pos+e;this.view.byteLength<t&&this.resizeBuffer(2*t)},e.prototype.resizeBuffer=function(e){var t=new ArrayBuffer(e),r=new Uint8Array(t),n=new DataView(t);r.set(this.bytes),this.view=n,this.bytes=r},e.prototype.encodeNil=function(){this.writeU8(192)},e.prototype.encodeBoolean=function(e){!1===e?this.writeU8(194):this.writeU8(195)},e.prototype.encodeNumber=function(e){Number.isSafeInteger(e)&&!this.forceIntegerToFloat?e>=0?e<128?this.writeU8(e):e<256?(this.writeU8(204),this.writeU8(e)):e<65536?(this.writeU8(205),this.writeU16(e)):e<4294967296?(this.writeU8(206),this.writeU32(e)):(this.writeU8(207),this.writeU64(e)):e>=-32?this.writeU8(224|e+32):e>=-128?(this.writeU8(208),this.writeI8(e)):e>=-32768?(this.writeU8(209),this.writeI16(e)):e>=-2147483648?(this.writeU8(210),this.writeI32(e)):(this.writeU8(211),this.writeI64(e)):this.forceFloat32?(this.writeU8(202),this.writeF32(e)):(this.writeU8(203),this.writeF64(e))},e.prototype.encodebigint=function(e){e>=BigInt(0)?e<BigInt(128)?this.writeU8(Number(e)):e<BigInt(256)?(this.writeU8(204),this.writeU8(Number(e))):e<BigInt(65536)?(this.writeU8(205),this.writeU16(Number(e))):e<BigInt(4294967296)?(this.writeU8(206),this.writeU32(Number(e))):(this.writeU8(207),this.writeBig64(e)):e>=BigInt(-32)?this.writeU8(224|Number(e)+32):e>=BigInt(-128)?(this.writeU8(208),this.writeI8(Number(e))):e>=BigInt(-32768)?(this.writeU8(209),this.writeI16(Number(e))):e>=BigInt(-2147483648)?(this.writeU8(210),this.writeI32(Number(e))):(this.writeU8(211),this.writeBig64(e))},e.prototype.writeStringHeader=function(e){if(e<32)this.writeU8(160+e);else if(e<256)this.writeU8(217),this.writeU8(e);else if(e<65536)this.writeU8(218),this.writeU16(e);else{if(!(e<4294967296))throw new Error("Too long string: "+e+" bytes in UTF-8");this.writeU8(219),this.writeU32(e)}},e.prototype.encodeString=function(e){var t=e.length;if(i&&t>c){var r=o(e);this.ensureBufferSizeToWrite(5+r),this.writeStringHeader(r),l(e,this.bytes,this.pos),this.pos+=r}else r=o(e),this.ensureBufferSizeToWrite(5+r),this.writeStringHeader(r),function(e,t,r){for(var n=e.length,s=r,i=0;i<n;){var o=e.charCodeAt(i++);if(0!=(4294967168&o)){if(0==(4294965248&o))t[s++]=o>>6&31|192;else{if(o>=55296&&o<=56319&&i<n){var a=e.charCodeAt(i);56320==(64512&a)&&(++i,o=((1023&o)<<10)+(1023&a)+65536)}0==(4294901760&o)?(t[s++]=o>>12&15|224,t[s++]=o>>6&63|128):(t[s++]=o>>18&7|240,t[s++]=o>>12&63|128,t[s++]=o>>6&63|128)}t[s++]=63&o|128}else t[s++]=o}}(e,this.bytes,this.pos),this.pos+=r},e.prototype.encodeObject=function(e,t){var r=this.extensionCodec.tryToEncode(e,this.context);if(null!=r)this.encodeExtension(r);else if(Array.isArray(e))this.encodeArray(e,t);else if(ArrayBuffer.isView(e))this.encodeBinary(e);else{if("object"!=typeof e)throw new Error("Unrecognized object: "+Object.prototype.toString.apply(e));this.encodeMap(e,t)}},e.prototype.encodeBinary=function(e){var t=e.byteLength;if(t<256)this.writeU8(196),this.writeU8(t);else if(t<65536)this.writeU8(197),this.writeU16(t);else{if(!(t<4294967296))throw new Error("Too large binary: "+t);this.writeU8(198),this.writeU32(t)}var r=E(e);this.writeU8a(r)},e.prototype.encodeArray=function(e,t){var r,n,s=e.length;if(s<16)this.writeU8(144+s);else if(s<65536)this.writeU8(220),this.writeU16(s);else{if(!(s<4294967296))throw new Error("Too large array: "+s);this.writeU8(221),this.writeU32(s)}try{for(var i=T(e),o=i.next();!o.done;o=i.next()){var a=o.value;this.doEncode(a,t+1)}}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}},e.prototype.countWithoutUndefined=function(e,t){var r,n,s=0;try{for(var i=T(t),o=i.next();!o.done;o=i.next())void 0!==e[o.value]&&s++}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return s},e.prototype.encodeMap=function(e,t){var r,n,s=Object.keys(e);this.sortKeys&&s.sort();var i=this.ignoreUndefined?this.countWithoutUndefined(e,s):s.length;if(i<16)this.writeU8(128+i);else if(i<65536)this.writeU8(222),this.writeU16(i);else{if(!(i<4294967296))throw new Error("Too large map object: "+i);this.writeU8(223),this.writeU32(i)}try{for(var o=T(s),a=o.next();!a.done;a=o.next()){var c=a.value,l=e[c];this.ignoreUndefined&&void 0===l||(this.encodeString(c),this.doEncode(l,t+1))}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}},e.prototype.encodeExtension=function(e){var t=e.data.length;if(1===t)this.writeU8(212);else if(2===t)this.writeU8(213);else if(4===t)this.writeU8(214);else if(8===t)this.writeU8(215);else if(16===t)this.writeU8(216);else if(t<256)this.writeU8(199),this.writeU8(t);else if(t<65536)this.writeU8(200),this.writeU16(t);else{if(!(t<4294967296))throw new Error("Too large extension object: "+t);this.writeU8(201),this.writeU32(t)}this.writeI8(e.type),this.writeU8a(e.data)},e.prototype.writeU8=function(e){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,e),this.pos++},e.prototype.writeU8a=function(e){var t=e.length;this.ensureBufferSizeToWrite(t),this.bytes.set(e,this.pos),this.pos+=t},e.prototype.writeI8=function(e){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,e),this.pos++},e.prototype.writeU16=function(e){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,e),this.pos+=2},e.prototype.writeI16=function(e){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,e),this.pos+=2},e.prototype.writeU32=function(e){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,e),this.pos+=4},e.prototype.writeI32=function(e){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,e),this.pos+=4},e.prototype.writeF32=function(e){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,e),this.pos+=4},e.prototype.writeF64=function(e){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,e),this.pos+=8},e.prototype.writeU64=function(e){this.ensureBufferSizeToWrite(8),function(e,t,r){var n=r/4294967296,s=r;e.setUint32(t,n),e.setUint32(t+4,s)}(this.view,this.pos,e),this.pos+=8},e.prototype.writeI64=function(e){this.ensureBufferSizeToWrite(8),f(this.view,this.pos,e),this.pos+=8},e.prototype.writeBig64=function(e){this.ensureBufferSizeToWrite(8),function(e,t,r){var n=Number(r/BigInt(4294967296)),s=Number(r%BigInt(4294967296));n<0&&0!==s&&(n-=1),e.setUint32(t,n),e.setUint32(t+4,s)}(this.view,this.pos,e),this.pos+=8},e}(),S={};function I(e,t){return void 0===t&&(t=S),new k(t.extensionCodec,t.context,t.maxDepth,t.initialBufferSize,t.sortKeys,t.forceFloat32,t.ignoreUndefined,t.forceIntegerToFloat).encode(e)}function R(e){return(e<0?"-":"")+"0x"+Math.abs(e).toString(16).padStart(2,"0")}var B=function(){function e(e,t){void 0===e&&(e=16),void 0===t&&(t=16),this.maxKeyLength=e,this.maxLengthPerKey=t,this.hit=0,this.miss=0,this.caches=[];for(var r=0;r<this.maxKeyLength;r++)this.caches.push([])}return e.prototype.canBeCached=function(e){return e>0&&e<=this.maxKeyLength},e.prototype.get=function(e,t,r){var n=this.caches[r-1],s=n.length;e:for(var i=0;i<s;i++){for(var o=n[i],a=o.bytes,c=0;c<r;c++)if(a[c]!==e[t+c])continue e;return o.value}return null},e.prototype.store=function(e,t){var r=this.caches[e.length-1],n={bytes:e,value:t};r.length>=this.maxLengthPerKey?r[Math.random()*r.length|0]=n:r.push(n)},e.prototype.decode=function(e,t,r){var n=this.get(e,t,r);if(null!=n)return this.hit++,n;this.miss++;var s=u(e,t,r),i=Uint8Array.prototype.slice.call(e,t,t+r);return this.store(i,s),s},e}(),P=function(e,t){var r,n,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(s=2&i[0]?n.return:i[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,i[1])).done)return s;switch(n=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},U=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,s){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,s,(t=e[r](t)).done,t.value)}))}}},C=function(e){return this instanceof C?(this.v=e,this):new C(e)},O=new DataView(new ArrayBuffer(0)),$=new Uint8Array(O.buffer),D=function(){try{O.getInt8(0)}catch(e){return e.constructor}throw new Error("never reached")}(),L=new D("Insufficient data"),j=new B,q=function(){function e(e,t,r,n,s,i,o,a){void 0===e&&(e=x.defaultCodec),void 0===t&&(t=void 0),void 0===r&&(r=4294967295),void 0===n&&(n=4294967295),void 0===s&&(s=4294967295),void 0===i&&(i=4294967295),void 0===o&&(o=4294967295),void 0===a&&(a=j),this.extensionCodec=e,this.context=t,this.maxStrLength=r,this.maxBinLength=n,this.maxArrayLength=s,this.maxMapLength=i,this.maxExtLength=o,this.keyDecoder=a,this.totalPos=0,this.pos=0,this.view=O,this.bytes=$,this.headByte=-1,this.stack=[]}return e.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=-1},e.prototype.setBuffer=function(e){this.bytes=E(e),this.view=function(e){if(e instanceof ArrayBuffer)return new DataView(e);var t=E(e);return new DataView(t.buffer,t.byteOffset,t.byteLength)}(this.bytes),this.pos=0},e.prototype.appendBuffer=function(e){if(-1!==this.headByte||this.hasRemaining()){var t=this.bytes.subarray(this.pos),r=E(e),n=new Uint8Array(t.length+r.length);n.set(t),n.set(r,t.length),this.setBuffer(n)}else this.setBuffer(e)},e.prototype.hasRemaining=function(e){return void 0===e&&(e=1),this.view.byteLength-this.pos>=e},e.prototype.createNoExtraBytesError=function(e){var t=this.view,r=this.pos;return new RangeError("Extra "+(t.byteLength-r)+" of "+t.byteLength+" byte(s) found at buffer["+e+"]")},e.prototype.decode=function(e){return this.reinitializeState(),this.setBuffer(e),this.doDecodeSingleSync()},e.prototype.doDecodeSingleSync=function(){var e=this.doDecodeSync();if(this.hasRemaining())throw this.createNoExtraBytesError(this.pos);return e},e.prototype.decodeAsync=function(e){var t,r,n,s;return function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))}(this,void 0,void 0,(function(){var i,o,a,c,l,u,h,d;return P(this,(function(p){switch(p.label){case 0:i=!1,p.label=1;case 1:p.trys.push([1,6,7,12]),t=U(e),p.label=2;case 2:return[4,t.next()];case 3:if((r=p.sent()).done)return[3,5];if(a=r.value,i)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(a);try{o=this.doDecodeSync(),i=!0}catch(e){if(!(e instanceof D))throw e}this.totalPos+=this.pos,p.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return c=p.sent(),n={error:c},[3,12];case 7:return p.trys.push([7,,10,11]),r&&!r.done&&(s=t.return)?[4,s.call(t)]:[3,9];case 8:p.sent(),p.label=9;case 9:return[3,11];case 10:if(n)throw n.error;return[7];case 11:return[7];case 12:if(i){if(this.hasRemaining())throw this.createNoExtraBytesError(this.totalPos);return[2,o]}throw u=(l=this).headByte,h=l.pos,d=l.totalPos,new RangeError("Insufficient data in parcing "+R(u)+" at "+d+" ("+h+" in the current buffer)")}}))}))},e.prototype.decodeArrayStream=function(e){return this.decodeMultiAsync(e,!0)},e.prototype.decodeStream=function(e){return this.decodeMultiAsync(e,!1)},e.prototype.decodeMultiAsync=function(e,t){return function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,s=r.apply(e,t||[]),i=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){s[e]&&(n[e]=function(t){return new Promise((function(r,n){i.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=s[e](t)).value instanceof C?Promise.resolve(r.value.v).then(c,l):u(i[0][2],r)}catch(e){u(i[0][3],e)}var r}function c(e){a("next",e)}function l(e){a("throw",e)}function u(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var r,n,s,i,o,a,c,l,u;return P(this,(function(h){switch(h.label){case 0:r=t,n=-1,h.label=1;case 1:h.trys.push([1,13,14,19]),s=U(e),h.label=2;case 2:return[4,C(s.next())];case 3:if((i=h.sent()).done)return[3,12];if(o=i.value,t&&0===n)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(o),r&&(n=this.readArraySize(),r=!1,this.complete()),h.label=4;case 4:h.trys.push([4,9,,10]),h.label=5;case 5:return[4,C(this.doDecodeSync())];case 6:return[4,h.sent()];case 7:return h.sent(),0==--n?[3,8]:[3,5];case 8:return[3,10];case 9:if(!((a=h.sent())instanceof D))throw a;return[3,10];case 10:this.totalPos+=this.pos,h.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return c=h.sent(),l={error:c},[3,19];case 14:return h.trys.push([14,,17,18]),i&&!i.done&&(u=s.return)?[4,C(u.call(s))]:[3,16];case 15:h.sent(),h.label=16;case 16:return[3,18];case 17:if(l)throw l.error;return[7];case 18:return[7];case 19:return[2]}}))}))},e.prototype.doDecodeSync=function(){e:for(;;){var e=this.readHeadByte(),t=void 0;if(e>=224)t=e-256;else if(e<192)if(e<128)t=e;else if(e<144){if(0!=(n=e-128)){this.pushMapState(n),this.complete();continue e}t={}}else if(e<160){if(0!=(n=e-144)){this.pushArrayState(n),this.complete();continue e}t=[]}else{var r=e-160;t=this.decodeUtf8String(r,0)}else if(192===e)t=null;else if(194===e)t=!1;else if(195===e)t=!0;else if(202===e)t=this.readF32();else if(203===e)t=this.readF64();else if(204===e)t=this.readU8();else if(205===e)t=this.readU16();else if(206===e)t=this.readU32();else if(207===e)t=this.readU64();else if(208===e)t=this.readI8();else if(209===e)t=this.readI16();else if(210===e)t=this.readI32();else if(211===e)t=this.readI64();else if(217===e)r=this.lookU8(),t=this.decodeUtf8String(r,1);else if(218===e)r=this.lookU16(),t=this.decodeUtf8String(r,2);else if(219===e)r=this.lookU32(),t=this.decodeUtf8String(r,4);else if(220===e){if(0!==(n=this.readU16())){this.pushArrayState(n),this.complete();continue e}t=[]}else if(221===e){if(0!==(n=this.readU32())){this.pushArrayState(n),this.complete();continue e}t=[]}else if(222===e){if(0!==(n=this.readU16())){this.pushMapState(n),this.complete();continue e}t={}}else if(223===e){if(0!==(n=this.readU32())){this.pushMapState(n),this.complete();continue e}t={}}else if(196===e){var n=this.lookU8();t=this.decodeBinary(n,1)}else if(197===e)n=this.lookU16(),t=this.decodeBinary(n,2);else if(198===e)n=this.lookU32(),t=this.decodeBinary(n,4);else if(212===e)t=this.decodeExtension(1,0);else if(213===e)t=this.decodeExtension(2,0);else if(214===e)t=this.decodeExtension(4,0);else if(215===e)t=this.decodeExtension(8,0);else if(216===e)t=this.decodeExtension(16,0);else if(199===e)n=this.lookU8(),t=this.decodeExtension(n,1);else if(200===e)n=this.lookU16(),t=this.decodeExtension(n,2);else{if(201!==e)throw new Error("Unrecognized type byte: "+R(e));n=this.lookU32(),t=this.decodeExtension(n,4)}this.complete();for(var s=this.stack;s.length>0;){var i=s[s.length-1];if(0===i.type){if(i.array[i.position]=t,i.position++,i.position!==i.size)continue e;s.pop(),t=i.array}else{if(1===i.type){if(void 0,"string"!=(o=typeof t)&&"number"!==o)throw new Error("The type of key must be string or number but "+typeof t);i.key=t,i.type=2;continue e}if(i.map[i.key]=t,i.readCount++,i.readCount!==i.size){i.key=null,i.type=1;continue e}s.pop(),t=i.map}}return t}var o},e.prototype.readHeadByte=function(){return-1===this.headByte&&(this.headByte=this.readU8()),this.headByte},e.prototype.complete=function(){this.headByte=-1},e.prototype.readArraySize=function(){var e=this.readHeadByte();switch(e){case 220:return this.readU16();case 221:return this.readU32();default:if(e<160)return e-144;throw new Error("Unrecognized array type byte: "+R(e))}},e.prototype.pushMapState=function(e){if(e>this.maxMapLength)throw new Error("Max length exceeded: map length ("+e+") > maxMapLengthLength ("+this.maxMapLength+")");this.stack.push({type:1,size:e,key:null,readCount:0,map:{}})},e.prototype.pushArrayState=function(e){if(e>this.maxArrayLength)throw new Error("Max length exceeded: array length ("+e+") > maxArrayLength ("+this.maxArrayLength+")");this.stack.push({type:0,size:e,array:new Array(e),position:0})},e.prototype.decodeUtf8String=function(e,t){var r;if(e>this.maxStrLength)throw new Error("Max length exceeded: UTF-8 byte length ("+e+") > maxStrLength ("+this.maxStrLength+")");if(this.bytes.byteLength<this.pos+t+e)throw L;var n,s=this.pos+t;return n=this.stateIsMapKey()&&(null===(r=this.keyDecoder)||void 0===r?void 0:r.canBeCached(e))?this.keyDecoder.decode(this.bytes,s,e):i&&e>d?function(e,t,r){var n=e.subarray(t,t+r);return h.decode(n)}(this.bytes,s,e):u(this.bytes,s,e),this.pos+=t+e,n},e.prototype.stateIsMapKey=function(){return this.stack.length>0&&1===this.stack[this.stack.length-1].type},e.prototype.decodeBinary=function(e,t){if(e>this.maxBinLength)throw new Error("Max length exceeded: bin length ("+e+") > maxBinLength ("+this.maxBinLength+")");if(!this.hasRemaining(e+t))throw L;var r=this.pos+t,n=this.bytes.subarray(r,r+e);return this.pos+=t+e,n},e.prototype.decodeExtension=function(e,t){if(e>this.maxExtLength)throw new Error("Max length exceeded: ext length ("+e+") > maxExtLength ("+this.maxExtLength+")");var r=this.view.getInt8(this.pos+t),n=this.decodeBinary(e,t+1);return this.extensionCodec.decode(n,r,this.context)},e.prototype.lookU8=function(){return this.view.getUint8(this.pos)},e.prototype.lookU16=function(){return this.view.getUint16(this.pos)},e.prototype.lookU32=function(){return this.view.getUint32(this.pos)},e.prototype.readU8=function(){var e=this.view.getUint8(this.pos);return this.pos++,e},e.prototype.readI8=function(){var e=this.view.getInt8(this.pos);return this.pos++,e},e.prototype.readU16=function(){var e=this.view.getUint16(this.pos);return this.pos+=2,e},e.prototype.readI16=function(){var e=this.view.getInt16(this.pos);return this.pos+=2,e},e.prototype.readU32=function(){var e=this.view.getUint32(this.pos);return this.pos+=4,e},e.prototype.readI32=function(){var e=this.view.getInt32(this.pos);return this.pos+=4,e},e.prototype.readU64=function(){var e,t,r,n,s=(e=this.view,t=this.pos,r=e.getUint32(t),n=e.getUint32(t+4),r>Math.floor(Number.MAX_SAFE_INTEGER/4294967296)?BigInt(r)*BigInt(4294967296)+BigInt(n):4294967296*r+n);return this.pos+=8,s},e.prototype.readI64=function(){var e=g(this.view,this.pos);return this.pos+=8,e},e.prototype.readF32=function(){var e=this.view.getFloat32(this.pos);return this.pos+=4,e},e.prototype.readF64=function(){var e=this.view.getFloat64(this.pos);return this.pos+=8,e},e}(),M={};function N(e,t){return void 0===t&&(t=M),new q(t.extensionCodec,t.context,t.maxStrLength,t.maxBinLength,t.maxArrayLength,t.maxMapLength,t.maxExtLength).decode(e)}var W=function(e,t){var r,n,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(s=2&i[0]?n.return:i[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,i[1])).done)return s;switch(n=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},F=function(e){return this instanceof F?(this.v=e,this):new F(e)},K=function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,s=r.apply(e,t||[]),i=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){s[e]&&(n[e]=function(t){return new Promise((function(r,n){i.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=s[e](t)).value instanceof F?Promise.resolve(r.value.v).then(c,l):u(i[0][2],r)}catch(e){u(i[0][3],e)}var r}function c(e){a("next",e)}function l(e){a("throw",e)}function u(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}};function z(e){return null!=e[Symbol.asyncIterator]?e:function(e){return K(this,arguments,(function(){var t,r,n,s;return W(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,F(t.read())];case 3:return r=i.sent(),n=r.done,s=r.value,n?[4,F(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return function(e){if(null==e)throw new Error("Assertion Failure: value must not be null nor undefined")}(s),[4,F(s)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}(e)}var H=function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},V=function(e,t){var r,n,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(s=2&i[0]?n.return:i[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,i[1])).done)return s;switch(n=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function G(e,t){return void 0===t&&(t=M),H(this,void 0,void 0,(function(){var r;return V(this,(function(n){return r=z(e),[2,new q(t.extensionCodec,t.context,t.maxStrLength,t.maxBinLength,t.maxArrayLength,t.maxMapLength,t.maxExtLength).decodeAsync(r)]}))}))}function Y(e,t){void 0===t&&(t=M);var r=z(e);return new q(t.extensionCodec,t.context,t.maxStrLength,t.maxBinLength,t.maxArrayLength,t.maxMapLength,t.maxExtLength).decodeArrayStream(r)}function X(e,t){void 0===t&&(t=M);var r=z(e);return new q(t.extensionCodec,t.context,t.maxStrLength,t.maxBinLength,t.maxArrayLength,t.maxMapLength,t.maxExtLength).decodeStream(r)}}])},4126:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ABIAddressType:()=>mi,ABIArrayDynamicType:()=>_i,ABIArrayStaticType:()=>vi,ABIBoolType:()=>yi,ABIByteType:()=>wi,ABIContract:()=>Ui,ABIInterface:()=>Ci,ABIMethod:()=>Bi,ABIReferenceType:()=>ki,ABIStringType:()=>bi,ABITransactionType:()=>Ti,ABITupleType:()=>Ai,ABIType:()=>pi,ABIUfixedType:()=>gi,ABIUintType:()=>fi,ADDR_BYTE_SIZE:()=>ai,ALGORAND_MIN_TX_FEE:()=>re,Algodv2:()=>Kt,AtomicTransactionComposer:()=>Li,AtomicTransactionComposerStatus:()=>$i,DryrunResult:()=>Ts,ERROR_INVALID_MICROALGOS:()=>Vi,ERROR_MULTISIG_BAD_SENDER:()=>Hi,INVALID_MICROALGOS_ERROR_MSG:()=>de,Indexer:()=>_n,IntDecoding:()=>k,Kmd:()=>zt,LENGTH_ENCODE_BYTE_SIZE:()=>ui,LogicSig:()=>ns,LogicSigAccount:()=>ss,MAX_LEN:()=>oi,MULTISIG_BAD_SENDER_ERROR_MSG:()=>qi,OnApplicationComplete:()=>te,SINGLE_BOOL_SIZE:()=>li,SINGLE_BYTE_SIZE:()=>ci,SourceMap:()=>fs,Transaction:()=>se,TransactionType:()=>ee,abiCheckTransactionType:()=>Ii,abiTypeIsReference:()=>Ri,abiTypeIsTransaction:()=>Si,algosToMicroalgos:()=>fe,appendSignMultisigTransaction:()=>Qn,appendSignRawMultisigSignature:()=>es,assignGroupID:()=>Mn,bigIntToBytes:()=>xn,bytesToBigInt:()=>En,computeGroupID:()=>qn,createDryrun:()=>ys,createMultisigTransaction:()=>Vn,decodeAddress:()=>F,decodeObj:()=>zi,decodeSignedTransaction:()=>ce,decodeUint64:()=>P,decodeUnsignedTransaction:()=>ae,default:()=>Gi,encodeAddress:()=>z,encodeObj:()=>Ki,encodeUint64:()=>B,encodeUnsignedSimulateTransaction:()=>ie,encodeUnsignedTransaction:()=>oe,generateAccount:()=>Tn,getApplicationAddress:()=>G,getMethodByName:()=>Pi,indexerModels:()=>s,instantiateTxnIfNeeded:()=>le,isTransactionWithSigner:()=>ii,isValidAddress:()=>K,logicSigFromByte:()=>as,makeApplicationCallTxnFromObject:()=>ei,makeApplicationClearStateTxn:()=>Xs,makeApplicationClearStateTxnFromObject:()=>Zs,makeApplicationCloseOutTxn:()=>Gs,makeApplicationCloseOutTxnFromObject:()=>Ys,makeApplicationCreateTxn:()=>Ms,makeApplicationCreateTxnFromObject:()=>Ns,makeApplicationDeleteTxn:()=>Ks,makeApplicationDeleteTxnFromObject:()=>zs,makeApplicationNoOpTxn:()=>Js,makeApplicationNoOpTxnFromObject:()=>Qs,makeApplicationOptInTxn:()=>Hs,makeApplicationOptInTxnFromObject:()=>Vs,makeApplicationUpdateTxn:()=>Ws,makeApplicationUpdateTxnFromObject:()=>Fs,makeAssetConfigTxnWithSuggestedParams:()=>Us,makeAssetConfigTxnWithSuggestedParamsFromObject:()=>Cs,makeAssetCreateTxnWithSuggestedParams:()=>Bs,makeAssetCreateTxnWithSuggestedParamsFromObject:()=>Ps,makeAssetDestroyTxnWithSuggestedParams:()=>Os,makeAssetDestroyTxnWithSuggestedParamsFromObject:()=>$s,makeAssetFreezeTxnWithSuggestedParams:()=>Ds,makeAssetFreezeTxnWithSuggestedParamsFromObject:()=>Ls,makeAssetTransferTxnWithSuggestedParams:()=>js,makeAssetTransferTxnWithSuggestedParamsFromObject:()=>qs,makeBasicAccountTransactionSigner:()=>ti,makeEmptyTransactionSigner:()=>si,makeKeyRegistrationTxnWithSuggestedParams:()=>Is,makeKeyRegistrationTxnWithSuggestedParamsFromObject:()=>Rs,makeLogicSigAccountTransactionSigner:()=>ri,makeMultiSigAccountTransactionSigner:()=>ni,makePaymentTxnWithSuggestedParams:()=>ks,makePaymentTxnWithSuggestedParamsFromObject:()=>Ss,masterDerivationKeyToMnemonic:()=>Ln,mergeMultisigTransactions:()=>Xn,microalgosToAlgos:()=>pe,mnemonicFromSeed:()=>Un,mnemonicToMasterDerivationKey:()=>Dn,mnemonicToSecretKey:()=>On,modelsv2:()=>n,multisigAddress:()=>ts,secretKeyToMnemonic:()=>$n,seedFromMnemonic:()=>Cn,signBid:()=>Ni,signBytes:()=>Wi,signLogicSigTransaction:()=>os,signLogicSigTransactionObject:()=>is,signMultisigTransaction:()=>Jn,signTransaction:()=>Mi,tealSign:()=>ls,tealSignFromProgram:()=>hs,verifyBytes:()=>Fi,verifyMultisig:()=>Zn,verifyTealSign:()=>us,waitForConfirmation:()=>An});var n={};r.r(n),r.d(n,{Account:()=>$e,AccountApplicationResponse:()=>De,AccountAssetResponse:()=>Le,AccountParticipation:()=>je,AccountStateDelta:()=>qe,Application:()=>Me,ApplicationLocalState:()=>Ne,ApplicationParams:()=>We,ApplicationStateSchema:()=>Fe,Asset:()=>Ke,AssetHolding:()=>ze,AssetParams:()=>He,BlockHashResponse:()=>Ve,BlockResponse:()=>Ge,Box:()=>Ye,BoxDescriptor:()=>Xe,BoxesResponse:()=>Ze,BuildVersion:()=>Je,CompileResponse:()=>Qe,DisassembleResponse:()=>et,DryrunRequest:()=>tt,DryrunResponse:()=>rt,DryrunSource:()=>nt,DryrunState:()=>st,DryrunTxnResult:()=>it,ErrorResponse:()=>ot,EvalDelta:()=>at,EvalDeltaKeyValue:()=>ct,LightBlockHeaderProof:()=>lt,NodeStatusResponse:()=>ut,PendingTransactionResponse:()=>ht,PendingTransactionsResponse:()=>dt,PostTransactionsResponse:()=>pt,SimulateResponse:()=>ft,SimulateTransactionGroupResult:()=>gt,SimulateTransactionResult:()=>mt,StateProof:()=>yt,StateProofMessage:()=>wt,SupplyResponse:()=>bt,TealKeyValue:()=>vt,TealValue:()=>_t,TransactionParametersResponse:()=>At,TransactionProofResponse:()=>xt,Version:()=>Et});var s={};r.r(s),r.d(s,{Account:()=>ar,AccountParticipation:()=>cr,AccountResponse:()=>lr,AccountStateDelta:()=>ur,AccountsResponse:()=>hr,Application:()=>dr,ApplicationLocalState:()=>pr,ApplicationLocalStatesResponse:()=>fr,ApplicationLogData:()=>gr,ApplicationLogsResponse:()=>mr,ApplicationParams:()=>yr,ApplicationResponse:()=>wr,ApplicationStateSchema:()=>br,ApplicationsResponse:()=>vr,Asset:()=>_r,AssetBalancesResponse:()=>Ar,AssetHolding:()=>xr,AssetHoldingsResponse:()=>Er,AssetParams:()=>Tr,AssetResponse:()=>kr,AssetsResponse:()=>Sr,Block:()=>Ir,BlockRewards:()=>Rr,BlockUpgradeState:()=>Br,BlockUpgradeVote:()=>Pr,Box:()=>Ur,BoxDescriptor:()=>Cr,BoxesResponse:()=>Or,ErrorResponse:()=>$r,EvalDelta:()=>Dr,EvalDeltaKeyValue:()=>Lr,HashFactory:()=>jr,HealthCheck:()=>qr,IndexerStateProofMessage:()=>Mr,MerkleArrayProof:()=>Nr,MiniAssetHolding:()=>Wr,ParticipationUpdates:()=>Fr,StateProofFields:()=>Kr,StateProofParticipant:()=>zr,StateProofReveal:()=>Hr,StateProofSigSlot:()=>Vr,StateProofSignature:()=>Gr,StateProofTracking:()=>Yr,StateProofVerifier:()=>Xr,StateSchema:()=>Zr,TealKeyValue:()=>Jr,TealValue:()=>Qr,Transaction:()=>en,TransactionApplication:()=>tn,TransactionAssetConfig:()=>rn,TransactionAssetFreeze:()=>nn,TransactionAssetTransfer:()=>sn,TransactionKeyreg:()=>on,TransactionPayment:()=>an,TransactionResponse:()=>cn,TransactionSignature:()=>ln,TransactionSignatureLogicsig:()=>un,TransactionSignatureMultisig:()=>hn,TransactionSignatureMultisigSubsignature:()=>dn,TransactionStateProof:()=>pn,TransactionsResponse:()=>fn});var i={};r.r(i),r.d(i,{ABIAddressType:()=>mi,ABIArrayDynamicType:()=>_i,ABIArrayStaticType:()=>vi,ABIBoolType:()=>yi,ABIByteType:()=>wi,ABIContract:()=>Ui,ABIInterface:()=>Ci,ABIMethod:()=>Bi,ABIReferenceType:()=>ki,ABIStringType:()=>bi,ABITransactionType:()=>Ti,ABITupleType:()=>Ai,ABIType:()=>pi,ABIUfixedType:()=>gi,ABIUintType:()=>fi,ADDR_BYTE_SIZE:()=>ai,ALGORAND_MIN_TX_FEE:()=>re,Algodv2:()=>Kt,AtomicTransactionComposer:()=>Li,AtomicTransactionComposerStatus:()=>$i,DryrunResult:()=>Ts,ERROR_INVALID_MICROALGOS:()=>Vi,ERROR_MULTISIG_BAD_SENDER:()=>Hi,INVALID_MICROALGOS_ERROR_MSG:()=>de,Indexer:()=>_n,IntDecoding:()=>k,Kmd:()=>zt,LENGTH_ENCODE_BYTE_SIZE:()=>ui,LogicSig:()=>ns,LogicSigAccount:()=>ss,MAX_LEN:()=>oi,MULTISIG_BAD_SENDER_ERROR_MSG:()=>qi,OnApplicationComplete:()=>te,SINGLE_BOOL_SIZE:()=>li,SINGLE_BYTE_SIZE:()=>ci,SourceMap:()=>fs,Transaction:()=>se,TransactionType:()=>ee,abiCheckTransactionType:()=>Ii,abiTypeIsReference:()=>Ri,abiTypeIsTransaction:()=>Si,algosToMicroalgos:()=>fe,appendSignMultisigTransaction:()=>Qn,appendSignRawMultisigSignature:()=>es,assignGroupID:()=>Mn,bigIntToBytes:()=>xn,bytesToBigInt:()=>En,computeGroupID:()=>qn,createDryrun:()=>ys,createMultisigTransaction:()=>Vn,decodeAddress:()=>F,decodeObj:()=>zi,decodeSignedTransaction:()=>ce,decodeUint64:()=>P,decodeUnsignedTransaction:()=>ae,encodeAddress:()=>z,encodeObj:()=>Ki,encodeUint64:()=>B,encodeUnsignedSimulateTransaction:()=>ie,encodeUnsignedTransaction:()=>oe,generateAccount:()=>Tn,getApplicationAddress:()=>G,getMethodByName:()=>Pi,indexerModels:()=>s,instantiateTxnIfNeeded:()=>le,isTransactionWithSigner:()=>ii,isValidAddress:()=>K,logicSigFromByte:()=>as,makeApplicationCallTxnFromObject:()=>ei,makeApplicationClearStateTxn:()=>Xs,makeApplicationClearStateTxnFromObject:()=>Zs,makeApplicationCloseOutTxn:()=>Gs,makeApplicationCloseOutTxnFromObject:()=>Ys,makeApplicationCreateTxn:()=>Ms,makeApplicationCreateTxnFromObject:()=>Ns,makeApplicationDeleteTxn:()=>Ks,makeApplicationDeleteTxnFromObject:()=>zs,makeApplicationNoOpTxn:()=>Js,makeApplicationNoOpTxnFromObject:()=>Qs,makeApplicationOptInTxn:()=>Hs,makeApplicationOptInTxnFromObject:()=>Vs,makeApplicationUpdateTxn:()=>Ws,makeApplicationUpdateTxnFromObject:()=>Fs,makeAssetConfigTxnWithSuggestedParams:()=>Us,makeAssetConfigTxnWithSuggestedParamsFromObject:()=>Cs,makeAssetCreateTxnWithSuggestedParams:()=>Bs,makeAssetCreateTxnWithSuggestedParamsFromObject:()=>Ps,makeAssetDestroyTxnWithSuggestedParams:()=>Os,makeAssetDestroyTxnWithSuggestedParamsFromObject:()=>$s,makeAssetFreezeTxnWithSuggestedParams:()=>Ds,makeAssetFreezeTxnWithSuggestedParamsFromObject:()=>Ls,makeAssetTransferTxnWithSuggestedParams:()=>js,makeAssetTransferTxnWithSuggestedParamsFromObject:()=>qs,makeBasicAccountTransactionSigner:()=>ti,makeEmptyTransactionSigner:()=>si,makeKeyRegistrationTxnWithSuggestedParams:()=>Is,makeKeyRegistrationTxnWithSuggestedParamsFromObject:()=>Rs,makeLogicSigAccountTransactionSigner:()=>ri,makeMultiSigAccountTransactionSigner:()=>ni,makePaymentTxnWithSuggestedParams:()=>ks,makePaymentTxnWithSuggestedParamsFromObject:()=>Ss,masterDerivationKeyToMnemonic:()=>Ln,mergeMultisigTransactions:()=>Xn,microalgosToAlgos:()=>pe,mnemonicFromSeed:()=>Un,mnemonicToMasterDerivationKey:()=>Dn,mnemonicToSecretKey:()=>On,modelsv2:()=>n,multisigAddress:()=>ts,secretKeyToMnemonic:()=>$n,seedFromMnemonic:()=>Cn,signBid:()=>Ni,signBytes:()=>Wi,signLogicSigTransaction:()=>os,signLogicSigTransactionObject:()=>is,signMultisigTransaction:()=>Jn,signTransaction:()=>Mi,tealSign:()=>ls,tealSignFromProgram:()=>hs,verifyBytes:()=>Fi,verifyMultisig:()=>Zn,verifyTealSign:()=>us,waitForConfirmation:()=>An});var o=r(8764),a=r(780),c=r.n(a),l=r(3434),u=r.n(l);function h(e){return u().sha512_256.array(e)}function d(e){return c().sign.keyPair.fromSeed(e)}function p(e){return e===c().sign.signatureLength}function f(e){return c().sign.keyPair.fromSecretKey(e)}function g(e,t){return c().sign.detached(e,t)}function m(e,t){return c().verify(e,t)}function y(e,t,r){return c().sign.detached.verify(e,t,r)}const w=c().sign.publicKeyLength,b=(c().sign.secretKeyLength,32),v=32;var _,A=r(9090),x=r.n(A),E=r(4400),T=r.n(E);!function(e){e.DEFAULT="default",e.SAFE="safe",e.MIXED="mixed",e.BIGINT="bigint"}(_||(_={}));const k=_,S=T()({useNativeBigInt:!0,strict:!0});function I(e,t){return e.length===t.length&&Array.from(e).every(((e,r)=>e===t[r]))}function R(...e){const t=e.reduce(((e,t)=>e+t.length),0),r=new Uint8Array(t);let n=0;for(let t=0;t<e.length;t++)r.set(e[t],n),n+=e[t].length;return r}function B(e){if("bigint"!=typeof e&&!Number.isInteger(e)||e<0||e>BigInt("0xffffffffffffffff"))throw new Error("Input is not a 64-bit unsigned integer");const t=new Uint8Array(8);return new DataView(t.buffer).setBigUint64(0,BigInt(e)),t}function P(e,t="safe"){if("safe"!==t&&"mixed"!==t&&"bigint"!==t)throw new Error(`Unknown decodingMode option: ${t}`);if(0===e.byteLength||e.byteLength>8)throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${e.byteLength}`);const r=R(new Uint8Array(8-e.byteLength),e),n=new DataView(r.buffer).getBigUint64(0),s=n>BigInt(Number.MAX_SAFE_INTEGER);if("safe"===t){if(s)throw new Error(`Integer exceeds maximum safe integer: ${n.toString()}. Try decoding with "mixed" or "safe" decodingMode.`);return Number(n)}return"mixed"!==t||s?n:Number(n)}const U=36,C=4,O=58,$=new Uint8Array([77,117,108,116,105,115,105,103,65,100,100,114]),D=o.lW.from("appID"),L="address seems to be malformed",j="wrong checksum for address",q="invalid multisig version",M="bad multisig threshold",N="bad multisig public key - wrong length",W="nacl public key length is not 32 bytes";function F(e){if("string"!=typeof e||e.length!==O)throw new Error(L);const t=x().decode.asBytes(e.toString());if(t.length!==U)throw new Error(L);const r=new Uint8Array(t.slice(0,U-C)),n=new Uint8Array(t.slice(w,U));if(!I(h(r).slice(b-C,b),n))throw new Error(j);return{publicKey:r,checksum:n}}function K(e){try{F(e)}catch(e){return!1}return!0}function z(e){const t=h(e).slice(w-C,w);return x().encode(R(e,t)).toString().slice(0,O)}function H({version:e,threshold:t,pks:r}){if(1!==e||e>255||e<0)throw new Error(q);if(0===t||0===r.length||t>r.length||t>255)throw new Error(M);const n=U-C;if(n!==w)throw new Error(W);const s=new Uint8Array($.length+2+n*r.length);s.set($,0),s.set([e],$.length),s.set([t],$.length+1);for(let e=0;e<r.length;e++){if(r[e].length!==n)throw new Error(N);s.set(r[e],$.length+2+e*n)}return new Uint8Array(h(s))}function V({version:e,threshold:t,addrs:r}){return z(H({version:e,threshold:t,pks:r.map((e=>F(e).publicKey))}))}function G(e){const t=h(R(D,B(e)));return z(new Uint8Array(t))}var Y=r(6424);const X="The object contains empty or 0 values. First empty or 0 value encountered during encoding: ";function Z(e){return Y.encode(e,{sortKeys:!0})}function J(e){const t=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&(!e[t]||0===e[t].length))return{containsEmpty:!0,firstEmptyKey:t};return{containsEmpty:!1,firstEmptyKey:void 0}}(e);if(t.containsEmpty)throw new Error(X+t.firstEmptyKey);return Z(e)}function Q(e){return Y.decode(e)}var ee,te;!function(e){e.pay="pay",e.keyreg="keyreg",e.acfg="acfg",e.axfer="axfer",e.afrz="afrz",e.appl="appl",e.stpf="stpf"}(ee||(ee={})),function(e){e[e.NoOpOC=0]="NoOpOC",e[e.OptInOC=1]="OptInOC",e[e.CloseOutOC=2]="CloseOutOC",e[e.ClearStateOC=3]="ClearStateOC",e[e.UpdateApplicationOC=4]="UpdateApplicationOC",e[e.DeleteApplicationOC=5]="DeleteApplicationOC"}(te||(te={}));const re=1e3;function ne(e,t,r){if(null==e)return;let n;if("string"==typeof e?n=o.lW.from(e,"base64"):e.constructor===Uint8Array?n=o.lW.from(e):o.lW.isBuffer(e)&&(n=e),null==n||n.byteLength!==r)throw Error(`${t} must be a ${r} byte Uint8Array or Buffer or base64 string.`);return n}class se{constructor({...e}){this.name="Transaction",this.tag=o.lW.from("TX");const t={type:ee.pay,flatFee:!1,nonParticipation:!1};if(void 0===e.type&&(e.type=t.type),void 0===e.flatFee&&(e.flatFee=t.flatFee),e.type===ee.keyreg&&void 0!==e.voteKey&&void 0===e.nonParticipation&&(e.nonParticipation=t.nonParticipation),void 0!==e.suggestedParams){const t=e;t.genesisHash=t.suggestedParams.genesisHash,t.fee=t.suggestedParams.fee,void 0!==t.suggestedParams.flatFee&&(t.flatFee=t.suggestedParams.flatFee),t.firstRound=t.suggestedParams.firstRound,t.lastRound=t.suggestedParams.lastRound,t.genesisID=t.suggestedParams.genesisID}const r=e;if(r.from=F(r.from),void 0!==r.to&&(r.to=F(r.to)),void 0!==r.closeRemainderTo&&(r.closeRemainderTo=F(r.closeRemainderTo)),void 0!==r.assetManager&&(r.assetManager=F(r.assetManager)),void 0!==r.assetReserve&&(r.assetReserve=F(r.assetReserve)),void 0!==r.assetFreeze&&(r.assetFreeze=F(r.assetFreeze)),void 0!==r.assetClawback&&(r.assetClawback=F(r.assetClawback)),void 0!==r.assetRevocationTarget&&(r.assetRevocationTarget=F(r.assetRevocationTarget)),void 0!==r.freezeAccount&&(r.freezeAccount=F(r.freezeAccount)),void 0!==r.reKeyTo&&(r.reKeyTo=F(r.reKeyTo)),void 0===r.genesisHash)throw Error("genesis hash must be specified and in a base64 string.");if(r.genesisHash=o.lW.from(r.genesisHash,"base64"),void 0!==r.amount&&(!(Number.isSafeInteger(r.amount)||"bigint"==typeof r.amount&&r.amount<=BigInt("0xffffffffffffffff"))||r.amount<0))throw Error("Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.");if(!Number.isSafeInteger(r.fee)||r.fee<0)throw Error("fee must be a positive number and smaller than 2^53-1");if(!Number.isSafeInteger(r.firstRound)||r.firstRound<0)throw Error("firstRound must be a positive number");if(!Number.isSafeInteger(r.lastRound)||r.lastRound<0)throw Error("lastRound must be a positive number");if(void 0!==r.extraPages&&(!Number.isInteger(r.extraPages)||r.extraPages<0||r.extraPages>3))throw Error("extraPages must be an Integer between and including 0 to 3");if(void 0!==r.assetTotal&&(!(Number.isSafeInteger(r.assetTotal)||"bigint"==typeof r.assetTotal&&r.assetTotal<=BigInt("0xffffffffffffffff"))||r.assetTotal<0))throw Error("Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.");if(void 0!==r.assetDecimals&&(!Number.isSafeInteger(r.assetDecimals)||r.assetDecimals<0||r.assetDecimals>19))throw Error(`assetDecimals must be a positive number and smaller than ${19..toString()}`);if(void 0!==r.assetIndex&&(!Number.isSafeInteger(r.assetIndex)||r.assetIndex<0))throw Error("Asset index must be a positive number and smaller than 2^53-1");if(void 0!==r.appIndex&&(!Number.isSafeInteger(r.appIndex)||r.appIndex<0))throw Error("Application index must be a positive number and smaller than 2^53-1");if(void 0!==r.appLocalInts&&(!Number.isSafeInteger(r.appLocalInts)||r.appLocalInts<0))throw Error("Application local ints count must be a positive number and smaller than 2^53-1");if(void 0!==r.appLocalByteSlices&&(!Number.isSafeInteger(r.appLocalByteSlices)||r.appLocalByteSlices<0))throw Error("Application local byte slices count must be a positive number and smaller than 2^53-1");if(void 0!==r.appGlobalInts&&(!Number.isSafeInteger(r.appGlobalInts)||r.appGlobalInts<0))throw Error("Application global ints count must be a positive number and smaller than 2^53-1");if(void 0!==r.appGlobalByteSlices&&(!Number.isSafeInteger(r.appGlobalByteSlices)||r.appGlobalByteSlices<0))throw Error("Application global byte slices count must be a positive number and smaller than 2^53-1");if(void 0!==r.appApprovalProgram&&r.appApprovalProgram.constructor!==Uint8Array)throw Error("appApprovalProgram must be a Uint8Array.");if(void 0!==r.appClearProgram&&r.appClearProgram.constructor!==Uint8Array)throw Error("appClearProgram must be a Uint8Array.");if(void 0!==r.appArgs){if(!Array.isArray(r.appArgs))throw Error("appArgs must be an Array of Uint8Array.");r.appArgs=r.appArgs.slice(),r.appArgs.forEach((e=>{if(e.constructor!==Uint8Array)throw Error("each element of AppArgs must be a Uint8Array.")}))}else r.appArgs=[];if(void 0!==r.appAccounts){if(!Array.isArray(r.appAccounts))throw Error("appAccounts must be an Array of addresses.");r.appAccounts=r.appAccounts.map((e=>F(e)))}if(void 0!==r.appForeignApps){if(!Array.isArray(r.appForeignApps))throw Error("appForeignApps must be an Array of integers.");r.appForeignApps=r.appForeignApps.slice(),r.appForeignApps.forEach((e=>{if(!Number.isSafeInteger(e)||e<0)throw Error("each foreign application index must be a positive number and smaller than 2^53-1")}))}if(void 0!==r.appForeignAssets){if(!Array.isArray(r.appForeignAssets))throw Error("appForeignAssets must be an Array of integers.");r.appForeignAssets=r.appForeignAssets.slice(),r.appForeignAssets.forEach((e=>{if(!Number.isSafeInteger(e)||e<0)throw Error("each foreign asset index must be a positive number and smaller than 2^53-1")}))}if(void 0!==r.boxes){if(!Array.isArray(r.boxes))throw Error("boxes must be an Array of BoxReference.");r.boxes=r.boxes.slice(),r.boxes.forEach((e=>{if(!Number.isSafeInteger(e.appIndex)||e.name.constructor!==Uint8Array)throw Error("box app index must be a number and name must be an Uint8Array.")}))}if(void 0!==r.assetMetadataHash&&0!==r.assetMetadataHash.length){if("string"==typeof r.assetMetadataHash&&(r.assetMetadataHash=new Uint8Array(o.lW.from(r.assetMetadataHash))),r.assetMetadataHash.constructor!==Uint8Array||32!==r.assetMetadataHash.byteLength)throw Error("assetMetadataHash must be a 32 byte Uint8Array or string.");r.assetMetadataHash.every((e=>0===e))&&(r.assetMetadataHash=void 0)}else r.assetMetadataHash=void 0;if(void 0!==r.note){if(r.note.constructor!==Uint8Array)throw Error("note must be a Uint8Array.")}else r.note=new Uint8Array(0);if(void 0!==r.lease){if(r.lease.constructor!==Uint8Array)throw Error("lease must be a Uint8Array.");if(32!==r.lease.length)throw Error(`lease must be of length ${32..toString()}.`);r.lease.every((e=>0===e))&&(r.lease=new Uint8Array(0))}else r.lease=new Uint8Array(0);if(r.voteKey=ne(r.voteKey,"voteKey",32),r.selectionKey=ne(r.selectionKey,"selectionKey",32),r.stateProofKey=ne(r.stateProofKey,"stateProofKey",64),r.nonParticipation&&(r.voteKey||r.selectionKey||r.voteFirst||r.stateProofKey||r.voteLast||r.voteKeyDilution))throw new Error("nonParticipation is true but participation params are present.");if(!r.nonParticipation&&(r.voteKey||r.selectionKey||r.stateProofKey||r.voteFirst||r.voteLast||r.voteKeyDilution)&&!(r.voteKey&&r.selectionKey&&r.voteFirst&&r.voteLast&&r.voteKeyDilution))throw new Error("online key registration missing at least one of the following fields: voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution");if(delete r.suggestedParams,Object.assign(this,function(e){const t={...e};return Object.keys(t).forEach((e=>{void 0===t[e]&&delete t[e]})),t}(r)),r.flatFee||(this.fee*=this.estimateSize(),this.fee<re&&(this.fee=re)),this.group=void 0,void 0!==r.stateProofType&&(!Number.isSafeInteger(r.stateProofType)||r.stateProofType<0))throw Error("State Proof type must be a positive number and smaller than 2^53-1");if(void 0!==r.stateProofMessage){if(r.stateProofMessage.constructor!==Uint8Array)throw Error("stateProofMessage must be a Uint8Array.")}else r.stateProofMessage=new Uint8Array(0);if(void 0!==r.stateProof){if(r.stateProof.constructor!==Uint8Array)throw Error("stateProof must be a Uint8Array.")}else r.stateProof=new Uint8Array(0)}get_obj_for_encoding(){if("pay"===this.type){const e={amt:this.amount,fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:"pay",gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group};return void 0!==this.closeRemainderTo&&"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"!==z(this.closeRemainderTo.publicKey)&&(e.close=o.lW.from(this.closeRemainderTo.publicKey)),void 0!==this.reKeyTo&&(e.rekey=o.lW.from(this.reKeyTo.publicKey)),void 0!==this.to&&(e.rcv=o.lW.from(this.to.publicKey)),e.note.length||delete e.note,e.amt||delete e.amt,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,void 0===e.grp&&delete e.grp,e.lx.length||delete e.lx,e.rekey||delete e.rekey,e}if("keyreg"===this.type){const e={fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group,votekey:this.voteKey,selkey:this.selectionKey,sprfkey:this.stateProofKey,votefst:this.voteFirst,votelst:this.voteLast,votekd:this.voteKeyDilution};return e.note.length||delete e.note,e.lx.length||delete e.lx,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,void 0===e.grp&&delete e.grp,void 0!==this.reKeyTo&&(e.rekey=o.lW.from(this.reKeyTo.publicKey)),this.nonParticipation&&(e.nonpart=!0),e.selkey||delete e.selkey,e.votekey||delete e.votekey,e.sprfkey||delete e.sprfkey,e.votefst||delete e.votefst,e.votelst||delete e.votelst,e.votekd||delete e.votekd,e}if("acfg"===this.type){const e={fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group,caid:this.assetIndex,apar:{t:this.assetTotal,df:this.assetDefaultFrozen,dc:this.assetDecimals}};return void 0!==this.assetManager&&(e.apar.m=o.lW.from(this.assetManager.publicKey)),void 0!==this.assetReserve&&(e.apar.r=o.lW.from(this.assetReserve.publicKey)),void 0!==this.assetFreeze&&(e.apar.f=o.lW.from(this.assetFreeze.publicKey)),void 0!==this.assetClawback&&(e.apar.c=o.lW.from(this.assetClawback.publicKey)),void 0!==this.assetName&&(e.apar.an=this.assetName),void 0!==this.assetUnitName&&(e.apar.un=this.assetUnitName),void 0!==this.assetURL&&(e.apar.au=this.assetURL),void 0!==this.assetMetadataHash&&(e.apar.am=o.lW.from(this.assetMetadataHash)),e.note.length||delete e.note,e.lx.length||delete e.lx,e.amt||delete e.amt,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,void 0!==this.reKeyTo&&(e.rekey=o.lW.from(this.reKeyTo.publicKey)),e.caid||delete e.caid,e.apar.t||e.apar.un||e.apar.an||e.apar.df||e.apar.m||e.apar.r||e.apar.f||e.apar.c||e.apar.au||e.apar.am||e.apar.dc?(e.apar.t||delete e.apar.t,e.apar.dc||delete e.apar.dc,e.apar.un||delete e.apar.un,e.apar.an||delete e.apar.an,e.apar.df||delete e.apar.df,e.apar.m||delete e.apar.m,e.apar.r||delete e.apar.r,e.apar.f||delete e.apar.f,e.apar.c||delete e.apar.c,e.apar.au||delete e.apar.au,e.apar.am||delete e.apar.am):delete e.apar,void 0===e.grp&&delete e.grp,e}if("axfer"===this.type){const e={aamt:this.amount,fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),arcv:o.lW.from(this.to.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group,xaid:this.assetIndex};return void 0!==this.closeRemainderTo&&(e.aclose=o.lW.from(this.closeRemainderTo.publicKey)),void 0!==this.assetRevocationTarget&&(e.asnd=o.lW.from(this.assetRevocationTarget.publicKey)),e.note.length||delete e.note,e.lx.length||delete e.lx,e.aamt||delete e.aamt,e.amt||delete e.amt,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,void 0===e.grp&&delete e.grp,e.aclose||delete e.aclose,e.asnd||delete e.asnd,e.rekey||delete e.rekey,void 0!==this.reKeyTo&&(e.rekey=o.lW.from(this.reKeyTo.publicKey)),e}if("afrz"===this.type){const e={fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group,faid:this.assetIndex,afrz:this.freezeState};return void 0!==this.freezeAccount&&(e.fadd=o.lW.from(this.freezeAccount.publicKey)),e.note.length||delete e.note,e.lx.length||delete e.lx,e.amt||delete e.amt,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,e.afrz||delete e.afrz,void 0===e.grp&&delete e.grp,void 0!==this.reKeyTo&&(e.rekey=o.lW.from(this.reKeyTo.publicKey)),e}if("appl"===this.type){const n={fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),grp:this.group,apid:this.appIndex,apan:this.appOnComplete,apls:{nui:this.appLocalInts,nbs:this.appLocalByteSlices},apgs:{nui:this.appGlobalInts,nbs:this.appGlobalByteSlices},apfa:this.appForeignApps,apas:this.appForeignAssets,apep:this.extraPages,apbx:(e=this.boxes,t=this.appForeignApps,r=this.appIndex,null==e?[]:e.map((e=>function(e,t,r){const n=e.appIndex,s=e.name,i=0===n||n===r;let o=0;if(null!=t&&(o=t.indexOf(n)+1),0===o&&!i)throw new Error(`Box ref with appId ${n} not in foreign-apps`);return{i:o,n:s}}(e,t,r))))};void 0!==this.reKeyTo&&(n.rekey=o.lW.from(this.reKeyTo.publicKey)),void 0!==this.appApprovalProgram&&(n.apap=o.lW.from(this.appApprovalProgram)),void 0!==this.appClearProgram&&(n.apsu=o.lW.from(this.appClearProgram)),void 0!==this.appArgs&&(n.apaa=this.appArgs.map((e=>o.lW.from(e)))),void 0!==this.appAccounts&&(n.apat=this.appAccounts.map((e=>o.lW.from(e.publicKey)))),n.note.length||delete n.note,n.lx.length||delete n.lx,n.amt||delete n.amt,n.fee||delete n.fee,n.fv||delete n.fv,n.gen||delete n.gen,n.apid||delete n.apid,n.apls.nui||delete n.apls.nui,n.apls.nbs||delete n.apls.nbs,n.apls.nui||n.apls.nbs||delete n.apls,n.apgs.nui||delete n.apgs.nui,n.apgs.nbs||delete n.apgs.nbs,n.apaa&&n.apaa.length||delete n.apaa,n.apgs.nui||n.apgs.nbs||delete n.apgs,n.apap||delete n.apap,n.apsu||delete n.apsu,n.apan||delete n.apan,n.apfa&&n.apfa.length||delete n.apfa,n.apas&&n.apas.length||delete n.apas;for(const e of n.apbx)e.i||delete e.i,e.n&&e.n.length||delete e.n;return n.apbx&&n.apbx.length||delete n.apbx,n.apat&&n.apat.length||delete n.apat,n.apep||delete n.apep,void 0===n.grp&&delete n.grp,n}var e,t,r;if("stpf"===this.type){const e={fee:this.fee,fv:this.firstRound,lv:this.lastRound,note:o.lW.from(this.note),snd:o.lW.from(this.from.publicKey),type:this.type,gen:this.genesisID,gh:this.genesisHash,lx:o.lW.from(this.lease),sptype:this.stateProofType,spmsg:o.lW.from(this.stateProofMessage),sp:o.lW.from(this.stateProof)};return e.sptype||delete e.sptype,e.note.length||delete e.note,e.lx.length||delete e.lx,e.amt||delete e.amt,e.fee||delete e.fee,e.fv||delete e.fv,e.gen||delete e.gen,e.apid||delete e.apid,e.apaa&&e.apaa.length||delete e.apaa,e.apap||delete e.apap,e.apsu||delete e.apsu,e.apan||delete e.apan,e.apfa&&e.apfa.length||delete e.apfa,e.apas&&e.apas.length||delete e.apas,e.apat&&e.apat.length||delete e.apat,e.apep||delete e.apep,void 0===e.grp&&delete e.grp,e}}static from_obj_for_encoding(e){const t=Object.create(this.prototype);if(t.name="Transaction",t.tag=o.lW.from("TX"),t.genesisID=e.gen,t.genesisHash=o.lW.from(e.gh),(r=e.type)!==ee.pay&&r!==ee.keyreg&&r!==ee.acfg&&r!==ee.axfer&&r!==ee.afrz&&r!==ee.appl&&r!==ee.stpf)throw new Error(`Unrecognized transaction type: ${e.type}`);var r;return t.type=e.type,t.fee=e.fee,t.firstRound=e.fv,t.lastRound=e.lv,t.note=new Uint8Array(e.note),t.lease=new Uint8Array(e.lx),t.from=F(z(new Uint8Array(e.snd))),void 0!==e.grp&&(t.group=o.lW.from(e.grp)),void 0!==e.rekey&&(t.reKeyTo=F(z(new Uint8Array(e.rekey)))),"pay"===e.type?(t.amount=e.amt,t.to=F(z(new Uint8Array(e.rcv))),void 0!==e.close&&(t.closeRemainderTo=F(z(e.close)))):"keyreg"===e.type?(void 0!==e.votekey&&(t.voteKey=o.lW.from(e.votekey)),void 0!==e.selkey&&(t.selectionKey=o.lW.from(e.selkey)),void 0!==e.sprfkey&&(t.stateProofKey=o.lW.from(e.sprfkey)),void 0!==e.votekd&&(t.voteKeyDilution=e.votekd),void 0!==e.votefst&&(t.voteFirst=e.votefst),void 0!==e.votelst&&(t.voteLast=e.votelst),void 0!==e.nonpart&&(t.nonParticipation=e.nonpart)):"acfg"===e.type?(void 0!==e.caid&&(t.assetIndex=e.caid),void 0!==e.apar&&(t.assetTotal=e.apar.t,t.assetDefaultFrozen=e.apar.df,void 0!==e.apar.dc&&(t.assetDecimals=e.apar.dc),void 0!==e.apar.m&&(t.assetManager=F(z(new Uint8Array(e.apar.m)))),void 0!==e.apar.r&&(t.assetReserve=F(z(new Uint8Array(e.apar.r)))),void 0!==e.apar.f&&(t.assetFreeze=F(z(new Uint8Array(e.apar.f)))),void 0!==e.apar.c&&(t.assetClawback=F(z(new Uint8Array(e.apar.c)))),void 0!==e.apar.un&&(t.assetUnitName=e.apar.un),void 0!==e.apar.an&&(t.assetName=e.apar.an),void 0!==e.apar.au&&(t.assetURL=e.apar.au),void 0!==e.apar.am&&(t.assetMetadataHash=e.apar.am))):"axfer"===e.type?(void 0!==e.xaid&&(t.assetIndex=e.xaid),void 0!==e.aamt&&(t.amount=e.aamt),void 0!==e.aclose&&(t.closeRemainderTo=F(z(new Uint8Array(e.aclose)))),void 0!==e.asnd&&(t.assetRevocationTarget=F(z(new Uint8Array(e.asnd)))),t.to=F(z(new Uint8Array(e.arcv)))):"afrz"===e.type?(void 0!==e.afrz&&(t.freezeState=e.afrz),void 0!==e.faid&&(t.assetIndex=e.faid),t.freezeAccount=F(z(new Uint8Array(e.fadd)))):"appl"===e.type?(void 0!==e.apid&&(t.appIndex=e.apid),void 0!==e.apan&&(t.appOnComplete=e.apan),void 0!==e.apls&&(void 0!==e.apls.nui&&(t.appLocalInts=e.apls.nui),void 0!==e.apls.nbs&&(t.appLocalByteSlices=e.apls.nbs)),void 0!==e.apgs&&(void 0!==e.apgs.nui&&(t.appGlobalInts=e.apgs.nui),void 0!==e.apgs.nbs&&(t.appGlobalByteSlices=e.apgs.nbs)),void 0!==e.apep&&(t.extraPages=e.apep),void 0!==e.apap&&(t.appApprovalProgram=new Uint8Array(e.apap)),void 0!==e.apsu&&(t.appClearProgram=new Uint8Array(e.apsu)),void 0!==e.apaa&&(t.appArgs=e.apaa.map((e=>new Uint8Array(e)))),void 0!==e.apat&&(t.appAccounts=e.apat.map((e=>F(z(new Uint8Array(e)))))),void 0!==e.apfa&&(t.appForeignApps=e.apfa),void 0!==e.apas&&(t.appForeignAssets=e.apas),void 0!==e.apbx&&(t.boxes=e.apbx.map((e=>({appIndex:e.i?t.appForeignApps[e.i-1]:0,name:e.n}))))):"stpf"===e.type&&(void 0!==e.sptype&&(t.stateProofType=e.sptype),void 0!==e.sp&&(t.stateProof=e.sp),void 0!==e.spmsg&&(t.stateProofMessage=e.spmsg)),t}estimateSize(){return this.toByte().length+75}bytesToSign(){const e=this.toByte();return o.lW.from(R(this.tag,e))}toByte(){return J(this.get_obj_for_encoding())}rawSignTxn(e){const t=g(this.bytesToSign(),e);return o.lW.from(t)}signTxn(e){const t={sig:this.rawSignTxn(e),txn:this.get_obj_for_encoding()},r=f(e).publicKey;return z(r)!==z(this.from.publicKey)&&(t.sgnr=o.lW.from(r)),new Uint8Array(J(t))}attachSignature(e,t){if(!p(t.length))throw new Error("Invalid signature length");const r={sig:o.lW.from(t),txn:this.get_obj_for_encoding()};if(e!==z(this.from.publicKey)){const t=F(e).publicKey;r.sgnr=o.lW.from(t)}return new Uint8Array(J(r))}rawTxID(){const e=this.toByte(),t=o.lW.from(R(this.tag,e));return o.lW.from(h(t))}txID(){const e=this.rawTxID();return x().encode(e).slice(0,52)}addLease(e,t=0){let r;if(void 0!==e){if(e.constructor!==Uint8Array)throw Error("lease must be a Uint8Array.");if(32!==e.length)throw Error(`lease must be of length ${32..toString()}.`);r=new Uint8Array(e)}else r=new Uint8Array(0);this.lease=r,0!==t&&(this.fee+=37*t)}addRekey(e,t=0){void 0!==e&&(this.reKeyTo=F(e)),0!==t&&(this.fee+=37*t)}_getDictForDisplay(){const e={...this};return e.tag=e.tag.toString(),e.from=z(e.from.publicKey),void 0!==e.to&&(e.to=z(e.to.publicKey)),void 0!==e.freezeAccount&&(e.freezeAccount=z(e.freezeAccount.publicKey)),void 0!==e.closeRemainderTo&&(e.closeRemainderTo=z(e.closeRemainderTo.publicKey)),void 0!==e.assetManager&&(e.assetManager=z(e.assetManager.publicKey)),void 0!==e.assetReserve&&(e.assetReserve=z(e.assetReserve.publicKey)),void 0!==e.assetFreeze&&(e.assetFreeze=z(e.assetFreeze.publicKey)),void 0!==e.assetClawback&&(e.assetClawback=z(e.assetClawback.publicKey)),void 0!==e.assetRevocationTarget&&(e.assetRevocationTarget=z(e.assetRevocationTarget.publicKey)),void 0!==e.reKeyTo&&(e.reKeyTo=z(e.reKeyTo.publicKey)),e.genesisHash=e.genesisHash.toString("base64"),e}prettyPrint(){console.log(this._getDictForDisplay())}toString(){return JSON.stringify(this._getDictForDisplay())}}function ie(e){return Z({sig:null,txn:e.get_obj_for_encoding()})}function oe(e){return J(e.get_obj_for_encoding())}function ae(e){const t=Q(e);return se.from_obj_for_encoding(t)}function ce(e){const t=Q(e);return{...t,txn:se.from_obj_for_encoding(t.txn)}}function le(e){return e instanceof se?e:new se(e)}class ue{constructor({bidderKey:e,bidAmount:t,bidID:r,auctionKey:n,auctionID:s,maxPrice:i}){this.name="Bid",this.tag=o.lW.from([97,66]);const a=F(e),c=F(n);if(!Number.isSafeInteger(t)||t<0)throw Error("Bid amount must be positive and 2^53-1");if(!Number.isSafeInteger(r)||r<0)throw Error("BidID must be positive and 2^53-1");if(!Number.isSafeInteger(s)||s<0)throw Error("auctionID must be positive");Object.assign(this,{bidderKey:a,bidAmount:t,bidID:r,auctionKey:c,auctionID:s,maxPrice:i})}get_obj_for_encoding(){return{bidder:o.lW.from(this.bidderKey.publicKey),cur:this.bidAmount,price:this.maxPrice,id:this.bidID,auc:o.lW.from(this.auctionKey.publicKey),aid:this.auctionID}}signBid(e){const t=J(this.get_obj_for_encoding()),r=g(o.lW.from(R(this.tag,t)),e),n={sig:o.lW.from(r),bid:this.get_obj_for_encoding()};return new Uint8Array(J({t:"b",b:n}))}}const he=1e6,de="Microalgos should be positive and less than 2^53 - 1.";function pe(e){if(e<0||!Number.isSafeInteger(e))throw new Error(de);return e/he}function fe(e){const t=e*he;return Math.round(t)}var ge=r(4098);class me extends Error{constructor(e,t){super(e),this.response=t,this.name="URLTokenBaseHTTPError",this.response=t}}class ye{constructor(e,t,r,n={}){this.defaultHeaders=n;const s=t.endsWith("/")?t:`${t}/`,i=new URL(s);if(void 0!==r&&(i.port=r.toString()),0===i.protocol.length)throw new Error("Invalid base server URL, protocol must be defined.");this.baseURL=i,this.tokenHeader=e}getURL(e,t){let r;r=e.startsWith("./")?e:e.startsWith("/")?`.${e}`:`./${e}`;const n=new URL(r,this.baseURL);if(t)for(const[e,r]of Object.entries(t))n.searchParams.set(e,r);return n.toString()}static formatFetchResponseHeaders(e){const t={};return e.forEach(((e,r)=>{t[e]=r})),t}static async checkHttpError(e){if(e.ok)return;let t=null,r=null;try{t=new Uint8Array(await e.arrayBuffer());const n=JSON.parse(o.lW.from(t).toString());n.message&&(r=n.message)}catch(e){}let n=`Network request error. Received status ${e.status} (${e.statusText})`;throw r&&(n+=`: ${r}`),new me(n,{body:t,status:e.status,headers:ye.formatFetchResponseHeaders(e.headers)})}static async formatFetchResponse(e){return await this.checkHttpError(e),{body:new Uint8Array(await e.arrayBuffer()),status:e.status,headers:ye.formatFetchResponseHeaders(e.headers)}}async get(e,t,r={}){const n={...this.tokenHeader,...this.defaultHeaders,...r},s=await(0,ge.fetch)(this.getURL(e,t),{mode:"cors",headers:n});return ye.formatFetchResponse(s)}async post(e,t,r,n={}){const s={...this.tokenHeader,...this.defaultHeaders,...n},i=await(0,ge.fetch)(this.getURL(e,r),{method:"POST",mode:"cors",body:t,headers:s});return ye.formatFetchResponse(i)}async delete(e,t,r,n={}){const s={...this.tokenHeader,...this.defaultHeaders,...n},i=await(0,ge.fetch)(this.getURL(e,r),{method:"DELETE",mode:"cors",body:t,headers:s});return ye.formatFetchResponse(i)}}function we(e){return Object.keys(e).reduce(((t,r)=>(t[r.toLowerCase()]=e[r],t)),{})}class be{constructor(e,t,r,n={}){this.bc=void 0!==t?new ye(e,t,r,n):e}static parseJSON(e,t,r={}){try{return 0===Object.keys(r).length?e&&JSON.parse(e):e&&function(e,t){const r=t&&t.intDecoding?t.intDecoding:k.DEFAULT;return S.parse(e,((e,t)=>{if(null!=t&&"object"==typeof t&&null==Object.getPrototypeOf(t)&&Object.setPrototypeOf(t,Object.prototype),"bigint"==typeof t){if("safe"===r&&t>Number.MAX_SAFE_INTEGER)throw new Error(`Integer exceeds maximum safe integer: ${t.toString()}. Try parsing with a different intDecoding option.`);return"bigint"===r||"mixed"===r&&t>Number.MAX_SAFE_INTEGER?t:Number(t)}return"number"==typeof t&&"bigint"===r&&Number.isInteger(t)?BigInt(t):t}))}(e,r)}catch(r){const n=r;throw n.rawResponse=e||null,n.statusCode=t,n}}static serializeData(e,t){if(!e)return new Uint8Array(0);if("application/json"===t["content-type"])return new Uint8Array(o.lW.from(JSON.stringify(e)));if("string"==typeof e)return new Uint8Array(o.lW.from(e));if(e instanceof Uint8Array)return e;throw new Error("provided data is neither a string nor a Uint8Array and content-type is not application/json")}static prepareResponse(e,t,r,n={}){let s,{body:i}=e;return"application/msgpack"!==t&&(s=i&&o.lW.from(i).toString()||""),r&&"application/json"===t&&(i=be.parseJSON(s,e.status,n)),{...e,body:i,text:s,ok:2===Math.trunc(e.status/100)}}static prepareResponseError(e){return e.response&&(e.response=be.prepareResponse(e.response,"application/json",!0),e.status=e.response.status),e}async get(e,t,r={},n={},s=!0){const i=function(e){return void 0!==e&&Object.prototype.hasOwnProperty.call(e,"format")&&"msgpack"===e.format?"application/msgpack":"application/json"}(t),o={...r,accept:i};try{const r=await this.bc.get(e,function(e){for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(e[t]&&0!==e[t].length||delete e[t]);return e}(t),o);return be.prepareResponse(r,i,s,n)}catch(e){throw be.prepareResponseError(e)}}async post(e,t,r={},n,s=!0){const i={"content-type":"application/json",...we(r)};try{const r=await this.bc.post(e,be.serializeData(t,i),n,i);return be.prepareResponse(r,"application/json",s)}catch(e){throw be.prepareResponseError(e)}}async delete(e,t,r={},n=!0){const s={"content-type":"application/json",...we(r)},i=await this.bc.delete(e,be.serializeData(t,s),void 0,s);return be.prepareResponse(i,"application/json",n)}}class ve{constructor(e,t,r,n,s={}){if("function"==typeof t.get)this.c=new be(t);else{let i;i="string"==typeof t?function(e="",t){const r={};return r[t]=e,r}(t,e):t,this.c=new be(i,r,n,s)}this.intDecoding=k.DEFAULT}setIntEncoding(e){this.intDecoding=e}getIntEncoding(){return this.intDecoding}}class _e{constructor(e,t){this.c=e,this.query={},this.intDecoding=t||k.DEFAULT}prepare(e){return e}async do(e={}){const t={};"default"!==this.intDecoding&&(t.intDecoding=this.intDecoding);const r=await this.c.get(this.path(),this.query,e,t);return this.prepare(r.body)}async doRaw(e={}){return(await this.c.get(this.path(),this.query,e,{},!1)).body}setIntDecoding(e){if("default"!==e&&"safe"!==e&&"mixed"!==e&&"bigint"!==e)throw new Error(`Invalid method for int decoding: ${e}`);return this.intDecoding=e,this}}class Ae extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}`}exclude(e){return this.query.exclude=e,this}}class xe extends _e{constructor(e,t,r,n){super(e,t),this.account=r,this.assetID=n,this.account=r,this.assetID=n}path(){return`/v2/accounts/${this.account}/assets/${this.assetID}`}}class Ee extends _e{constructor(e,t,r,n){super(e,t),this.account=r,this.applicationID=n,this.account=r,this.applicationID=n}path(){return`/v2/accounts/${this.account}/applications/${this.applicationID}`}}class Te extends _e{constructor(e,t){if(super(e),!Number.isInteger(t))throw Error("roundNumber should be an integer");this.round=t,this.query={format:"msgpack"}}path(){return`/v2/blocks/${this.round}`}prepare(e){if(e&&e.byteLength>0)return Q(e)}}function ke(e={}){let t=e;return Object.keys(t).every((e=>"content-type"!==e.toLowerCase()))&&(t={...e},t["Content-Type"]="text/plain"),t}class Se extends _e{constructor(e,t){super(e),this.source=t,this.source=t}path(){return"/v2/teal/compile"}sourcemap(e=!0){return this.query.sourcemap=e,this}async do(e={}){const t=ke(e);return(await this.c.post(this.path(),o.lW.from(this.source),t,this.query)).body}}class Ie extends _e{constructor(e,t){super(e),this.blob=J(t.get_obj_for_encoding(!0))}path(){return"/v2/teal/dryrun"}async do(e={}){const t=ke(e);return(await this.c.post(this.path(),o.lW.from(this.blob),t)).body}}class Re extends _e{path(){return"/genesis"}}class Be extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/assets/${this.index}`}}class Pe extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/applications/${this.index}`}}class Ue extends _e{constructor(e,t,r){if(super(e,t),!Number.isInteger(r))throw Error("roundNumber should be an integer");this.round=r}path(){return`/v2/blocks/${this.round}/hash`}}function Ce(e,t){let r;if(e instanceof Uint8Array)r=t?e:o.lW.from(e).toString("base64");else if("function"==typeof e.get_obj_for_encoding)r=e.get_obj_for_encoding(t);else if(Array.isArray(e)){r=[];for(const n of e)r.push(Ce(n,t))}else if("object"==typeof e){const n={};for(const r of Object.keys(e))n[r]=Ce(e[r],t);r=n}else{if(!function(e){return void 0===e||null==e||"object"!=typeof e&&"function"!=typeof e}(e))throw new Error(`Unsupported value: ${String(e)}`);r=e}return r}class Oe{get_obj_for_encoding(e=!1){const t={};for(const r of Object.keys(this.attribute_map)){const n=this.attribute_map[r],s=this[r];void 0!==s&&(t[n]=null===s?null:Ce(s,e))}return t}}class $e extends Oe{constructor({address:e,amount:t,amountWithoutPendingRewards:r,minBalance:n,pendingRewards:s,rewards:i,round:o,status:a,totalAppsOptedIn:c,totalAssetsOptedIn:l,totalCreatedApps:u,totalCreatedAssets:h,appsLocalState:d,appsTotalExtraPages:p,appsTotalSchema:f,assets:g,authAddr:m,createdApps:y,createdAssets:w,participation:b,rewardBase:v,sigType:_,totalBoxBytes:A,totalBoxes:x}){super(),this.address=e,this.amount=t,this.amountWithoutPendingRewards=r,this.minBalance=n,this.pendingRewards=s,this.rewards=i,this.round=o,this.status=a,this.totalAppsOptedIn=c,this.totalAssetsOptedIn=l,this.totalCreatedApps=u,this.totalCreatedAssets=h,this.appsLocalState=d,this.appsTotalExtraPages=p,this.appsTotalSchema=f,this.assets=g,this.authAddr=m,this.createdApps=y,this.createdAssets=w,this.participation=b,this.rewardBase=v,this.sigType=_,this.totalBoxBytes=A,this.totalBoxes=x,this.attribute_map={address:"address",amount:"amount",amountWithoutPendingRewards:"amount-without-pending-rewards",minBalance:"min-balance",pendingRewards:"pending-rewards",rewards:"rewards",round:"round",status:"status",totalAppsOptedIn:"total-apps-opted-in",totalAssetsOptedIn:"total-assets-opted-in",totalCreatedApps:"total-created-apps",totalCreatedAssets:"total-created-assets",appsLocalState:"apps-local-state",appsTotalExtraPages:"apps-total-extra-pages",appsTotalSchema:"apps-total-schema",assets:"assets",authAddr:"auth-addr",createdApps:"created-apps",createdAssets:"created-assets",participation:"participation",rewardBase:"reward-base",sigType:"sig-type",totalBoxBytes:"total-box-bytes",totalBoxes:"total-boxes"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["amount-without-pending-rewards"])throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${e}`);if(void 0===e["min-balance"])throw new Error(`Response is missing required field 'min-balance': ${e}`);if(void 0===e["pending-rewards"])throw new Error(`Response is missing required field 'pending-rewards': ${e}`);if(void 0===e.rewards)throw new Error(`Response is missing required field 'rewards': ${e}`);if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);if(void 0===e.status)throw new Error(`Response is missing required field 'status': ${e}`);if(void 0===e["total-apps-opted-in"])throw new Error(`Response is missing required field 'total-apps-opted-in': ${e}`);if(void 0===e["total-assets-opted-in"])throw new Error(`Response is missing required field 'total-assets-opted-in': ${e}`);if(void 0===e["total-created-apps"])throw new Error(`Response is missing required field 'total-created-apps': ${e}`);if(void 0===e["total-created-assets"])throw new Error(`Response is missing required field 'total-created-assets': ${e}`);return new $e({address:e.address,amount:e.amount,amountWithoutPendingRewards:e["amount-without-pending-rewards"],minBalance:e["min-balance"],pendingRewards:e["pending-rewards"],rewards:e.rewards,round:e.round,status:e.status,totalAppsOptedIn:e["total-apps-opted-in"],totalAssetsOptedIn:e["total-assets-opted-in"],totalCreatedApps:e["total-created-apps"],totalCreatedAssets:e["total-created-assets"],appsLocalState:void 0!==e["apps-local-state"]?e["apps-local-state"].map(Ne.from_obj_for_encoding):void 0,appsTotalExtraPages:e["apps-total-extra-pages"],appsTotalSchema:void 0!==e["apps-total-schema"]?Fe.from_obj_for_encoding(e["apps-total-schema"]):void 0,assets:void 0!==e.assets?e.assets.map(ze.from_obj_for_encoding):void 0,authAddr:e["auth-addr"],createdApps:void 0!==e["created-apps"]?e["created-apps"].map(Me.from_obj_for_encoding):void 0,createdAssets:void 0!==e["created-assets"]?e["created-assets"].map(Ke.from_obj_for_encoding):void 0,participation:void 0!==e.participation?je.from_obj_for_encoding(e.participation):void 0,rewardBase:e["reward-base"],sigType:e["sig-type"],totalBoxBytes:e["total-box-bytes"],totalBoxes:e["total-boxes"]})}}class De extends Oe{constructor({round:e,appLocalState:t,createdApp:r}){super(),this.round=e,this.appLocalState=t,this.createdApp=r,this.attribute_map={round:"round",appLocalState:"app-local-state",createdApp:"created-app"}}static from_obj_for_encoding(e){if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);return new De({round:e.round,appLocalState:void 0!==e["app-local-state"]?Ne.from_obj_for_encoding(e["app-local-state"]):void 0,createdApp:void 0!==e["created-app"]?We.from_obj_for_encoding(e["created-app"]):void 0})}}class Le extends Oe{constructor({round:e,assetHolding:t,createdAsset:r}){super(),this.round=e,this.assetHolding=t,this.createdAsset=r,this.attribute_map={round:"round",assetHolding:"asset-holding",createdAsset:"created-asset"}}static from_obj_for_encoding(e){if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);return new Le({round:e.round,assetHolding:void 0!==e["asset-holding"]?ze.from_obj_for_encoding(e["asset-holding"]):void 0,createdAsset:void 0!==e["created-asset"]?He.from_obj_for_encoding(e["created-asset"]):void 0})}}class je extends Oe{constructor({selectionParticipationKey:e,voteFirstValid:t,voteKeyDilution:r,voteLastValid:n,voteParticipationKey:s,stateProofKey:i}){super(),this.selectionParticipationKey="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.voteFirstValid=t,this.voteKeyDilution=r,this.voteLastValid=n,this.voteParticipationKey="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.stateProofKey="string"==typeof i?new Uint8Array(o.lW.from(i,"base64")):i,this.attribute_map={selectionParticipationKey:"selection-participation-key",voteFirstValid:"vote-first-valid",voteKeyDilution:"vote-key-dilution",voteLastValid:"vote-last-valid",voteParticipationKey:"vote-participation-key",stateProofKey:"state-proof-key"}}static from_obj_for_encoding(e){if(void 0===e["selection-participation-key"])throw new Error(`Response is missing required field 'selection-participation-key': ${e}`);if(void 0===e["vote-first-valid"])throw new Error(`Response is missing required field 'vote-first-valid': ${e}`);if(void 0===e["vote-key-dilution"])throw new Error(`Response is missing required field 'vote-key-dilution': ${e}`);if(void 0===e["vote-last-valid"])throw new Error(`Response is missing required field 'vote-last-valid': ${e}`);if(void 0===e["vote-participation-key"])throw new Error(`Response is missing required field 'vote-participation-key': ${e}`);return new je({selectionParticipationKey:e["selection-participation-key"],voteFirstValid:e["vote-first-valid"],voteKeyDilution:e["vote-key-dilution"],voteLastValid:e["vote-last-valid"],voteParticipationKey:e["vote-participation-key"],stateProofKey:e["state-proof-key"]})}}class qe extends Oe{constructor({address:e,delta:t}){super(),this.address=e,this.delta=t,this.attribute_map={address:"address",delta:"delta"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(!Array.isArray(e.delta))throw new Error(`Response is missing required array field 'delta': ${e}`);return new qe({address:e.address,delta:e.delta.map(ct.from_obj_for_encoding)})}}class Me extends Oe{constructor({id:e,params:t}){super(),this.id=e,this.params=t,this.attribute_map={id:"id",params:"params"}}static from_obj_for_encoding(e){if(void 0===e.id)throw new Error(`Response is missing required field 'id': ${e}`);if(void 0===e.params)throw new Error(`Response is missing required field 'params': ${e}`);return new Me({id:e.id,params:We.from_obj_for_encoding(e.params)})}}class Ne extends Oe{constructor({id:e,schema:t,keyValue:r}){super(),this.id=e,this.schema=t,this.keyValue=r,this.attribute_map={id:"id",schema:"schema",keyValue:"key-value"}}static from_obj_for_encoding(e){if(void 0===e.id)throw new Error(`Response is missing required field 'id': ${e}`);if(void 0===e.schema)throw new Error(`Response is missing required field 'schema': ${e}`);return new Ne({id:e.id,schema:Fe.from_obj_for_encoding(e.schema),keyValue:void 0!==e["key-value"]?e["key-value"].map(vt.from_obj_for_encoding):void 0})}}class We extends Oe{constructor({approvalProgram:e,clearStateProgram:t,creator:r,extraProgramPages:n,globalState:s,globalStateSchema:i,localStateSchema:a}){super(),this.approvalProgram="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.clearStateProgram="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.creator=r,this.extraProgramPages=n,this.globalState=s,this.globalStateSchema=i,this.localStateSchema=a,this.attribute_map={approvalProgram:"approval-program",clearStateProgram:"clear-state-program",creator:"creator",extraProgramPages:"extra-program-pages",globalState:"global-state",globalStateSchema:"global-state-schema",localStateSchema:"local-state-schema"}}static from_obj_for_encoding(e){if(void 0===e["approval-program"])throw new Error(`Response is missing required field 'approval-program': ${e}`);if(void 0===e["clear-state-program"])throw new Error(`Response is missing required field 'clear-state-program': ${e}`);if(void 0===e.creator)throw new Error(`Response is missing required field 'creator': ${e}`);return new We({approvalProgram:e["approval-program"],clearStateProgram:e["clear-state-program"],creator:e.creator,extraProgramPages:e["extra-program-pages"],globalState:void 0!==e["global-state"]?e["global-state"].map(vt.from_obj_for_encoding):void 0,globalStateSchema:void 0!==e["global-state-schema"]?Fe.from_obj_for_encoding(e["global-state-schema"]):void 0,localStateSchema:void 0!==e["local-state-schema"]?Fe.from_obj_for_encoding(e["local-state-schema"]):void 0})}}class Fe extends Oe{constructor({numUint:e,numByteSlice:t}){super(),this.numUint=e,this.numByteSlice=t,this.attribute_map={numUint:"num-uint",numByteSlice:"num-byte-slice"}}static from_obj_for_encoding(e){if(void 0===e["num-uint"])throw new Error(`Response is missing required field 'num-uint': ${e}`);if(void 0===e["num-byte-slice"])throw new Error(`Response is missing required field 'num-byte-slice': ${e}`);return new Fe({numUint:e["num-uint"],numByteSlice:e["num-byte-slice"]})}}class Ke extends Oe{constructor({index:e,params:t}){super(),this.index=e,this.params=t,this.attribute_map={index:"index",params:"params"}}static from_obj_for_encoding(e){if(void 0===e.index)throw new Error(`Response is missing required field 'index': ${e}`);if(void 0===e.params)throw new Error(`Response is missing required field 'params': ${e}`);return new Ke({index:e.index,params:He.from_obj_for_encoding(e.params)})}}class ze extends Oe{constructor({amount:e,assetId:t,isFrozen:r}){super(),this.amount=e,this.assetId=t,this.isFrozen=r,this.attribute_map={amount:"amount",assetId:"asset-id",isFrozen:"is-frozen"}}static from_obj_for_encoding(e){if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["asset-id"])throw new Error(`Response is missing required field 'asset-id': ${e}`);if(void 0===e["is-frozen"])throw new Error(`Response is missing required field 'is-frozen': ${e}`);return new ze({amount:e.amount,assetId:e["asset-id"],isFrozen:e["is-frozen"]})}}class He extends Oe{constructor({creator:e,decimals:t,total:r,clawback:n,defaultFrozen:s,freeze:i,manager:a,metadataHash:c,name:l,nameB64:u,reserve:h,unitName:d,unitNameB64:p,url:f,urlB64:g}){super(),this.creator=e,this.decimals=t,this.total=r,this.clawback=n,this.defaultFrozen=s,this.freeze=i,this.manager=a,this.metadataHash="string"==typeof c?new Uint8Array(o.lW.from(c,"base64")):c,this.name=l,this.nameB64="string"==typeof u?new Uint8Array(o.lW.from(u,"base64")):u,this.reserve=h,this.unitName=d,this.unitNameB64="string"==typeof p?new Uint8Array(o.lW.from(p,"base64")):p,this.url=f,this.urlB64="string"==typeof g?new Uint8Array(o.lW.from(g,"base64")):g,this.attribute_map={creator:"creator",decimals:"decimals",total:"total",clawback:"clawback",defaultFrozen:"default-frozen",freeze:"freeze",manager:"manager",metadataHash:"metadata-hash",name:"name",nameB64:"name-b64",reserve:"reserve",unitName:"unit-name",unitNameB64:"unit-name-b64",url:"url",urlB64:"url-b64"}}static from_obj_for_encoding(e){if(void 0===e.creator)throw new Error(`Response is missing required field 'creator': ${e}`);if(void 0===e.decimals)throw new Error(`Response is missing required field 'decimals': ${e}`);if(void 0===e.total)throw new Error(`Response is missing required field 'total': ${e}`);return new He({creator:e.creator,decimals:e.decimals,total:e.total,clawback:e.clawback,defaultFrozen:e["default-frozen"],freeze:e.freeze,manager:e.manager,metadataHash:e["metadata-hash"],name:e.name,nameB64:e["name-b64"],reserve:e.reserve,unitName:e["unit-name"],unitNameB64:e["unit-name-b64"],url:e.url,urlB64:e["url-b64"]})}}class Ve extends Oe{constructor({blockhash:e}){super(),this.blockhash=e,this.attribute_map={blockhash:"blockHash"}}static from_obj_for_encoding(e){if(void 0===e.blockHash)throw new Error(`Response is missing required field 'blockHash': ${e}`);return new Ve({blockhash:e.blockHash})}}class Ge extends Oe{constructor({block:e,cert:t}){super(),this.block=e,this.cert=t,this.attribute_map={block:"block",cert:"cert"}}static from_obj_for_encoding(e){if(void 0===e.block)throw new Error(`Response is missing required field 'block': ${e}`);return new Ge({block:e.block,cert:e.cert})}}class Ye extends Oe{constructor({name:e,value:t}){super(),this.name="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.value="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.attribute_map={name:"name",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.name)throw new Error(`Response is missing required field 'name': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new Ye({name:e.name,value:e.value})}}class Xe extends Oe{constructor({name:e}){super(),this.name="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.attribute_map={name:"name"}}static from_obj_for_encoding(e){if(void 0===e.name)throw new Error(`Response is missing required field 'name': ${e}`);return new Xe({name:e.name})}}class Ze extends Oe{constructor({boxes:e}){super(),this.boxes=e,this.attribute_map={boxes:"boxes"}}static from_obj_for_encoding(e){if(!Array.isArray(e.boxes))throw new Error(`Response is missing required array field 'boxes': ${e}`);return new Ze({boxes:e.boxes.map(Xe.from_obj_for_encoding)})}}class Je extends Oe{constructor({branch:e,buildNumber:t,channel:r,commitHash:n,major:s,minor:i}){super(),this.branch=e,this.buildNumber=t,this.channel=r,this.commitHash=n,this.major=s,this.minor=i,this.attribute_map={branch:"branch",buildNumber:"build_number",channel:"channel",commitHash:"commit_hash",major:"major",minor:"minor"}}static from_obj_for_encoding(e){if(void 0===e.branch)throw new Error(`Response is missing required field 'branch': ${e}`);if(void 0===e.build_number)throw new Error(`Response is missing required field 'build_number': ${e}`);if(void 0===e.channel)throw new Error(`Response is missing required field 'channel': ${e}`);if(void 0===e.commit_hash)throw new Error(`Response is missing required field 'commit_hash': ${e}`);if(void 0===e.major)throw new Error(`Response is missing required field 'major': ${e}`);if(void 0===e.minor)throw new Error(`Response is missing required field 'minor': ${e}`);return new Je({branch:e.branch,buildNumber:e.build_number,channel:e.channel,commitHash:e.commit_hash,major:e.major,minor:e.minor})}}class Qe extends Oe{constructor({hash:e,result:t,sourcemap:r}){super(),this.hash=e,this.result=t,this.sourcemap=r,this.attribute_map={hash:"hash",result:"result",sourcemap:"sourcemap"}}static from_obj_for_encoding(e){if(void 0===e.hash)throw new Error(`Response is missing required field 'hash': ${e}`);if(void 0===e.result)throw new Error(`Response is missing required field 'result': ${e}`);return new Qe({hash:e.hash,result:e.result,sourcemap:e.sourcemap})}}class et extends Oe{constructor({result:e}){super(),this.result=e,this.attribute_map={result:"result"}}static from_obj_for_encoding(e){if(void 0===e.result)throw new Error(`Response is missing required field 'result': ${e}`);return new et({result:e.result})}}class tt extends Oe{constructor({accounts:e,apps:t,latestTimestamp:r,protocolVersion:n,round:s,sources:i,txns:o}){super(),this.accounts=e,this.apps=t,this.latestTimestamp=r,this.protocolVersion=n,this.round=s,this.sources=i,this.txns=o,this.attribute_map={accounts:"accounts",apps:"apps",latestTimestamp:"latest-timestamp",protocolVersion:"protocol-version",round:"round",sources:"sources",txns:"txns"}}static from_obj_for_encoding(e){if(!Array.isArray(e.accounts))throw new Error(`Response is missing required array field 'accounts': ${e}`);if(!Array.isArray(e.apps))throw new Error(`Response is missing required array field 'apps': ${e}`);if(void 0===e["latest-timestamp"])throw new Error(`Response is missing required field 'latest-timestamp': ${e}`);if(void 0===e["protocol-version"])throw new Error(`Response is missing required field 'protocol-version': ${e}`);if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);if(!Array.isArray(e.sources))throw new Error(`Response is missing required array field 'sources': ${e}`);if(!Array.isArray(e.txns))throw new Error(`Response is missing required array field 'txns': ${e}`);return new tt({accounts:e.accounts.map($e.from_obj_for_encoding),apps:e.apps.map(Me.from_obj_for_encoding),latestTimestamp:e["latest-timestamp"],protocolVersion:e["protocol-version"],round:e.round,sources:e.sources.map(nt.from_obj_for_encoding),txns:e.txns})}}class rt extends Oe{constructor({error:e,protocolVersion:t,txns:r}){super(),this.error=e,this.protocolVersion=t,this.txns=r,this.attribute_map={error:"error",protocolVersion:"protocol-version",txns:"txns"}}static from_obj_for_encoding(e){if(void 0===e.error)throw new Error(`Response is missing required field 'error': ${e}`);if(void 0===e["protocol-version"])throw new Error(`Response is missing required field 'protocol-version': ${e}`);if(!Array.isArray(e.txns))throw new Error(`Response is missing required array field 'txns': ${e}`);return new rt({error:e.error,protocolVersion:e["protocol-version"],txns:e.txns.map(it.from_obj_for_encoding)})}}class nt extends Oe{constructor({fieldName:e,source:t,txnIndex:r,appIndex:n}){super(),this.fieldName=e,this.source=t,this.txnIndex=r,this.appIndex=n,this.attribute_map={fieldName:"field-name",source:"source",txnIndex:"txn-index",appIndex:"app-index"}}static from_obj_for_encoding(e){if(void 0===e["field-name"])throw new Error(`Response is missing required field 'field-name': ${e}`);if(void 0===e.source)throw new Error(`Response is missing required field 'source': ${e}`);if(void 0===e["txn-index"])throw new Error(`Response is missing required field 'txn-index': ${e}`);if(void 0===e["app-index"])throw new Error(`Response is missing required field 'app-index': ${e}`);return new nt({fieldName:e["field-name"],source:e.source,txnIndex:e["txn-index"],appIndex:e["app-index"]})}}class st extends Oe{constructor({line:e,pc:t,stack:r,error:n,scratch:s}){super(),this.line=e,this.pc=t,this.stack=r,this.error=n,this.scratch=s,this.attribute_map={line:"line",pc:"pc",stack:"stack",error:"error",scratch:"scratch"}}static from_obj_for_encoding(e){if(void 0===e.line)throw new Error(`Response is missing required field 'line': ${e}`);if(void 0===e.pc)throw new Error(`Response is missing required field 'pc': ${e}`);if(!Array.isArray(e.stack))throw new Error(`Response is missing required array field 'stack': ${e}`);return new st({line:e.line,pc:e.pc,stack:e.stack.map(_t.from_obj_for_encoding),error:e.error,scratch:void 0!==e.scratch?e.scratch.map(_t.from_obj_for_encoding):void 0})}}class it extends Oe{constructor({disassembly:e,appCallMessages:t,appCallTrace:r,budgetAdded:n,budgetConsumed:s,globalDelta:i,localDeltas:o,logicSigDisassembly:a,logicSigMessages:c,logicSigTrace:l,logs:u}){super(),this.disassembly=e,this.appCallMessages=t,this.appCallTrace=r,this.budgetAdded=n,this.budgetConsumed=s,this.globalDelta=i,this.localDeltas=o,this.logicSigDisassembly=a,this.logicSigMessages=c,this.logicSigTrace=l,this.logs=u,this.attribute_map={disassembly:"disassembly",appCallMessages:"app-call-messages",appCallTrace:"app-call-trace",budgetAdded:"budget-added",budgetConsumed:"budget-consumed",globalDelta:"global-delta",localDeltas:"local-deltas",logicSigDisassembly:"logic-sig-disassembly",logicSigMessages:"logic-sig-messages",logicSigTrace:"logic-sig-trace",logs:"logs"}}static from_obj_for_encoding(e){if(!Array.isArray(e.disassembly))throw new Error(`Response is missing required array field 'disassembly': ${e}`);return new it({disassembly:e.disassembly,appCallMessages:e["app-call-messages"],appCallTrace:void 0!==e["app-call-trace"]?e["app-call-trace"].map(st.from_obj_for_encoding):void 0,budgetAdded:e["budget-added"],budgetConsumed:e["budget-consumed"],globalDelta:void 0!==e["global-delta"]?e["global-delta"].map(ct.from_obj_for_encoding):void 0,localDeltas:void 0!==e["local-deltas"]?e["local-deltas"].map(qe.from_obj_for_encoding):void 0,logicSigDisassembly:e["logic-sig-disassembly"],logicSigMessages:e["logic-sig-messages"],logicSigTrace:void 0!==e["logic-sig-trace"]?e["logic-sig-trace"].map(st.from_obj_for_encoding):void 0,logs:e.logs})}}class ot extends Oe{constructor({message:e,data:t}){super(),this.message=e,this.data=t,this.attribute_map={message:"message",data:"data"}}static from_obj_for_encoding(e){if(void 0===e.message)throw new Error(`Response is missing required field 'message': ${e}`);return new ot({message:e.message,data:e.data})}}class at extends Oe{constructor({action:e,bytes:t,uint:r}){super(),this.action=e,this.bytes=t,this.uint=r,this.attribute_map={action:"action",bytes:"bytes",uint:"uint"}}static from_obj_for_encoding(e){if(void 0===e.action)throw new Error(`Response is missing required field 'action': ${e}`);return new at({action:e.action,bytes:e.bytes,uint:e.uint})}}class ct extends Oe{constructor({key:e,value:t}){super(),this.key=e,this.value=t,this.attribute_map={key:"key",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.key)throw new Error(`Response is missing required field 'key': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new ct({key:e.key,value:at.from_obj_for_encoding(e.value)})}}class lt extends Oe{constructor({index:e,proof:t,treedepth:r}){super(),this.index=e,this.proof="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.treedepth=r,this.attribute_map={index:"index",proof:"proof",treedepth:"treedepth"}}static from_obj_for_encoding(e){if(void 0===e.index)throw new Error(`Response is missing required field 'index': ${e}`);if(void 0===e.proof)throw new Error(`Response is missing required field 'proof': ${e}`);if(void 0===e.treedepth)throw new Error(`Response is missing required field 'treedepth': ${e}`);return new lt({index:e.index,proof:e.proof,treedepth:e.treedepth})}}class ut extends Oe{constructor({catchupTime:e,lastRound:t,lastVersion:r,nextVersion:n,nextVersionRound:s,nextVersionSupported:i,stoppedAtUnsupportedRound:o,timeSinceLastRound:a,catchpoint:c,catchpointAcquiredBlocks:l,catchpointProcessedAccounts:u,catchpointProcessedKvs:h,catchpointTotalAccounts:d,catchpointTotalBlocks:p,catchpointTotalKvs:f,catchpointVerifiedAccounts:g,catchpointVerifiedKvs:m,lastCatchpoint:y}){super(),this.catchupTime=e,this.lastRound=t,this.lastVersion=r,this.nextVersion=n,this.nextVersionRound=s,this.nextVersionSupported=i,this.stoppedAtUnsupportedRound=o,this.timeSinceLastRound=a,this.catchpoint=c,this.catchpointAcquiredBlocks=l,this.catchpointProcessedAccounts=u,this.catchpointProcessedKvs=h,this.catchpointTotalAccounts=d,this.catchpointTotalBlocks=p,this.catchpointTotalKvs=f,this.catchpointVerifiedAccounts=g,this.catchpointVerifiedKvs=m,this.lastCatchpoint=y,this.attribute_map={catchupTime:"catchup-time",lastRound:"last-round",lastVersion:"last-version",nextVersion:"next-version",nextVersionRound:"next-version-round",nextVersionSupported:"next-version-supported",stoppedAtUnsupportedRound:"stopped-at-unsupported-round",timeSinceLastRound:"time-since-last-round",catchpoint:"catchpoint",catchpointAcquiredBlocks:"catchpoint-acquired-blocks",catchpointProcessedAccounts:"catchpoint-processed-accounts",catchpointProcessedKvs:"catchpoint-processed-kvs",catchpointTotalAccounts:"catchpoint-total-accounts",catchpointTotalBlocks:"catchpoint-total-blocks",catchpointTotalKvs:"catchpoint-total-kvs",catchpointVerifiedAccounts:"catchpoint-verified-accounts",catchpointVerifiedKvs:"catchpoint-verified-kvs",lastCatchpoint:"last-catchpoint"}}static from_obj_for_encoding(e){if(void 0===e["catchup-time"])throw new Error(`Response is missing required field 'catchup-time': ${e}`);if(void 0===e["last-round"])throw new Error(`Response is missing required field 'last-round': ${e}`);if(void 0===e["last-version"])throw new Error(`Response is missing required field 'last-version': ${e}`);if(void 0===e["next-version"])throw new Error(`Response is missing required field 'next-version': ${e}`);if(void 0===e["next-version-round"])throw new Error(`Response is missing required field 'next-version-round': ${e}`);if(void 0===e["next-version-supported"])throw new Error(`Response is missing required field 'next-version-supported': ${e}`);if(void 0===e["stopped-at-unsupported-round"])throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${e}`);if(void 0===e["time-since-last-round"])throw new Error(`Response is missing required field 'time-since-last-round': ${e}`);return new ut({catchupTime:e["catchup-time"],lastRound:e["last-round"],lastVersion:e["last-version"],nextVersion:e["next-version"],nextVersionRound:e["next-version-round"],nextVersionSupported:e["next-version-supported"],stoppedAtUnsupportedRound:e["stopped-at-unsupported-round"],timeSinceLastRound:e["time-since-last-round"],catchpoint:e.catchpoint,catchpointAcquiredBlocks:e["catchpoint-acquired-blocks"],catchpointProcessedAccounts:e["catchpoint-processed-accounts"],catchpointProcessedKvs:e["catchpoint-processed-kvs"],catchpointTotalAccounts:e["catchpoint-total-accounts"],catchpointTotalBlocks:e["catchpoint-total-blocks"],catchpointTotalKvs:e["catchpoint-total-kvs"],catchpointVerifiedAccounts:e["catchpoint-verified-accounts"],catchpointVerifiedKvs:e["catchpoint-verified-kvs"],lastCatchpoint:e["last-catchpoint"]})}}class ht extends Oe{constructor({poolError:e,txn:t,applicationIndex:r,assetClosingAmount:n,assetIndex:s,closeRewards:i,closingAmount:o,confirmedRound:a,globalStateDelta:c,innerTxns:l,localStateDelta:u,logs:h,receiverRewards:d,senderRewards:p}){super(),this.poolError=e,this.txn=t,this.applicationIndex=r,this.assetClosingAmount=n,this.assetIndex=s,this.closeRewards=i,this.closingAmount=o,this.confirmedRound=a,this.globalStateDelta=c,this.innerTxns=l,this.localStateDelta=u,this.logs=h,this.receiverRewards=d,this.senderRewards=p,this.attribute_map={poolError:"pool-error",txn:"txn",applicationIndex:"application-index",assetClosingAmount:"asset-closing-amount",assetIndex:"asset-index",closeRewards:"close-rewards",closingAmount:"closing-amount",confirmedRound:"confirmed-round",globalStateDelta:"global-state-delta",innerTxns:"inner-txns",localStateDelta:"local-state-delta",logs:"logs",receiverRewards:"receiver-rewards",senderRewards:"sender-rewards"}}static from_obj_for_encoding(e){if(void 0===e["pool-error"])throw new Error(`Response is missing required field 'pool-error': ${e}`);if(void 0===e.txn)throw new Error(`Response is missing required field 'txn': ${e}`);return new ht({poolError:e["pool-error"],txn:e.txn,applicationIndex:e["application-index"],assetClosingAmount:e["asset-closing-amount"],assetIndex:e["asset-index"],closeRewards:e["close-rewards"],closingAmount:e["closing-amount"],confirmedRound:e["confirmed-round"],globalStateDelta:void 0!==e["global-state-delta"]?e["global-state-delta"].map(ct.from_obj_for_encoding):void 0,innerTxns:void 0!==e["inner-txns"]?e["inner-txns"].map(ht.from_obj_for_encoding):void 0,localStateDelta:void 0!==e["local-state-delta"]?e["local-state-delta"].map(qe.from_obj_for_encoding):void 0,logs:e.logs,receiverRewards:e["receiver-rewards"],senderRewards:e["sender-rewards"]})}}class dt extends Oe{constructor({topTransactions:e,totalTransactions:t}){super(),this.topTransactions=e,this.totalTransactions=t,this.attribute_map={topTransactions:"top-transactions",totalTransactions:"total-transactions"}}static from_obj_for_encoding(e){if(!Array.isArray(e["top-transactions"]))throw new Error(`Response is missing required array field 'top-transactions': ${e}`);if(void 0===e["total-transactions"])throw new Error(`Response is missing required field 'total-transactions': ${e}`);return new dt({topTransactions:e["top-transactions"],totalTransactions:e["total-transactions"]})}}class pt extends Oe{constructor({txid:e}){super(),this.txid=e,this.attribute_map={txid:"txId"}}static from_obj_for_encoding(e){if(void 0===e.txId)throw new Error(`Response is missing required field 'txId': ${e}`);return new pt({txid:e.txId})}}class ft extends Oe{constructor({lastRound:e,txnGroups:t,version:r,wouldSucceed:n}){super(),this.lastRound=e,this.txnGroups=t,this.version=r,this.wouldSucceed=n,this.attribute_map={lastRound:"last-round",txnGroups:"txn-groups",version:"version",wouldSucceed:"would-succeed"}}static from_obj_for_encoding(e){if(void 0===e["last-round"])throw new Error(`Response is missing required field 'last-round': ${e}`);if(!Array.isArray(e["txn-groups"]))throw new Error(`Response is missing required array field 'txn-groups': ${e}`);if(void 0===e.version)throw new Error(`Response is missing required field 'version': ${e}`);if(void 0===e["would-succeed"])throw new Error(`Response is missing required field 'would-succeed': ${e}`);return new ft({lastRound:e["last-round"],txnGroups:e["txn-groups"].map(gt.from_obj_for_encoding),version:e.version,wouldSucceed:e["would-succeed"]})}}class gt extends Oe{constructor({txnResults:e,failedAt:t,failureMessage:r}){super(),this.txnResults=e,this.failedAt=t,this.failureMessage=r,this.attribute_map={txnResults:"txn-results",failedAt:"failed-at",failureMessage:"failure-message"}}static from_obj_for_encoding(e){if(!Array.isArray(e["txn-results"]))throw new Error(`Response is missing required array field 'txn-results': ${e}`);return new gt({txnResults:e["txn-results"].map(mt.from_obj_for_encoding),failedAt:e["failed-at"],failureMessage:e["failure-message"]})}}class mt extends Oe{constructor({txnResult:e,missingSignature:t}){super(),this.txnResult=e,this.missingSignature=t,this.attribute_map={txnResult:"txn-result",missingSignature:"missing-signature"}}static from_obj_for_encoding(e){if(void 0===e["txn-result"])throw new Error(`Response is missing required field 'txn-result': ${e}`);return new mt({txnResult:ht.from_obj_for_encoding(e["txn-result"]),missingSignature:e["missing-signature"]})}}class yt extends Oe{constructor({message:e,stateproof:t}){super(),this.message=e,this.stateproof="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.attribute_map={message:"Message",stateproof:"StateProof"}}static from_obj_for_encoding(e){if(void 0===e.Message)throw new Error(`Response is missing required field 'Message': ${e}`);if(void 0===e.StateProof)throw new Error(`Response is missing required field 'StateProof': ${e}`);return new yt({message:wt.from_obj_for_encoding(e.Message),stateproof:e.StateProof})}}class wt extends Oe{constructor({blockheaderscommitment:e,firstattestedround:t,lastattestedround:r,lnprovenweight:n,voterscommitment:s}){super(),this.blockheaderscommitment="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.firstattestedround=t,this.lastattestedround=r,this.lnprovenweight=n,this.voterscommitment="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.attribute_map={blockheaderscommitment:"BlockHeadersCommitment",firstattestedround:"FirstAttestedRound",lastattestedround:"LastAttestedRound",lnprovenweight:"LnProvenWeight",voterscommitment:"VotersCommitment"}}static from_obj_for_encoding(e){if(void 0===e.BlockHeadersCommitment)throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${e}`);if(void 0===e.FirstAttestedRound)throw new Error(`Response is missing required field 'FirstAttestedRound': ${e}`);if(void 0===e.LastAttestedRound)throw new Error(`Response is missing required field 'LastAttestedRound': ${e}`);if(void 0===e.LnProvenWeight)throw new Error(`Response is missing required field 'LnProvenWeight': ${e}`);if(void 0===e.VotersCommitment)throw new Error(`Response is missing required field 'VotersCommitment': ${e}`);return new wt({blockheaderscommitment:e.BlockHeadersCommitment,firstattestedround:e.FirstAttestedRound,lastattestedround:e.LastAttestedRound,lnprovenweight:e.LnProvenWeight,voterscommitment:e.VotersCommitment})}}class bt extends Oe{constructor({currentRound:e,onlineMoney:t,totalMoney:r}){super(),this.currentRound=e,this.onlineMoney=t,this.totalMoney=r,this.attribute_map={currentRound:"current_round",onlineMoney:"online-money",totalMoney:"total-money"}}static from_obj_for_encoding(e){if(void 0===e.current_round)throw new Error(`Response is missing required field 'current_round': ${e}`);if(void 0===e["online-money"])throw new Error(`Response is missing required field 'online-money': ${e}`);if(void 0===e["total-money"])throw new Error(`Response is missing required field 'total-money': ${e}`);return new bt({currentRound:e.current_round,onlineMoney:e["online-money"],totalMoney:e["total-money"]})}}class vt extends Oe{constructor({key:e,value:t}){super(),this.key=e,this.value=t,this.attribute_map={key:"key",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.key)throw new Error(`Response is missing required field 'key': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new vt({key:e.key,value:_t.from_obj_for_encoding(e.value)})}}class _t extends Oe{constructor({type:e,bytes:t,uint:r}){super(),this.type=e,this.bytes=t,this.uint=r,this.attribute_map={type:"type",bytes:"bytes",uint:"uint"}}static from_obj_for_encoding(e){if(void 0===e.type)throw new Error(`Response is missing required field 'type': ${e}`);if(void 0===e.bytes)throw new Error(`Response is missing required field 'bytes': ${e}`);if(void 0===e.uint)throw new Error(`Response is missing required field 'uint': ${e}`);return new _t({type:e.type,bytes:e.bytes,uint:e.uint})}}class At extends Oe{constructor({consensusVersion:e,fee:t,genesisHash:r,genesisId:n,lastRound:s,minFee:i}){super(),this.consensusVersion=e,this.fee=t,this.genesisHash="string"==typeof r?new Uint8Array(o.lW.from(r,"base64")):r,this.genesisId=n,this.lastRound=s,this.minFee=i,this.attribute_map={consensusVersion:"consensus-version",fee:"fee",genesisHash:"genesis-hash",genesisId:"genesis-id",lastRound:"last-round",minFee:"min-fee"}}static from_obj_for_encoding(e){if(void 0===e["consensus-version"])throw new Error(`Response is missing required field 'consensus-version': ${e}`);if(void 0===e.fee)throw new Error(`Response is missing required field 'fee': ${e}`);if(void 0===e["genesis-hash"])throw new Error(`Response is missing required field 'genesis-hash': ${e}`);if(void 0===e["genesis-id"])throw new Error(`Response is missing required field 'genesis-id': ${e}`);if(void 0===e["last-round"])throw new Error(`Response is missing required field 'last-round': ${e}`);if(void 0===e["min-fee"])throw new Error(`Response is missing required field 'min-fee': ${e}`);return new At({consensusVersion:e["consensus-version"],fee:e.fee,genesisHash:e["genesis-hash"],genesisId:e["genesis-id"],lastRound:e["last-round"],minFee:e["min-fee"]})}}class xt extends Oe{constructor({idx:e,proof:t,stibhash:r,treedepth:n,hashtype:s}){super(),this.idx=e,this.proof="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.stibhash="string"==typeof r?new Uint8Array(o.lW.from(r,"base64")):r,this.treedepth=n,this.hashtype=s,this.attribute_map={idx:"idx",proof:"proof",stibhash:"stibhash",treedepth:"treedepth",hashtype:"hashtype"}}static from_obj_for_encoding(e){if(void 0===e.idx)throw new Error(`Response is missing required field 'idx': ${e}`);if(void 0===e.proof)throw new Error(`Response is missing required field 'proof': ${e}`);if(void 0===e.stibhash)throw new Error(`Response is missing required field 'stibhash': ${e}`);if(void 0===e.treedepth)throw new Error(`Response is missing required field 'treedepth': ${e}`);return new xt({idx:e.idx,proof:e.proof,stibhash:e.stibhash,treedepth:e.treedepth,hashtype:e.hashtype})}}class Et extends Oe{constructor({build:e,genesisHashB64:t,genesisId:r,versions:n}){super(),this.build=e,this.genesisHashB64="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.genesisId=r,this.versions=n,this.attribute_map={build:"build",genesisHashB64:"genesis_hash_b64",genesisId:"genesis_id",versions:"versions"}}static from_obj_for_encoding(e){if(void 0===e.build)throw new Error(`Response is missing required field 'build': ${e}`);if(void 0===e.genesis_hash_b64)throw new Error(`Response is missing required field 'genesis_hash_b64': ${e}`);if(void 0===e.genesis_id)throw new Error(`Response is missing required field 'genesis_id': ${e}`);if(!Array.isArray(e.versions))throw new Error(`Response is missing required array field 'versions': ${e}`);return new Et({build:Je.from_obj_for_encoding(e.build),genesisHashB64:e.genesis_hash_b64,genesisId:e.genesis_id,versions:e.versions})}}class Tt extends _e{constructor(e,t,r,n){super(e,t),this.index=r,this.index=r;const s=o.lW.from(n).toString("base64");this.query.name=encodeURI(`b64:${s}`)}path(){return`/v2/applications/${this.index}/box`}prepare(e){return Ye.from_obj_for_encoding(e)}}class kt extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r,this.query.max=0}path(){return`/v2/applications/${this.index}/boxes`}max(e){return this.query.max=e,this}prepare(e){return Ze.from_obj_for_encoding(e)}}class St extends _e{path(){return"/health"}async do(e={}){const t=await this.c.get(this.path(),{},e);if(!t.ok)throw new Error(`Health response: ${t.status}`);return{}}}class It extends _e{constructor(e,t){super(e),this.txid=t,this.txid=t,this.query.format="msgpack"}prepare(e){if(e&&e.byteLength>0)return Q(e)}path(){return`/v2/transactions/pending/${this.txid}`}max(e){return this.query.max=e,this}}class Rt extends _e{constructor(e){super(e),this.query.format="msgpack"}path(){return"/v2/transactions/pending"}prepare(e){if(e&&e.byteLength>0)return Q(e)}max(e){return this.query.max=e,this}}class Bt extends _e{constructor(e,t){super(e),this.address=t,this.address=t,this.query.format="msgpack"}prepare(e){if(e&&e.byteLength>0)return Q(e)}path(){return`/v2/accounts/${this.address}/transactions/pending`}max(e){return this.query.max=e,this}}class Pt extends _e{constructor(e,t,r,n){super(e,t),this.round=r,this.txID=n,this.round=r,this.txID=n}path(){return`/v2/blocks/${this.round}/transactions/${this.txID}/proof`}hashType(e){return this.query.hashtype=e,this}}function Ut(e){return e&&void 0!==e.byteLength}class Ct extends _e{constructor(e,t){super(e);let r=t;if(Array.isArray(t)){if(!t.every(Ut))throw new TypeError("Array elements must be byte arrays");r=R(...t)}else if(!Ut(r))throw new TypeError("Argument must be byte array");this.txnBytesToPost=r}path(){return"/v2/transactions"}async do(e={}){const t=function(e={}){let t=e;return Object.keys(t).every((e=>"content-type"!==e.toLowerCase()))&&(t={...e},t["Content-Type"]="application/x-binary"),t}(e);return(await this.c.post(this.path(),o.lW.from(this.txnBytesToPost),t)).body}}class Ot extends _e{path(){return"/v2/status"}}class $t extends _e{constructor(e,t,r){if(super(e,t),this.round=r,!Number.isInteger(r))throw Error("round should be an integer");this.round=r}path(){return`/v2/status/wait-for-block-after/${this.round}`}}class Dt extends _e{path(){return"/v2/transactions/params"}prepare(e){return{flatFee:!1,fee:e.fee,firstRound:e["last-round"],lastRound:e["last-round"]+1e3,genesisID:e["genesis-id"],genesisHash:e["genesis-hash"]}}}class Lt extends _e{path(){return"/v2/ledger/supply"}}class jt extends _e{path(){return"/versions"}}class qt extends _e{constructor(e,t,r){super(e,t),this.round=r,this.round=r}path(){return`/v2/blocks/${this.round}/lightheader/proof`}}class Mt extends _e{constructor(e,t,r){super(e,t),this.round=r,this.round=r}path(){return`/v2/stateproofs/${this.round}`}}class Nt extends _e{constructor(e,t){super(e),this.source=t,this.source=t}path(){return"/v2/teal/disassemble"}async do(e={}){const t=function(e={}){let t=e;return Object.keys(t).every((e=>"content-type"!==e.toLowerCase()))&&(t={...e},t["Content-Type"]="text/plain"),t}(e);return(await this.c.post(this.path(),o.lW.from(this.source),t,this.query)).body}}function Wt(e){return e&&void 0!==e.byteLength}class Ft extends _e{constructor(e,t){super(e),this.query.format="msgpack";let r=t;if(Array.isArray(t)){if(!t.every(Wt))throw new TypeError("Array elements must be byte arrays");r=R(...t)}else if(!Wt(r))throw new TypeError("Argument must be byte array");this.txnBytesToPost=r}path(){return"/v2/transactions/simulate"}async do(e={}){const t=function(e={}){let t=e;return Object.keys(t).every((e=>"content-type"!==e.toLowerCase()))&&(t={...e},t["Content-Type"]="application/x-binary"),t}(e),r=await this.c.post(this.path(),o.lW.from(this.txnBytesToPost),t,this.query,!1);return this.prepare(r.body)}prepare(e){const t=Q(e);return ft.from_obj_for_encoding(t)}}class Kt extends ve{constructor(e,t,r,n={}){super("X-Algo-API-Token",e,t,r,n)}healthCheck(){return new St(this.c)}versionsCheck(){return new jt(this.c)}sendRawTransaction(e){return new Ct(this.c,e)}accountInformation(e){return new Ae(this.c,this.intDecoding,e)}accountAssetInformation(e,t){return new xe(this.c,this.intDecoding,e,t)}accountApplicationInformation(e,t){return new Ee(this.c,this.intDecoding,e,t)}block(e){return new Te(this.c,e)}getBlockHash(e){return new Ue(this.c,this.intDecoding,e)}pendingTransactionInformation(e){return new It(this.c,e)}pendingTransactionsInformation(){return new Rt(this.c)}pendingTransactionByAddress(e){return new Bt(this.c,e)}status(){return new Ot(this.c,this.intDecoding)}statusAfterBlock(e){return new $t(this.c,this.intDecoding,e)}getTransactionParams(){return new Dt(this.c)}supply(){return new Lt(this.c,this.intDecoding)}compile(e){return new Se(this.c,e)}disassemble(e){return new Nt(this.c,e)}dryrun(e){return new Ie(this.c,e)}getAssetByID(e){return new Be(this.c,this.intDecoding,e)}getApplicationByID(e){return new Pe(this.c,this.intDecoding,e)}getApplicationBoxByName(e,t){return new Tt(this.c,this.intDecoding,e,t)}getApplicationBoxes(e){return new kt(this.c,this.intDecoding,e)}genesis(){return new Re(this.c,this.intDecoding)}getTransactionProof(e,t){return new Pt(this.c,this.intDecoding,e,t)}getLightBlockHeaderProof(e){return new qt(this.c,this.intDecoding,e)}getStateProof(e){return new Mt(this.c,this.intDecoding,e)}simulateRawTransactions(e){return new Ft(this.c,e)}}class zt extends ve{constructor(e,t="http://127.0.0.1",r=7833,n={}){super("X-KMD-API-Token",e,t,r,n)}async versions(){return(await this.c.get("/versions")).body}async listWallets(){return(await this.c.get("/v1/wallets")).body}async createWallet(e,t,r=new Uint8Array,n="sqlite"){const s={wallet_name:e,wallet_driver_name:n,wallet_password:t,master_derivation_key:o.lW.from(r).toString("base64")};return(await this.c.post("/v1/wallet",s)).body}async initWalletHandle(e,t){const r={wallet_id:e,wallet_password:t};return(await this.c.post("/v1/wallet/init",r)).body}async releaseWalletHandle(e){const t={wallet_handle_token:e};return(await this.c.post("/v1/wallet/release",t)).body}async renewWalletHandle(e){const t={wallet_handle_token:e};return(await this.c.post("/v1/wallet/renew",t)).body}async renameWallet(e,t,r){const n={wallet_id:e,wallet_password:t,wallet_name:r};return(await this.c.post("/v1/wallet/rename",n)).body}async getWallet(e){const t={wallet_handle_token:e};return(await this.c.post("/v1/wallet/info",t)).body}async exportMasterDerivationKey(e,t){const r={wallet_handle_token:e,wallet_password:t},n=await this.c.post("/v1/master-key/export",r);return{master_derivation_key:o.lW.from(n.body.master_derivation_key,"base64")}}async importKey(e,t){const r={wallet_handle_token:e,private_key:o.lW.from(t).toString("base64")};return(await this.c.post("/v1/key/import",r)).body}async exportKey(e,t,r){const n={wallet_handle_token:e,address:r,wallet_password:t},s=await this.c.post("/v1/key/export",n);return{private_key:o.lW.from(s.body.private_key,"base64")}}async generateKey(e){const t={wallet_handle_token:e,display_mnemonic:!1};return(await this.c.post("/v1/key",t)).body}async deleteKey(e,t,r){const n={wallet_handle_token:e,address:r,wallet_password:t};return(await this.c.delete("/v1/key",n)).body}async listKeys(e){const t={wallet_handle_token:e};return(await this.c.post("/v1/key/list",t)).body}async signTransaction(e,t,r){const n=le(r),s={wallet_handle_token:e,wallet_password:t,transaction:o.lW.from(n.toByte()).toString("base64")},i=await this.c.post("/v1/transaction/sign",s);return 200===i.status?o.lW.from(i.body.signed_transaction,"base64"):i.body}async signTransactionWithSpecificPublicKey(e,t,r,n){const s=le(r),i={wallet_handle_token:e,wallet_password:t,transaction:o.lW.from(s.toByte()).toString("base64"),public_key:o.lW.from(n).toString("base64")},a=await this.c.post("/v1/transaction/sign",i);return 200===a.status?o.lW.from(a.body.signed_transaction,"base64"):a.body}async listMultisig(e){const t={wallet_handle_token:e};return(await this.c.post("/v1/multisig/list",t)).body}async importMultisig(e,t,r,n){const s={wallet_handle_token:e,multisig_version:t,threshold:r,pks:n};return(await this.c.post("/v1/multisig/import",s)).body}async exportMultisig(e,t){const r={wallet_handle_token:e,address:t};return(await this.c.post("/v1/multisig/export",r)).body}async signMultisigTransaction(e,t,r,n,s){const i=le(r),a={wallet_handle_token:e,transaction:o.lW.from(i.toByte()).toString("base64"),public_key:o.lW.from(n).toString("base64"),partial_multisig:s,wallet_password:t};return(await this.c.post("/v1/multisig/sign",a)).body}async deleteMultisig(e,t,r){const n={wallet_handle_token:e,address:r,wallet_password:t};return(await this.c.delete("/v1/multisig",n)).body}}class Ht extends _e{path(){return"/health"}}class Vt extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/assets/${this.index}/balances`}limit(e){return this.query.limit=e,this}currencyGreaterThan(e){return this.query["currency-greater-than"]=e,this}currencyLessThan(e){return this.query["currency-less-than"]=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}}function Gt(e){return"string"==typeof e?e:o.lW.from(e).toString("base64")}class Yt extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}/transactions`}notePrefix(e){return this.query["note-prefix"]=Gt(e),this}txType(e){return this.query["tx-type"]=e,this}sigType(e){return this.query["sig-type"]=e,this}txid(e){return this.query.txid=e,this}round(e){return this.query.round=e,this}minRound(e){return this.query["min-round"]=e,this}maxRound(e){return this.query["max-round"]=e,this}assetID(e){return this.query["asset-id"]=e,this}limit(e){return this.query.limit=e,this}beforeTime(e){return this.query["before-time"]=e,this}afterTime(e){return this.query["after-time"]=e,this}currencyGreaterThan(e){return this.query["currency-greater-than"]=e,this}currencyLessThan(e){return this.query["currency-less-than"]=e,this}nextToken(e){return this.query.next=e,this}rekeyTo(e){return this.query["rekey-to"]=e,this}}class Xt extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/assets/${this.index}/transactions`}notePrefix(e){return this.query["note-prefix"]=Gt(e),this}txType(e){return this.query["tx-type"]=e,this}sigType(e){return this.query["sig-type"]=e,this}txid(e){return this.query.txid=e,this}round(e){return this.query.round=e,this}minRound(e){return this.query["min-round"]=e,this}maxRound(e){return this.query["max-round"]=e,this}limit(e){return this.query.limit=e,this}beforeTime(e){return this.query["before-time"]=e,this}afterTime(e){return this.query["after-time"]=e,this}currencyGreaterThan(e){return this.query["currency-greater-than"]=e,this}currencyLessThan(e){return this.query["currency-less-than"]=e,this}addressRole(e){return this.query["address-role"]=e,this}address(e){return this.query.address=e,this}excludeCloseTo(e){return this.query["exclude-close-to"]=e,this}nextToken(e){return this.query.next=e,this}rekeyTo(e){return this.query["rekey-to"]=e,this}}class Zt extends _e{constructor(e,t,r){super(e,t),this.round=r,this.round=r}path(){return`/v2/blocks/${this.round}`}headerOnly(e){return this.query["header-only"]=e,this}}class Jt extends _e{constructor(e,t,r){super(e,t),this.txID=r,this.txID=r}path(){return`/v2/transactions/${this.txID}`}}class Qt extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}`}round(e){return this.query.round=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}exclude(e){return this.query.exclude=e,this}}class er extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}/assets`}limit(e){return this.query.limit=e,this}round(e){return this.query.round=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}assetId(e){return this.query["asset-id"]=e,this}}class tr extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}/created-assets`}limit(e){return this.query.limit=e,this}round(e){return this.query.round=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}assetID(e){return this.query["asset-id"]=e,this}}class rr extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}/apps-local-state`}limit(e){return this.query.limit=e,this}round(e){return this.query.round=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}applicationID(e){return this.query["application-id"]=e,this}}class nr extends _e{constructor(e,t,r){super(e,t),this.account=r,this.account=r}path(){return`/v2/accounts/${this.account}/created-applications`}limit(e){return this.query.limit=e,this}round(e){return this.query.round=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}applicationID(e){return this.query["application-id"]=e,this}}class sr extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/assets/${this.index}`}includeAll(e=!0){return this.query["include-all"]=e,this}}class ir extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/applications/${this.index}`}includeAll(e=!0){return this.query["include-all"]=e,this}}class or extends _e{constructor(e,t,r){super(e,t),this.appID=r,this.appID=r}path(){return`/v2/applications/${this.appID}/logs`}limit(e){return this.query.limit=e,this}minRound(e){return this.query["min-round"]=e,this}maxRound(e){return this.query["max-round"]=e,this}nextToken(e){return this.query.next=e,this}sender(e){return this.query["sender-address"]=e,this}txid(e){return this.query.txid=e,this}}class ar extends Oe{constructor({address:e,amount:t,amountWithoutPendingRewards:r,pendingRewards:n,rewards:s,round:i,status:o,totalAppsOptedIn:a,totalAssetsOptedIn:c,totalBoxBytes:l,totalBoxes:u,totalCreatedApps:h,totalCreatedAssets:d,appsLocalState:p,appsTotalExtraPages:f,appsTotalSchema:g,assets:m,authAddr:y,closedAtRound:w,createdApps:b,createdAssets:v,createdAtRound:_,deleted:A,participation:x,rewardBase:E,sigType:T}){super(),this.address=e,this.amount=t,this.amountWithoutPendingRewards=r,this.pendingRewards=n,this.rewards=s,this.round=i,this.status=o,this.totalAppsOptedIn=a,this.totalAssetsOptedIn=c,this.totalBoxBytes=l,this.totalBoxes=u,this.totalCreatedApps=h,this.totalCreatedAssets=d,this.appsLocalState=p,this.appsTotalExtraPages=f,this.appsTotalSchema=g,this.assets=m,this.authAddr=y,this.closedAtRound=w,this.createdApps=b,this.createdAssets=v,this.createdAtRound=_,this.deleted=A,this.participation=x,this.rewardBase=E,this.sigType=T,this.attribute_map={address:"address",amount:"amount",amountWithoutPendingRewards:"amount-without-pending-rewards",pendingRewards:"pending-rewards",rewards:"rewards",round:"round",status:"status",totalAppsOptedIn:"total-apps-opted-in",totalAssetsOptedIn:"total-assets-opted-in",totalBoxBytes:"total-box-bytes",totalBoxes:"total-boxes",totalCreatedApps:"total-created-apps",totalCreatedAssets:"total-created-assets",appsLocalState:"apps-local-state",appsTotalExtraPages:"apps-total-extra-pages",appsTotalSchema:"apps-total-schema",assets:"assets",authAddr:"auth-addr",closedAtRound:"closed-at-round",createdApps:"created-apps",createdAssets:"created-assets",createdAtRound:"created-at-round",deleted:"deleted",participation:"participation",rewardBase:"reward-base",sigType:"sig-type"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["amount-without-pending-rewards"])throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${e}`);if(void 0===e["pending-rewards"])throw new Error(`Response is missing required field 'pending-rewards': ${e}`);if(void 0===e.rewards)throw new Error(`Response is missing required field 'rewards': ${e}`);if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);if(void 0===e.status)throw new Error(`Response is missing required field 'status': ${e}`);if(void 0===e["total-apps-opted-in"])throw new Error(`Response is missing required field 'total-apps-opted-in': ${e}`);if(void 0===e["total-assets-opted-in"])throw new Error(`Response is missing required field 'total-assets-opted-in': ${e}`);if(void 0===e["total-box-bytes"])throw new Error(`Response is missing required field 'total-box-bytes': ${e}`);if(void 0===e["total-boxes"])throw new Error(`Response is missing required field 'total-boxes': ${e}`);if(void 0===e["total-created-apps"])throw new Error(`Response is missing required field 'total-created-apps': ${e}`);if(void 0===e["total-created-assets"])throw new Error(`Response is missing required field 'total-created-assets': ${e}`);return new ar({address:e.address,amount:e.amount,amountWithoutPendingRewards:e["amount-without-pending-rewards"],pendingRewards:e["pending-rewards"],rewards:e.rewards,round:e.round,status:e.status,totalAppsOptedIn:e["total-apps-opted-in"],totalAssetsOptedIn:e["total-assets-opted-in"],totalBoxBytes:e["total-box-bytes"],totalBoxes:e["total-boxes"],totalCreatedApps:e["total-created-apps"],totalCreatedAssets:e["total-created-assets"],appsLocalState:void 0!==e["apps-local-state"]?e["apps-local-state"].map(pr.from_obj_for_encoding):void 0,appsTotalExtraPages:e["apps-total-extra-pages"],appsTotalSchema:void 0!==e["apps-total-schema"]?br.from_obj_for_encoding(e["apps-total-schema"]):void 0,assets:void 0!==e.assets?e.assets.map(xr.from_obj_for_encoding):void 0,authAddr:e["auth-addr"],closedAtRound:e["closed-at-round"],createdApps:void 0!==e["created-apps"]?e["created-apps"].map(dr.from_obj_for_encoding):void 0,createdAssets:void 0!==e["created-assets"]?e["created-assets"].map(_r.from_obj_for_encoding):void 0,createdAtRound:e["created-at-round"],deleted:e.deleted,participation:void 0!==e.participation?cr.from_obj_for_encoding(e.participation):void 0,rewardBase:e["reward-base"],sigType:e["sig-type"]})}}class cr extends Oe{constructor({selectionParticipationKey:e,voteFirstValid:t,voteKeyDilution:r,voteLastValid:n,voteParticipationKey:s,stateProofKey:i}){super(),this.selectionParticipationKey="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.voteFirstValid=t,this.voteKeyDilution=r,this.voteLastValid=n,this.voteParticipationKey="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.stateProofKey="string"==typeof i?new Uint8Array(o.lW.from(i,"base64")):i,this.attribute_map={selectionParticipationKey:"selection-participation-key",voteFirstValid:"vote-first-valid",voteKeyDilution:"vote-key-dilution",voteLastValid:"vote-last-valid",voteParticipationKey:"vote-participation-key",stateProofKey:"state-proof-key"}}static from_obj_for_encoding(e){if(void 0===e["selection-participation-key"])throw new Error(`Response is missing required field 'selection-participation-key': ${e}`);if(void 0===e["vote-first-valid"])throw new Error(`Response is missing required field 'vote-first-valid': ${e}`);if(void 0===e["vote-key-dilution"])throw new Error(`Response is missing required field 'vote-key-dilution': ${e}`);if(void 0===e["vote-last-valid"])throw new Error(`Response is missing required field 'vote-last-valid': ${e}`);if(void 0===e["vote-participation-key"])throw new Error(`Response is missing required field 'vote-participation-key': ${e}`);return new cr({selectionParticipationKey:e["selection-participation-key"],voteFirstValid:e["vote-first-valid"],voteKeyDilution:e["vote-key-dilution"],voteLastValid:e["vote-last-valid"],voteParticipationKey:e["vote-participation-key"],stateProofKey:e["state-proof-key"]})}}class lr extends Oe{constructor({account:e,currentRound:t}){super(),this.account=e,this.currentRound=t,this.attribute_map={account:"account",currentRound:"current-round"}}static from_obj_for_encoding(e){if(void 0===e.account)throw new Error(`Response is missing required field 'account': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new lr({account:ar.from_obj_for_encoding(e.account),currentRound:e["current-round"]})}}class ur extends Oe{constructor({address:e,delta:t}){super(),this.address=e,this.delta=t,this.attribute_map={address:"address",delta:"delta"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(!Array.isArray(e.delta))throw new Error(`Response is missing required array field 'delta': ${e}`);return new ur({address:e.address,delta:e.delta.map(Lr.from_obj_for_encoding)})}}class hr extends Oe{constructor({accounts:e,currentRound:t,nextToken:r}){super(),this.accounts=e,this.currentRound=t,this.nextToken=r,this.attribute_map={accounts:"accounts",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e.accounts))throw new Error(`Response is missing required array field 'accounts': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new hr({accounts:e.accounts.map(ar.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class dr extends Oe{constructor({id:e,params:t,createdAtRound:r,deleted:n,deletedAtRound:s}){super(),this.id=e,this.params=t,this.createdAtRound=r,this.deleted=n,this.deletedAtRound=s,this.attribute_map={id:"id",params:"params",createdAtRound:"created-at-round",deleted:"deleted",deletedAtRound:"deleted-at-round"}}static from_obj_for_encoding(e){if(void 0===e.id)throw new Error(`Response is missing required field 'id': ${e}`);if(void 0===e.params)throw new Error(`Response is missing required field 'params': ${e}`);return new dr({id:e.id,params:yr.from_obj_for_encoding(e.params),createdAtRound:e["created-at-round"],deleted:e.deleted,deletedAtRound:e["deleted-at-round"]})}}class pr extends Oe{constructor({id:e,schema:t,closedOutAtRound:r,deleted:n,keyValue:s,optedInAtRound:i}){super(),this.id=e,this.schema=t,this.closedOutAtRound=r,this.deleted=n,this.keyValue=s,this.optedInAtRound=i,this.attribute_map={id:"id",schema:"schema",closedOutAtRound:"closed-out-at-round",deleted:"deleted",keyValue:"key-value",optedInAtRound:"opted-in-at-round"}}static from_obj_for_encoding(e){if(void 0===e.id)throw new Error(`Response is missing required field 'id': ${e}`);if(void 0===e.schema)throw new Error(`Response is missing required field 'schema': ${e}`);return new pr({id:e.id,schema:br.from_obj_for_encoding(e.schema),closedOutAtRound:e["closed-out-at-round"],deleted:e.deleted,keyValue:void 0!==e["key-value"]?e["key-value"].map(Jr.from_obj_for_encoding):void 0,optedInAtRound:e["opted-in-at-round"]})}}class fr extends Oe{constructor({appsLocalStates:e,currentRound:t,nextToken:r}){super(),this.appsLocalStates=e,this.currentRound=t,this.nextToken=r,this.attribute_map={appsLocalStates:"apps-local-states",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e["apps-local-states"]))throw new Error(`Response is missing required array field 'apps-local-states': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new fr({appsLocalStates:e["apps-local-states"].map(pr.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class gr extends Oe{constructor({logs:e,txid:t}){super(),this.logs=e,this.txid=t,this.attribute_map={logs:"logs",txid:"txid"}}static from_obj_for_encoding(e){if(!Array.isArray(e.logs))throw new Error(`Response is missing required array field 'logs': ${e}`);if(void 0===e.txid)throw new Error(`Response is missing required field 'txid': ${e}`);return new gr({logs:e.logs,txid:e.txid})}}class mr extends Oe{constructor({applicationId:e,currentRound:t,logData:r,nextToken:n}){super(),this.applicationId=e,this.currentRound=t,this.logData=r,this.nextToken=n,this.attribute_map={applicationId:"application-id",currentRound:"current-round",logData:"log-data",nextToken:"next-token"}}static from_obj_for_encoding(e){if(void 0===e["application-id"])throw new Error(`Response is missing required field 'application-id': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new mr({applicationId:e["application-id"],currentRound:e["current-round"],logData:void 0!==e["log-data"]?e["log-data"].map(gr.from_obj_for_encoding):void 0,nextToken:e["next-token"]})}}class yr extends Oe{constructor({approvalProgram:e,clearStateProgram:t,creator:r,extraProgramPages:n,globalState:s,globalStateSchema:i,localStateSchema:a}){super(),this.approvalProgram="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.clearStateProgram="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.creator=r,this.extraProgramPages=n,this.globalState=s,this.globalStateSchema=i,this.localStateSchema=a,this.attribute_map={approvalProgram:"approval-program",clearStateProgram:"clear-state-program",creator:"creator",extraProgramPages:"extra-program-pages",globalState:"global-state",globalStateSchema:"global-state-schema",localStateSchema:"local-state-schema"}}static from_obj_for_encoding(e){if(void 0===e["approval-program"])throw new Error(`Response is missing required field 'approval-program': ${e}`);if(void 0===e["clear-state-program"])throw new Error(`Response is missing required field 'clear-state-program': ${e}`);return new yr({approvalProgram:e["approval-program"],clearStateProgram:e["clear-state-program"],creator:e.creator,extraProgramPages:e["extra-program-pages"],globalState:void 0!==e["global-state"]?e["global-state"].map(Jr.from_obj_for_encoding):void 0,globalStateSchema:void 0!==e["global-state-schema"]?br.from_obj_for_encoding(e["global-state-schema"]):void 0,localStateSchema:void 0!==e["local-state-schema"]?br.from_obj_for_encoding(e["local-state-schema"]):void 0})}}class wr extends Oe{constructor({currentRound:e,application:t}){super(),this.currentRound=e,this.application=t,this.attribute_map={currentRound:"current-round",application:"application"}}static from_obj_for_encoding(e){if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new wr({currentRound:e["current-round"],application:void 0!==e.application?dr.from_obj_for_encoding(e.application):void 0})}}class br extends Oe{constructor({numByteSlice:e,numUint:t}){super(),this.numByteSlice=e,this.numUint=t,this.attribute_map={numByteSlice:"num-byte-slice",numUint:"num-uint"}}static from_obj_for_encoding(e){if(void 0===e["num-byte-slice"])throw new Error(`Response is missing required field 'num-byte-slice': ${e}`);if(void 0===e["num-uint"])throw new Error(`Response is missing required field 'num-uint': ${e}`);return new br({numByteSlice:e["num-byte-slice"],numUint:e["num-uint"]})}}class vr extends Oe{constructor({applications:e,currentRound:t,nextToken:r}){super(),this.applications=e,this.currentRound=t,this.nextToken=r,this.attribute_map={applications:"applications",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e.applications))throw new Error(`Response is missing required array field 'applications': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new vr({applications:e.applications.map(dr.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class _r extends Oe{constructor({index:e,params:t,createdAtRound:r,deleted:n,destroyedAtRound:s}){super(),this.index=e,this.params=t,this.createdAtRound=r,this.deleted=n,this.destroyedAtRound=s,this.attribute_map={index:"index",params:"params",createdAtRound:"created-at-round",deleted:"deleted",destroyedAtRound:"destroyed-at-round"}}static from_obj_for_encoding(e){if(void 0===e.index)throw new Error(`Response is missing required field 'index': ${e}`);if(void 0===e.params)throw new Error(`Response is missing required field 'params': ${e}`);return new _r({index:e.index,params:Tr.from_obj_for_encoding(e.params),createdAtRound:e["created-at-round"],deleted:e.deleted,destroyedAtRound:e["destroyed-at-round"]})}}class Ar extends Oe{constructor({balances:e,currentRound:t,nextToken:r}){super(),this.balances=e,this.currentRound=t,this.nextToken=r,this.attribute_map={balances:"balances",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e.balances))throw new Error(`Response is missing required array field 'balances': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new Ar({balances:e.balances.map(Wr.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class xr extends Oe{constructor({amount:e,assetId:t,isFrozen:r,deleted:n,optedInAtRound:s,optedOutAtRound:i}){super(),this.amount=e,this.assetId=t,this.isFrozen=r,this.deleted=n,this.optedInAtRound=s,this.optedOutAtRound=i,this.attribute_map={amount:"amount",assetId:"asset-id",isFrozen:"is-frozen",deleted:"deleted",optedInAtRound:"opted-in-at-round",optedOutAtRound:"opted-out-at-round"}}static from_obj_for_encoding(e){if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["asset-id"])throw new Error(`Response is missing required field 'asset-id': ${e}`);if(void 0===e["is-frozen"])throw new Error(`Response is missing required field 'is-frozen': ${e}`);return new xr({amount:e.amount,assetId:e["asset-id"],isFrozen:e["is-frozen"],deleted:e.deleted,optedInAtRound:e["opted-in-at-round"],optedOutAtRound:e["opted-out-at-round"]})}}class Er extends Oe{constructor({assets:e,currentRound:t,nextToken:r}){super(),this.assets=e,this.currentRound=t,this.nextToken=r,this.attribute_map={assets:"assets",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e.assets))throw new Error(`Response is missing required array field 'assets': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new Er({assets:e.assets.map(xr.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class Tr extends Oe{constructor({creator:e,decimals:t,total:r,clawback:n,defaultFrozen:s,freeze:i,manager:a,metadataHash:c,name:l,nameB64:u,reserve:h,unitName:d,unitNameB64:p,url:f,urlB64:g}){super(),this.creator=e,this.decimals=t,this.total=r,this.clawback=n,this.defaultFrozen=s,this.freeze=i,this.manager=a,this.metadataHash="string"==typeof c?new Uint8Array(o.lW.from(c,"base64")):c,this.name=l,this.nameB64="string"==typeof u?new Uint8Array(o.lW.from(u,"base64")):u,this.reserve=h,this.unitName=d,this.unitNameB64="string"==typeof p?new Uint8Array(o.lW.from(p,"base64")):p,this.url=f,this.urlB64="string"==typeof g?new Uint8Array(o.lW.from(g,"base64")):g,this.attribute_map={creator:"creator",decimals:"decimals",total:"total",clawback:"clawback",defaultFrozen:"default-frozen",freeze:"freeze",manager:"manager",metadataHash:"metadata-hash",name:"name",nameB64:"name-b64",reserve:"reserve",unitName:"unit-name",unitNameB64:"unit-name-b64",url:"url",urlB64:"url-b64"}}static from_obj_for_encoding(e){if(void 0===e.creator)throw new Error(`Response is missing required field 'creator': ${e}`);if(void 0===e.decimals)throw new Error(`Response is missing required field 'decimals': ${e}`);if(void 0===e.total)throw new Error(`Response is missing required field 'total': ${e}`);return new Tr({creator:e.creator,decimals:e.decimals,total:e.total,clawback:e.clawback,defaultFrozen:e["default-frozen"],freeze:e.freeze,manager:e.manager,metadataHash:e["metadata-hash"],name:e.name,nameB64:e["name-b64"],reserve:e.reserve,unitName:e["unit-name"],unitNameB64:e["unit-name-b64"],url:e.url,urlB64:e["url-b64"]})}}class kr extends Oe{constructor({asset:e,currentRound:t}){super(),this.asset=e,this.currentRound=t,this.attribute_map={asset:"asset",currentRound:"current-round"}}static from_obj_for_encoding(e){if(void 0===e.asset)throw new Error(`Response is missing required field 'asset': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new kr({asset:_r.from_obj_for_encoding(e.asset),currentRound:e["current-round"]})}}class Sr extends Oe{constructor({assets:e,currentRound:t,nextToken:r}){super(),this.assets=e,this.currentRound=t,this.nextToken=r,this.attribute_map={assets:"assets",currentRound:"current-round",nextToken:"next-token"}}static from_obj_for_encoding(e){if(!Array.isArray(e.assets))throw new Error(`Response is missing required array field 'assets': ${e}`);if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);return new Sr({assets:e.assets.map(_r.from_obj_for_encoding),currentRound:e["current-round"],nextToken:e["next-token"]})}}class Ir extends Oe{constructor({genesisHash:e,genesisId:t,previousBlockHash:r,round:n,seed:s,timestamp:i,transactionsRoot:a,transactionsRootSha256:c,participationUpdates:l,rewards:u,stateProofTracking:h,transactions:d,txnCounter:p,upgradeState:f,upgradeVote:g}){super(),this.genesisHash="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.genesisId=t,this.previousBlockHash="string"==typeof r?new Uint8Array(o.lW.from(r,"base64")):r,this.round=n,this.seed="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.timestamp=i,this.transactionsRoot="string"==typeof a?new Uint8Array(o.lW.from(a,"base64")):a,this.transactionsRootSha256="string"==typeof c?new Uint8Array(o.lW.from(c,"base64")):c,this.participationUpdates=l,this.rewards=u,this.stateProofTracking=h,this.transactions=d,this.txnCounter=p,this.upgradeState=f,this.upgradeVote=g,this.attribute_map={genesisHash:"genesis-hash",genesisId:"genesis-id",previousBlockHash:"previous-block-hash",round:"round",seed:"seed",timestamp:"timestamp",transactionsRoot:"transactions-root",transactionsRootSha256:"transactions-root-sha256",participationUpdates:"participation-updates",rewards:"rewards",stateProofTracking:"state-proof-tracking",transactions:"transactions",txnCounter:"txn-counter",upgradeState:"upgrade-state",upgradeVote:"upgrade-vote"}}static from_obj_for_encoding(e){if(void 0===e["genesis-hash"])throw new Error(`Response is missing required field 'genesis-hash': ${e}`);if(void 0===e["genesis-id"])throw new Error(`Response is missing required field 'genesis-id': ${e}`);if(void 0===e["previous-block-hash"])throw new Error(`Response is missing required field 'previous-block-hash': ${e}`);if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);if(void 0===e.seed)throw new Error(`Response is missing required field 'seed': ${e}`);if(void 0===e.timestamp)throw new Error(`Response is missing required field 'timestamp': ${e}`);if(void 0===e["transactions-root"])throw new Error(`Response is missing required field 'transactions-root': ${e}`);if(void 0===e["transactions-root-sha256"])throw new Error(`Response is missing required field 'transactions-root-sha256': ${e}`);return new Ir({genesisHash:e["genesis-hash"],genesisId:e["genesis-id"],previousBlockHash:e["previous-block-hash"],round:e.round,seed:e.seed,timestamp:e.timestamp,transactionsRoot:e["transactions-root"],transactionsRootSha256:e["transactions-root-sha256"],participationUpdates:void 0!==e["participation-updates"]?Fr.from_obj_for_encoding(e["participation-updates"]):void 0,rewards:void 0!==e.rewards?Rr.from_obj_for_encoding(e.rewards):void 0,stateProofTracking:void 0!==e["state-proof-tracking"]?e["state-proof-tracking"].map(Yr.from_obj_for_encoding):void 0,transactions:void 0!==e.transactions?e.transactions.map(en.from_obj_for_encoding):void 0,txnCounter:e["txn-counter"],upgradeState:void 0!==e["upgrade-state"]?Br.from_obj_for_encoding(e["upgrade-state"]):void 0,upgradeVote:void 0!==e["upgrade-vote"]?Pr.from_obj_for_encoding(e["upgrade-vote"]):void 0})}}class Rr extends Oe{constructor({feeSink:e,rewardsCalculationRound:t,rewardsLevel:r,rewardsPool:n,rewardsRate:s,rewardsResidue:i}){super(),this.feeSink=e,this.rewardsCalculationRound=t,this.rewardsLevel=r,this.rewardsPool=n,this.rewardsRate=s,this.rewardsResidue=i,this.attribute_map={feeSink:"fee-sink",rewardsCalculationRound:"rewards-calculation-round",rewardsLevel:"rewards-level",rewardsPool:"rewards-pool",rewardsRate:"rewards-rate",rewardsResidue:"rewards-residue"}}static from_obj_for_encoding(e){if(void 0===e["fee-sink"])throw new Error(`Response is missing required field 'fee-sink': ${e}`);if(void 0===e["rewards-calculation-round"])throw new Error(`Response is missing required field 'rewards-calculation-round': ${e}`);if(void 0===e["rewards-level"])throw new Error(`Response is missing required field 'rewards-level': ${e}`);if(void 0===e["rewards-pool"])throw new Error(`Response is missing required field 'rewards-pool': ${e}`);if(void 0===e["rewards-rate"])throw new Error(`Response is missing required field 'rewards-rate': ${e}`);if(void 0===e["rewards-residue"])throw new Error(`Response is missing required field 'rewards-residue': ${e}`);return new Rr({feeSink:e["fee-sink"],rewardsCalculationRound:e["rewards-calculation-round"],rewardsLevel:e["rewards-level"],rewardsPool:e["rewards-pool"],rewardsRate:e["rewards-rate"],rewardsResidue:e["rewards-residue"]})}}class Br extends Oe{constructor({currentProtocol:e,nextProtocol:t,nextProtocolApprovals:r,nextProtocolSwitchOn:n,nextProtocolVoteBefore:s}){super(),this.currentProtocol=e,this.nextProtocol=t,this.nextProtocolApprovals=r,this.nextProtocolSwitchOn=n,this.nextProtocolVoteBefore=s,this.attribute_map={currentProtocol:"current-protocol",nextProtocol:"next-protocol",nextProtocolApprovals:"next-protocol-approvals",nextProtocolSwitchOn:"next-protocol-switch-on",nextProtocolVoteBefore:"next-protocol-vote-before"}}static from_obj_for_encoding(e){if(void 0===e["current-protocol"])throw new Error(`Response is missing required field 'current-protocol': ${e}`);return new Br({currentProtocol:e["current-protocol"],nextProtocol:e["next-protocol"],nextProtocolApprovals:e["next-protocol-approvals"],nextProtocolSwitchOn:e["next-protocol-switch-on"],nextProtocolVoteBefore:e["next-protocol-vote-before"]})}}class Pr extends Oe{constructor({upgradeApprove:e,upgradeDelay:t,upgradePropose:r}){super(),this.upgradeApprove=e,this.upgradeDelay=t,this.upgradePropose=r,this.attribute_map={upgradeApprove:"upgrade-approve",upgradeDelay:"upgrade-delay",upgradePropose:"upgrade-propose"}}static from_obj_for_encoding(e){return new Pr({upgradeApprove:e["upgrade-approve"],upgradeDelay:e["upgrade-delay"],upgradePropose:e["upgrade-propose"]})}}class Ur extends Oe{constructor({name:e,value:t}){super(),this.name="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.value="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.attribute_map={name:"name",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.name)throw new Error(`Response is missing required field 'name': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new Ur({name:e.name,value:e.value})}}class Cr extends Oe{constructor({name:e}){super(),this.name="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.attribute_map={name:"name"}}static from_obj_for_encoding(e){if(void 0===e.name)throw new Error(`Response is missing required field 'name': ${e}`);return new Cr({name:e.name})}}class Or extends Oe{constructor({applicationId:e,boxes:t,nextToken:r}){super(),this.applicationId=e,this.boxes=t,this.nextToken=r,this.attribute_map={applicationId:"application-id",boxes:"boxes",nextToken:"next-token"}}static from_obj_for_encoding(e){if(void 0===e["application-id"])throw new Error(`Response is missing required field 'application-id': ${e}`);if(!Array.isArray(e.boxes))throw new Error(`Response is missing required array field 'boxes': ${e}`);return new Or({applicationId:e["application-id"],boxes:e.boxes.map(Cr.from_obj_for_encoding),nextToken:e["next-token"]})}}class $r extends Oe{constructor({message:e,data:t}){super(),this.message=e,this.data=t,this.attribute_map={message:"message",data:"data"}}static from_obj_for_encoding(e){if(void 0===e.message)throw new Error(`Response is missing required field 'message': ${e}`);return new $r({message:e.message,data:e.data})}}class Dr extends Oe{constructor({action:e,bytes:t,uint:r}){super(),this.action=e,this.bytes=t,this.uint=r,this.attribute_map={action:"action",bytes:"bytes",uint:"uint"}}static from_obj_for_encoding(e){if(void 0===e.action)throw new Error(`Response is missing required field 'action': ${e}`);return new Dr({action:e.action,bytes:e.bytes,uint:e.uint})}}class Lr extends Oe{constructor({key:e,value:t}){super(),this.key=e,this.value=t,this.attribute_map={key:"key",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.key)throw new Error(`Response is missing required field 'key': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new Lr({key:e.key,value:Dr.from_obj_for_encoding(e.value)})}}class jr extends Oe{constructor({hashType:e}){super(),this.hashType=e,this.attribute_map={hashType:"hash-type"}}static from_obj_for_encoding(e){return new jr({hashType:e["hash-type"]})}}class qr extends Oe{constructor({dbAvailable:e,isMigrating:t,message:r,round:n,version:s,data:i,errors:o}){super(),this.dbAvailable=e,this.isMigrating=t,this.message=r,this.round=n,this.version=s,this.data=i,this.errors=o,this.attribute_map={dbAvailable:"db-available",isMigrating:"is-migrating",message:"message",round:"round",version:"version",data:"data",errors:"errors"}}static from_obj_for_encoding(e){if(void 0===e["db-available"])throw new Error(`Response is missing required field 'db-available': ${e}`);if(void 0===e["is-migrating"])throw new Error(`Response is missing required field 'is-migrating': ${e}`);if(void 0===e.message)throw new Error(`Response is missing required field 'message': ${e}`);if(void 0===e.round)throw new Error(`Response is missing required field 'round': ${e}`);if(void 0===e.version)throw new Error(`Response is missing required field 'version': ${e}`);return new qr({dbAvailable:e["db-available"],isMigrating:e["is-migrating"],message:e.message,round:e.round,version:e.version,data:e.data,errors:e.errors})}}class Mr extends Oe{constructor({blockHeadersCommitment:e,firstAttestedRound:t,latestAttestedRound:r,lnProvenWeight:n,votersCommitment:s}){super(),this.blockHeadersCommitment="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.firstAttestedRound=t,this.latestAttestedRound=r,this.lnProvenWeight=n,this.votersCommitment="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.attribute_map={blockHeadersCommitment:"block-headers-commitment",firstAttestedRound:"first-attested-round",latestAttestedRound:"latest-attested-round",lnProvenWeight:"ln-proven-weight",votersCommitment:"voters-commitment"}}static from_obj_for_encoding(e){return new Mr({blockHeadersCommitment:e["block-headers-commitment"],firstAttestedRound:e["first-attested-round"],latestAttestedRound:e["latest-attested-round"],lnProvenWeight:e["ln-proven-weight"],votersCommitment:e["voters-commitment"]})}}class Nr extends Oe{constructor({hashFactory:e,path:t,treeDepth:r}){super(),this.hashFactory=e,this.path=t,this.treeDepth=r,this.attribute_map={hashFactory:"hash-factory",path:"path",treeDepth:"tree-depth"}}static from_obj_for_encoding(e){return new Nr({hashFactory:void 0!==e["hash-factory"]?jr.from_obj_for_encoding(e["hash-factory"]):void 0,path:e.path,treeDepth:e["tree-depth"]})}}class Wr extends Oe{constructor({address:e,amount:t,isFrozen:r,deleted:n,optedInAtRound:s,optedOutAtRound:i}){super(),this.address=e,this.amount=t,this.isFrozen=r,this.deleted=n,this.optedInAtRound=s,this.optedOutAtRound=i,this.attribute_map={address:"address",amount:"amount",isFrozen:"is-frozen",deleted:"deleted",optedInAtRound:"opted-in-at-round",optedOutAtRound:"opted-out-at-round"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["is-frozen"])throw new Error(`Response is missing required field 'is-frozen': ${e}`);return new Wr({address:e.address,amount:e.amount,isFrozen:e["is-frozen"],deleted:e.deleted,optedInAtRound:e["opted-in-at-round"],optedOutAtRound:e["opted-out-at-round"]})}}class Fr extends Oe{constructor({expiredParticipationAccounts:e}){super(),this.expiredParticipationAccounts=e,this.attribute_map={expiredParticipationAccounts:"expired-participation-accounts"}}static from_obj_for_encoding(e){return new Fr({expiredParticipationAccounts:e["expired-participation-accounts"]})}}class Kr extends Oe{constructor({partProofs:e,positionsToReveal:t,reveals:r,saltVersion:n,sigCommit:s,sigProofs:i,signedWeight:a}){super(),this.partProofs=e,this.positionsToReveal=t,this.reveals=r,this.saltVersion=n,this.sigCommit="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.sigProofs=i,this.signedWeight=a,this.attribute_map={partProofs:"part-proofs",positionsToReveal:"positions-to-reveal",reveals:"reveals",saltVersion:"salt-version",sigCommit:"sig-commit",sigProofs:"sig-proofs",signedWeight:"signed-weight"}}static from_obj_for_encoding(e){return new Kr({partProofs:void 0!==e["part-proofs"]?Nr.from_obj_for_encoding(e["part-proofs"]):void 0,positionsToReveal:e["positions-to-reveal"],reveals:void 0!==e.reveals?e.reveals.map(Hr.from_obj_for_encoding):void 0,saltVersion:e["salt-version"],sigCommit:e["sig-commit"],sigProofs:void 0!==e["sig-proofs"]?Nr.from_obj_for_encoding(e["sig-proofs"]):void 0,signedWeight:e["signed-weight"]})}}class zr extends Oe{constructor({verifier:e,weight:t}){super(),this.verifier=e,this.weight=t,this.attribute_map={verifier:"verifier",weight:"weight"}}static from_obj_for_encoding(e){return new zr({verifier:void 0!==e.verifier?Xr.from_obj_for_encoding(e.verifier):void 0,weight:e.weight})}}class Hr extends Oe{constructor({participant:e,position:t,sigSlot:r}){super(),this.participant=e,this.position=t,this.sigSlot=r,this.attribute_map={participant:"participant",position:"position",sigSlot:"sig-slot"}}static from_obj_for_encoding(e){return new Hr({participant:void 0!==e.participant?zr.from_obj_for_encoding(e.participant):void 0,position:e.position,sigSlot:void 0!==e["sig-slot"]?Vr.from_obj_for_encoding(e["sig-slot"]):void 0})}}class Vr extends Oe{constructor({lowerSigWeight:e,signature:t}){super(),this.lowerSigWeight=e,this.signature=t,this.attribute_map={lowerSigWeight:"lower-sig-weight",signature:"signature"}}static from_obj_for_encoding(e){return new Vr({lowerSigWeight:e["lower-sig-weight"],signature:void 0!==e.signature?Gr.from_obj_for_encoding(e.signature):void 0})}}class Gr extends Oe{constructor({falconSignature:e,merkleArrayIndex:t,proof:r,verifyingKey:n}){super(),this.falconSignature="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.merkleArrayIndex=t,this.proof=r,this.verifyingKey="string"==typeof n?new Uint8Array(o.lW.from(n,"base64")):n,this.attribute_map={falconSignature:"falcon-signature",merkleArrayIndex:"merkle-array-index",proof:"proof",verifyingKey:"verifying-key"}}static from_obj_for_encoding(e){return new Gr({falconSignature:e["falcon-signature"],merkleArrayIndex:e["merkle-array-index"],proof:void 0!==e.proof?Nr.from_obj_for_encoding(e.proof):void 0,verifyingKey:e["verifying-key"]})}}class Yr extends Oe{constructor({nextRound:e,onlineTotalWeight:t,type:r,votersCommitment:n}){super(),this.nextRound=e,this.onlineTotalWeight=t,this.type=r,this.votersCommitment="string"==typeof n?new Uint8Array(o.lW.from(n,"base64")):n,this.attribute_map={nextRound:"next-round",onlineTotalWeight:"online-total-weight",type:"type",votersCommitment:"voters-commitment"}}static from_obj_for_encoding(e){return new Yr({nextRound:e["next-round"],onlineTotalWeight:e["online-total-weight"],type:e.type,votersCommitment:e["voters-commitment"]})}}class Xr extends Oe{constructor({commitment:e,keyLifetime:t}){super(),this.commitment="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.keyLifetime=t,this.attribute_map={commitment:"commitment",keyLifetime:"key-lifetime"}}static from_obj_for_encoding(e){return new Xr({commitment:e.commitment,keyLifetime:e["key-lifetime"]})}}class Zr extends Oe{constructor({numByteSlice:e,numUint:t}){super(),this.numByteSlice=e,this.numUint=t,this.attribute_map={numByteSlice:"num-byte-slice",numUint:"num-uint"}}static from_obj_for_encoding(e){if(void 0===e["num-byte-slice"])throw new Error(`Response is missing required field 'num-byte-slice': ${e}`);if(void 0===e["num-uint"])throw new Error(`Response is missing required field 'num-uint': ${e}`);return new Zr({numByteSlice:e["num-byte-slice"],numUint:e["num-uint"]})}}class Jr extends Oe{constructor({key:e,value:t}){super(),this.key=e,this.value=t,this.attribute_map={key:"key",value:"value"}}static from_obj_for_encoding(e){if(void 0===e.key)throw new Error(`Response is missing required field 'key': ${e}`);if(void 0===e.value)throw new Error(`Response is missing required field 'value': ${e}`);return new Jr({key:e.key,value:Qr.from_obj_for_encoding(e.value)})}}class Qr extends Oe{constructor({bytes:e,type:t,uint:r}){super(),this.bytes=e,this.type=t,this.uint=r,this.attribute_map={bytes:"bytes",type:"type",uint:"uint"}}static from_obj_for_encoding(e){if(void 0===e.bytes)throw new Error(`Response is missing required field 'bytes': ${e}`);if(void 0===e.type)throw new Error(`Response is missing required field 'type': ${e}`);if(void 0===e.uint)throw new Error(`Response is missing required field 'uint': ${e}`);return new Qr({bytes:e.bytes,type:e.type,uint:e.uint})}}class en extends Oe{constructor({fee:e,firstValid:t,lastValid:r,sender:n,applicationTransaction:s,assetConfigTransaction:i,assetFreezeTransaction:a,assetTransferTransaction:c,authAddr:l,closeRewards:u,closingAmount:h,confirmedRound:d,createdApplicationIndex:p,createdAssetIndex:f,genesisHash:g,genesisId:m,globalStateDelta:y,group:w,id:b,innerTxns:v,intraRoundOffset:_,keyregTransaction:A,lease:x,localStateDelta:E,logs:T,note:k,paymentTransaction:S,receiverRewards:I,rekeyTo:R,roundTime:B,senderRewards:P,signature:U,stateProofTransaction:C,txType:O}){super(),this.fee=e,this.firstValid=t,this.lastValid=r,this.sender=n,this.applicationTransaction=s,this.assetConfigTransaction=i,this.assetFreezeTransaction=a,this.assetTransferTransaction=c,this.authAddr=l,this.closeRewards=u,this.closingAmount=h,this.confirmedRound=d,this.createdApplicationIndex=p,this.createdAssetIndex=f,this.genesisHash="string"==typeof g?new Uint8Array(o.lW.from(g,"base64")):g,this.genesisId=m,this.globalStateDelta=y,this.group="string"==typeof w?new Uint8Array(o.lW.from(w,"base64")):w,this.id=b,this.innerTxns=v,this.intraRoundOffset=_,this.keyregTransaction=A,this.lease="string"==typeof x?new Uint8Array(o.lW.from(x,"base64")):x,this.localStateDelta=E,this.logs=T,this.note="string"==typeof k?new Uint8Array(o.lW.from(k,"base64")):k,this.paymentTransaction=S,this.receiverRewards=I,this.rekeyTo=R,this.roundTime=B,this.senderRewards=P,this.signature=U,this.stateProofTransaction=C,this.txType=O,this.attribute_map={fee:"fee",firstValid:"first-valid",lastValid:"last-valid",sender:"sender",applicationTransaction:"application-transaction",assetConfigTransaction:"asset-config-transaction",assetFreezeTransaction:"asset-freeze-transaction",assetTransferTransaction:"asset-transfer-transaction",authAddr:"auth-addr",closeRewards:"close-rewards",closingAmount:"closing-amount",confirmedRound:"confirmed-round",createdApplicationIndex:"created-application-index",createdAssetIndex:"created-asset-index",genesisHash:"genesis-hash",genesisId:"genesis-id",globalStateDelta:"global-state-delta",group:"group",id:"id",innerTxns:"inner-txns",intraRoundOffset:"intra-round-offset",keyregTransaction:"keyreg-transaction",lease:"lease",localStateDelta:"local-state-delta",logs:"logs",note:"note",paymentTransaction:"payment-transaction",receiverRewards:"receiver-rewards",rekeyTo:"rekey-to",roundTime:"round-time",senderRewards:"sender-rewards",signature:"signature",stateProofTransaction:"state-proof-transaction",txType:"tx-type"}}static from_obj_for_encoding(e){if(void 0===e.fee)throw new Error(`Response is missing required field 'fee': ${e}`);if(void 0===e["first-valid"])throw new Error(`Response is missing required field 'first-valid': ${e}`);if(void 0===e["last-valid"])throw new Error(`Response is missing required field 'last-valid': ${e}`);if(void 0===e.sender)throw new Error(`Response is missing required field 'sender': ${e}`);return new en({fee:e.fee,firstValid:e["first-valid"],lastValid:e["last-valid"],sender:e.sender,applicationTransaction:void 0!==e["application-transaction"]?tn.from_obj_for_encoding(e["application-transaction"]):void 0,assetConfigTransaction:void 0!==e["asset-config-transaction"]?rn.from_obj_for_encoding(e["asset-config-transaction"]):void 0,assetFreezeTransaction:void 0!==e["asset-freeze-transaction"]?nn.from_obj_for_encoding(e["asset-freeze-transaction"]):void 0,assetTransferTransaction:void 0!==e["asset-transfer-transaction"]?sn.from_obj_for_encoding(e["asset-transfer-transaction"]):void 0,authAddr:e["auth-addr"],closeRewards:e["close-rewards"],closingAmount:e["closing-amount"],confirmedRound:e["confirmed-round"],createdApplicationIndex:e["created-application-index"],createdAssetIndex:e["created-asset-index"],genesisHash:e["genesis-hash"],genesisId:e["genesis-id"],globalStateDelta:void 0!==e["global-state-delta"]?e["global-state-delta"].map(Lr.from_obj_for_encoding):void 0,group:e.group,id:e.id,innerTxns:void 0!==e["inner-txns"]?e["inner-txns"].map(en.from_obj_for_encoding):void 0,intraRoundOffset:e["intra-round-offset"],keyregTransaction:void 0!==e["keyreg-transaction"]?on.from_obj_for_encoding(e["keyreg-transaction"]):void 0,lease:e.lease,localStateDelta:void 0!==e["local-state-delta"]?e["local-state-delta"].map(ur.from_obj_for_encoding):void 0,logs:e.logs,note:e.note,paymentTransaction:void 0!==e["payment-transaction"]?an.from_obj_for_encoding(e["payment-transaction"]):void 0,receiverRewards:e["receiver-rewards"],rekeyTo:e["rekey-to"],roundTime:e["round-time"],senderRewards:e["sender-rewards"],signature:void 0!==e.signature?ln.from_obj_for_encoding(e.signature):void 0,stateProofTransaction:void 0!==e["state-proof-transaction"]?pn.from_obj_for_encoding(e["state-proof-transaction"]):void 0,txType:e["tx-type"]})}}class tn extends Oe{constructor({applicationId:e,accounts:t,applicationArgs:r,approvalProgram:n,clearStateProgram:s,extraProgramPages:i,foreignApps:a,foreignAssets:c,globalStateSchema:l,localStateSchema:u,onCompletion:h}){super(),this.applicationId=e,this.accounts=t,this.applicationArgs=r,this.approvalProgram="string"==typeof n?new Uint8Array(o.lW.from(n,"base64")):n,this.clearStateProgram="string"==typeof s?new Uint8Array(o.lW.from(s,"base64")):s,this.extraProgramPages=i,this.foreignApps=a,this.foreignAssets=c,this.globalStateSchema=l,this.localStateSchema=u,this.onCompletion=h,this.attribute_map={applicationId:"application-id",accounts:"accounts",applicationArgs:"application-args",approvalProgram:"approval-program",clearStateProgram:"clear-state-program",extraProgramPages:"extra-program-pages",foreignApps:"foreign-apps",foreignAssets:"foreign-assets",globalStateSchema:"global-state-schema",localStateSchema:"local-state-schema",onCompletion:"on-completion"}}static from_obj_for_encoding(e){if(void 0===e["application-id"])throw new Error(`Response is missing required field 'application-id': ${e}`);return new tn({applicationId:e["application-id"],accounts:e.accounts,applicationArgs:e["application-args"],approvalProgram:e["approval-program"],clearStateProgram:e["clear-state-program"],extraProgramPages:e["extra-program-pages"],foreignApps:e["foreign-apps"],foreignAssets:e["foreign-assets"],globalStateSchema:void 0!==e["global-state-schema"]?Zr.from_obj_for_encoding(e["global-state-schema"]):void 0,localStateSchema:void 0!==e["local-state-schema"]?Zr.from_obj_for_encoding(e["local-state-schema"]):void 0,onCompletion:e["on-completion"]})}}class rn extends Oe{constructor({assetId:e,params:t}){super(),this.assetId=e,this.params=t,this.attribute_map={assetId:"asset-id",params:"params"}}static from_obj_for_encoding(e){return new rn({assetId:e["asset-id"],params:void 0!==e.params?Tr.from_obj_for_encoding(e.params):void 0})}}class nn extends Oe{constructor({address:e,assetId:t,newFreezeStatus:r}){super(),this.address=e,this.assetId=t,this.newFreezeStatus=r,this.attribute_map={address:"address",assetId:"asset-id",newFreezeStatus:"new-freeze-status"}}static from_obj_for_encoding(e){if(void 0===e.address)throw new Error(`Response is missing required field 'address': ${e}`);if(void 0===e["asset-id"])throw new Error(`Response is missing required field 'asset-id': ${e}`);if(void 0===e["new-freeze-status"])throw new Error(`Response is missing required field 'new-freeze-status': ${e}`);return new nn({address:e.address,assetId:e["asset-id"],newFreezeStatus:e["new-freeze-status"]})}}class sn extends Oe{constructor({amount:e,assetId:t,receiver:r,closeAmount:n,closeTo:s,sender:i}){super(),this.amount=e,this.assetId=t,this.receiver=r,this.closeAmount=n,this.closeTo=s,this.sender=i,this.attribute_map={amount:"amount",assetId:"asset-id",receiver:"receiver",closeAmount:"close-amount",closeTo:"close-to",sender:"sender"}}static from_obj_for_encoding(e){if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e["asset-id"])throw new Error(`Response is missing required field 'asset-id': ${e}`);if(void 0===e.receiver)throw new Error(`Response is missing required field 'receiver': ${e}`);return new sn({amount:e.amount,assetId:e["asset-id"],receiver:e.receiver,closeAmount:e["close-amount"],closeTo:e["close-to"],sender:e.sender})}}class on extends Oe{constructor({nonParticipation:e,selectionParticipationKey:t,stateProofKey:r,voteFirstValid:n,voteKeyDilution:s,voteLastValid:i,voteParticipationKey:a}){super(),this.nonParticipation=e,this.selectionParticipationKey="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.stateProofKey="string"==typeof r?new Uint8Array(o.lW.from(r,"base64")):r,this.voteFirstValid=n,this.voteKeyDilution=s,this.voteLastValid=i,this.voteParticipationKey="string"==typeof a?new Uint8Array(o.lW.from(a,"base64")):a,this.attribute_map={nonParticipation:"non-participation",selectionParticipationKey:"selection-participation-key",stateProofKey:"state-proof-key",voteFirstValid:"vote-first-valid",voteKeyDilution:"vote-key-dilution",voteLastValid:"vote-last-valid",voteParticipationKey:"vote-participation-key"}}static from_obj_for_encoding(e){return new on({nonParticipation:e["non-participation"],selectionParticipationKey:e["selection-participation-key"],stateProofKey:e["state-proof-key"],voteFirstValid:e["vote-first-valid"],voteKeyDilution:e["vote-key-dilution"],voteLastValid:e["vote-last-valid"],voteParticipationKey:e["vote-participation-key"]})}}class an extends Oe{constructor({amount:e,receiver:t,closeAmount:r,closeRemainderTo:n}){super(),this.amount=e,this.receiver=t,this.closeAmount=r,this.closeRemainderTo=n,this.attribute_map={amount:"amount",receiver:"receiver",closeAmount:"close-amount",closeRemainderTo:"close-remainder-to"}}static from_obj_for_encoding(e){if(void 0===e.amount)throw new Error(`Response is missing required field 'amount': ${e}`);if(void 0===e.receiver)throw new Error(`Response is missing required field 'receiver': ${e}`);return new an({amount:e.amount,receiver:e.receiver,closeAmount:e["close-amount"],closeRemainderTo:e["close-remainder-to"]})}}class cn extends Oe{constructor({currentRound:e,transaction:t}){super(),this.currentRound=e,this.transaction=t,this.attribute_map={currentRound:"current-round",transaction:"transaction"}}static from_obj_for_encoding(e){if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);if(void 0===e.transaction)throw new Error(`Response is missing required field 'transaction': ${e}`);return new cn({currentRound:e["current-round"],transaction:en.from_obj_for_encoding(e.transaction)})}}class ln extends Oe{constructor({logicsig:e,multisig:t,sig:r}){super(),this.logicsig=e,this.multisig=t,this.sig="string"==typeof r?new Uint8Array(o.lW.from(r,"base64")):r,this.attribute_map={logicsig:"logicsig",multisig:"multisig",sig:"sig"}}static from_obj_for_encoding(e){return new ln({logicsig:void 0!==e.logicsig?un.from_obj_for_encoding(e.logicsig):void 0,multisig:void 0!==e.multisig?hn.from_obj_for_encoding(e.multisig):void 0,sig:e.sig})}}class un extends Oe{constructor({logic:e,args:t,multisigSignature:r,signature:n}){super(),this.logic="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.args=t,this.multisigSignature=r,this.signature="string"==typeof n?new Uint8Array(o.lW.from(n,"base64")):n,this.attribute_map={logic:"logic",args:"args",multisigSignature:"multisig-signature",signature:"signature"}}static from_obj_for_encoding(e){if(void 0===e.logic)throw new Error(`Response is missing required field 'logic': ${e}`);return new un({logic:e.logic,args:e.args,multisigSignature:void 0!==e["multisig-signature"]?hn.from_obj_for_encoding(e["multisig-signature"]):void 0,signature:e.signature})}}class hn extends Oe{constructor({subsignature:e,threshold:t,version:r}){super(),this.subsignature=e,this.threshold=t,this.version=r,this.attribute_map={subsignature:"subsignature",threshold:"threshold",version:"version"}}static from_obj_for_encoding(e){return new hn({subsignature:void 0!==e.subsignature?e.subsignature.map(dn.from_obj_for_encoding):void 0,threshold:e.threshold,version:e.version})}}class dn extends Oe{constructor({publicKey:e,signature:t}){super(),this.publicKey="string"==typeof e?new Uint8Array(o.lW.from(e,"base64")):e,this.signature="string"==typeof t?new Uint8Array(o.lW.from(t,"base64")):t,this.attribute_map={publicKey:"public-key",signature:"signature"}}static from_obj_for_encoding(e){return new dn({publicKey:e["public-key"],signature:e.signature})}}class pn extends Oe{constructor({message:e,stateProof:t,stateProofType:r}){super(),this.message=e,this.stateProof=t,this.stateProofType=r,this.attribute_map={message:"message",stateProof:"state-proof",stateProofType:"state-proof-type"}}static from_obj_for_encoding(e){return new pn({message:void 0!==e.message?Mr.from_obj_for_encoding(e.message):void 0,stateProof:void 0!==e["state-proof"]?Kr.from_obj_for_encoding(e["state-proof"]):void 0,stateProofType:e["state-proof-type"]})}}class fn extends Oe{constructor({currentRound:e,transactions:t,nextToken:r}){super(),this.currentRound=e,this.transactions=t,this.nextToken=r,this.attribute_map={currentRound:"current-round",transactions:"transactions",nextToken:"next-token"}}static from_obj_for_encoding(e){if(void 0===e["current-round"])throw new Error(`Response is missing required field 'current-round': ${e}`);if(!Array.isArray(e.transactions))throw new Error(`Response is missing required array field 'transactions': ${e}`);return new fn({currentRound:e["current-round"],transactions:e.transactions.map(en.from_obj_for_encoding),nextToken:e["next-token"]})}}class gn extends _e{constructor(e,t,r,n){super(e,t),this.index=r,this.index=r;const s=o.lW.from(n).toString("base64");this.query.name=encodeURI(`b64:${s}`)}path(){return`/v2/applications/${this.index}/box`}prepare(e){return Ur.from_obj_for_encoding(e)}}class mn extends _e{path(){return"/v2/accounts"}currencyGreaterThan(e){return this.query["currency-greater-than"]=e,this}currencyLessThan(e){return this.query["currency-less-than"]=e,this}limit(e){return this.query.limit=e,this}assetID(e){return this.query["asset-id"]=e,this}nextToken(e){return this.query.next=e,this}round(e){return this.query.round=e,this}authAddr(e){return this.query["auth-addr"]=e,this}applicationID(e){return this.query["application-id"]=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}exclude(e){return this.query.exclude=e,this}}class yn extends _e{path(){return"/v2/transactions"}notePrefix(e){return this.query["note-prefix"]=Gt(e),this}txType(e){return this.query["tx-type"]=e,this}sigType(e){return this.query["sig-type"]=e,this}txid(e){return this.query.txid=e,this}round(e){return this.query.round=e,this}minRound(e){return this.query["min-round"]=e,this}maxRound(e){return this.query["max-round"]=e,this}assetID(e){return this.query["asset-id"]=e,this}limit(e){return this.query.limit=e,this}beforeTime(e){return this.query["before-time"]=e,this}afterTime(e){return this.query["after-time"]=e,this}currencyGreaterThan(e){return this.query["currency-greater-than"]=e,this}currencyLessThan(e){return this.query["currency-less-than"]=e,this}addressRole(e){return this.query["address-role"]=e,this}address(e){return this.query.address=e,this}excludeCloseTo(e){return this.query["exclude-close-to"]=e,this}nextToken(e){return this.query.next=e,this}rekeyTo(e){return this.query["rekey-to"]=e,this}applicationID(e){return this.query["application-id"]=e,this}}class wn extends _e{path(){return"/v2/assets"}limit(e){return this.query.limit=e,this}creator(e){return this.query.creator=e,this}name(e){return this.query.name=e,this}unit(e){return this.query.unit=e,this}index(e){return this.query["asset-id"]=e,this}nextToken(e){return this.query.next=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}}class bn extends _e{path(){return"/v2/applications"}index(e){return this.query["application-id"]=e,this}creator(e){return this.query.creator=e,this}nextToken(e){return this.query.next=e,this}limit(e){return this.query.limit=e,this}includeAll(e=!0){return this.query["include-all"]=e,this}}class vn extends _e{constructor(e,t,r){super(e,t),this.index=r,this.index=r}path(){return`/v2/applications/${this.index}/boxes`}nextToken(e){return this.query.next=e,this}limit(e){return this.query.limit=e,this}prepare(e){return Or.from_obj_for_encoding(e)}}class _n extends ve{constructor(e,t="http://127.0.0.1",r=8080,n={}){super("X-Indexer-API-Token",e,t,r,n)}makeHealthCheck(){return new Ht(this.c,this.intDecoding)}lookupAssetBalances(e){return new Vt(this.c,this.intDecoding,e)}lookupAssetTransactions(e){return new Xt(this.c,this.intDecoding,e)}lookupAccountTransactions(e){return new Yt(this.c,this.intDecoding,e)}lookupBlock(e){return new Zt(this.c,this.intDecoding,e)}lookupTransactionByID(e){return new Jt(this.c,this.intDecoding,e)}lookupAccountByID(e){return new Qt(this.c,this.intDecoding,e)}lookupAccountAssets(e){return new er(this.c,this.intDecoding,e)}lookupAccountCreatedAssets(e){return new tr(this.c,this.intDecoding,e)}lookupAccountAppLocalStates(e){return new rr(this.c,this.intDecoding,e)}lookupAccountCreatedApplications(e){return new nr(this.c,this.intDecoding,e)}lookupAssetByID(e){return new sr(this.c,this.intDecoding,e)}lookupApplications(e){return new ir(this.c,this.intDecoding,e)}lookupApplicationLogs(e){return new or(this.c,this.intDecoding,e)}searchAccounts(){return new mn(this.c,this.intDecoding)}searchForTransactions(){return new yn(this.c,this.intDecoding)}searchForAssets(){return new wn(this.c,this.intDecoding)}searchForApplications(){return new bn(this.c,this.intDecoding)}searchForApplicationBoxes(e){return new vn(this.c,this.intDecoding,e)}lookupApplicationBoxByIDandName(e,t){return new gn(this.c,this.intDecoding,e,t)}}async function An(e,t,r){const n=await e.status().do();if(void 0===n)throw new Error("Unable to get node status");const s=n["last-round"]+1;let i=s;for(;i<s+r;){let r=!1;try{const n=await e.pendingTransactionInformation(t).do();if(n["confirmed-round"])return n;if(n["pool-error"])throw r=!0,new Error(`Transaction Rejected: ${n["pool-error"]}`)}catch(e){if(r)throw e}await e.statusAfterBlock(i).do(),i+=1}throw new Error(`Transaction not confirmed after ${r} rounds`)}function xn(e,t){let r=e.toString(16);r.length!==2*t&&(r=r.padStart(2*t,"0"));const n=new Uint8Array(r.length/2);for(let e=0,t=0;e<r.length/2;e++,t+=2)n[e]=parseInt(r.slice(t,t+2),16);return n}function En(e){let t=BigInt(0);const r=o.lW.from(e);for(let n=0;n<e.length;n++)t=BigInt(Number(r.readUIntBE(n,1)))+t*BigInt(256);return t}function Tn(){const e=d((t=c().box.secretKeyLength,c().randomBytes(t)));var t;return{addr:z(e.publicKey),sk:e.secretKey}}const kn=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"],Sn="failed to decode mnemonic",In="the mnemonic contains a word that is not in the wordlist";function Rn(e){const t=[];let r=0,n=0;return e.forEach((function(e){r|=e<<n,n+=8,n>=11&&(t.push(2047&r),r>>=11,n-=11)})),n&&t.push(r),t}function Bn(e){return e.map((e=>kn[e]))}function Pn(e){return Bn(Rn(h(e)))[0]}function Un(e){if(e.length!==v)throw new RangeError(`Seed length must be ${v}`);const t=Bn(Rn(e)),r=Pn(e);return`${t.join(" ")} ${r}`}function Cn(e){const t=e.split(" "),r=t.slice(0,24);for(const e of r)if(-1===kn.indexOf(e))throw new Error(In);const n=t[t.length-1];let s=function(e){const t=[];let r=0,n=0;return e.forEach((function(e){for(r|=e<<n,n+=11;n>=8;)t.push(255&r),r>>=8,n-=8})),n&&t.push(r),new Uint8Array(t)}(r.map((e=>kn.indexOf(e))));if(33!==s.length)throw new Error(Sn);if(0!==s[s.length-1])throw new Error(Sn);if(s=s.slice(0,s.length-1),Pn(s)===n)return s;throw new Error(Sn)}function On(e){const t=d(Cn(e));return{addr:z(t.publicKey),sk:t.secretKey}}function $n(e){return Un(e.slice(0,v))}function Dn(e){return Cn(e)}function Ln(e){return Un(e)}class jn{constructor(e){if(this.name="Transaction group",this.tag=o.lW.from("TG"),e.length>16){const t=`${e.length.toString()} transactions grouped together but max group size is ${16..toString()}`;throw Error(t)}this.txGroupHashes=e}get_obj_for_encoding(){return{txlist:this.txGroupHashes}}static from_obj_for_encoding(e){const t=Object.create(this.prototype);t.name="Transaction group",t.tag=o.lW.from("TG"),t.txGroupHashes=[];for(const r of e.txlist)t.txGroupHashes.push(o.lW.from(r));return t}toByte(){return J(this.get_obj_for_encoding())}}function qn(e){const t=[];for(const r of e){const e=le(r);t.push(e.rawTxID())}const r=new jn(t),n=r.toByte(),s=h(o.lW.from(R(r.tag,n)));return o.lW.from(s)}function Mn(e,t){const r=qn(e),n=[];for(const s of e){const e=le(s);t&&z(e.from.publicKey)!==t||(e.group=r,n.push(e))}return n}const Nn="Not enough multisig transactions to merge. Need at least two",Wn="Cannot merge txs. txIDs differ",Fn="Cannot merge txs. Auth addrs differ",Kn="Cannot merge txs. Multisig preimages differ",zn="Cannot merge txs. subsigs are mismatched.",Hn="Cannot mutate a multisig field as it would invalidate all existing signatures.";function Vn(e,{version:t,threshold:r,addrs:n}){const s=n.map((e=>F(e).publicKey)),i={v:t,thr:r,subsig:s.map((e=>({pk:o.lW.from(e)})))},a=e.get_obj_for_encoding(),c={msig:i,txn:a},l=H({version:t,threshold:r,pks:s});return z(a.snd)!==z(l)&&(c.sgnr=o.lW.from(l)),new Uint8Array(J(c))}function Gn(e,{rawSig:t,myPk:r},{version:n,threshold:s,pks:i}){const a=Q(Vn(e,{version:n,threshold:s,addrs:i.map((e=>z(e)))}));let c=!1;if(a.msig.subsig.forEach(((e,n)=>{m(e.pk,r)&&(c=!0,a.msig.subsig[n].s=t)})),!1===c)throw new Error("Key does not exist");const l=H({version:n,threshold:s,pks:i});return z(a.txn.snd)!==z(l)&&(a.sgnr=o.lW.from(l)),new Uint8Array(J(a))}class Yn extends se{addLease(){throw new Error(Hn)}addRekey(){throw new Error(Hn)}signTxn(e){throw new Error("Cannot sign a multisig transaction using `signTxn`. Use `partialSignTxn` instead.")}partialSignTxn({version:e,threshold:t,pks:r},n){const s=f(n).publicKey;return Gn(this,{rawSig:this.rawSignTxn(n),myPk:s},{version:e,threshold:t,pks:r})}partialSignWithMultisigSignature(e,t,r){if(!p(r.length))throw new Error("Cannot add multisig signature. Signature is not of the correct length.");return Gn(this,{rawSig:r,myPk:F(t).publicKey},e)}static from_obj_for_encoding(e){return super.from_obj_for_encoding(e)}}function Xn(e){if(e.length<2)throw new Error(Nn);const t=Q(e[0]),r=Yn.from_obj_for_encoding(t.txn).txID(),n=t.sgnr?z(t.sgnr):void 0,s=z(H({version:t.msig.v,threshold:t.msig.thr,pks:t.msig.subsig.map((e=>e.pk))})),i=t.msig.subsig.map((e=>({...e})));for(let a=1;a<e.length;a++){const c=Q(e[a]);if(Yn.from_obj_for_encoding(c.txn).txID()!==r)throw new Error(Wn);if(n!==(c.sgnr?z(c.sgnr):void 0))throw new Error(Fn);if(c.msig.subsig.length!==t.msig.subsig.length)throw new Error(Kn);if(s!==z(H({version:c.msig.v,threshold:c.msig.thr,pks:c.msig.subsig.map((e=>e.pk))})))throw new Error(Kn);c.msig.subsig.forEach(((e,t)=>{if(!e.s)return;const r=i[t];if(r.s&&0!==o.lW.compare(o.lW.from(e.s),o.lW.from(r.s)))throw new Error(zn);r.s=e.s}))}const a={msig:{v:t.msig.v,thr:t.msig.thr,subsig:i},txn:t.txn};return void 0!==n&&(a.sgnr=o.lW.from(F(n).publicKey)),new Uint8Array(J(a))}function Zn(e,t,r){const n=t.v,s=t.thr,i=t.subsig,o=i.map((e=>e.pk));if(t.subsig.length<s)return!1;let a;try{a=H({version:n,threshold:s,pks:o})}catch(e){return!1}if(!I(a,r))return!1;let c=0;for(const e of i)void 0!==e.s&&(c+=1);if(c<s)return!1;let l=0;for(const t of i)void 0!==t.s&&y(e,t.s,t.pk)&&(l+=1);return!(l<s)}function Jn(e,{version:t,threshold:r,addrs:n},s){const i=V({version:t,threshold:r,addrs:n});Object.prototype.hasOwnProperty.call(e,"from")||(e.from=i);const o=n.map((e=>F(e).publicKey));let a,c;return e instanceof se?(a=e,c=Yn.prototype.partialSignTxn.call(a,{version:t,threshold:r,pks:o},s)):(a=new Yn(e),c=a.partialSignTxn({version:t,threshold:r,pks:o},s)),{txID:a.txID().toString(),blob:c}}function Qn(e,{version:t,threshold:r,addrs:n},s){const i=n.map((e=>F(e).publicKey)),o=Q(e),a=Yn.from_obj_for_encoding(o.txn),c=a.partialSignTxn({version:t,threshold:r,pks:i},s);return{txID:a.txID().toString(),blob:Xn([e,c])}}function es(e,{version:t,threshold:r,addrs:n},s,i){const o=n.map((e=>F(e).publicKey)),a=Q(e),c=Yn.from_obj_for_encoding(a.txn),l=c.partialSignWithMultisigSignature({version:t,threshold:r,pks:o},s,i);return{txID:c.txID().toString(),blob:Xn([e,l])}}function ts({version:e,threshold:t,addrs:r}){return V({version:e,threshold:t,addrs:r})}function rs(e){if(!e||0===e.length)throw new Error("empty program");const t="\n".charCodeAt(0),r=" ".charCodeAt(0),n="~".charCodeAt(0);if(e.every((e=>e===t||(e=>r<=e&&e<=n)(e)))){const t=o.lW.from(e).toString();if(K(t))throw new Error("requesting program bytes, get Algorand address");if(o.lW.from(t,"base64").toString("base64")===t)throw new Error("program should not be b64 encoded");throw new Error("program bytes are all ASCII printable characters, not looking like Teal byte code")}}class ns{constructor(e,t){if(this.tag=o.lW.from("Program"),t&&(!Array.isArray(t)||!t.every((e=>e.constructor===Uint8Array||o.lW.isBuffer(e)))))throw new TypeError("Invalid arguments");let r;null!=t&&(r=t.map((e=>new Uint8Array(e)))),rs(e),this.logic=e,this.args=r,this.sig=void 0,this.msig=void 0}get_obj_for_encoding(){const e={l:this.logic};return this.args&&(e.arg=this.args),this.sig?e.sig=this.sig:this.msig&&(e.msig=this.msig),e}static from_obj_for_encoding(e){const t=new ns(e.l,e.arg);return t.sig=e.sig,t.msig=e.msig,t}verify(e){if(this.sig&&this.msig)return!1;try{rs(this.logic)}catch(e){return!1}const t=R(this.tag,this.logic);return this.sig||this.msig?this.sig?y(t,this.sig,e):Zn(t,this.msig,e):I(h(t),e)}address(){const e=h(R(this.tag,this.logic));return z(new Uint8Array(e))}sign(e,t){if(null==t)this.sig=this.signProgram(e);else{const r=t.addrs.map((e=>({pk:F(e).publicKey})));this.msig={v:t.version,thr:t.threshold,subsig:r};const[n,s]=this.singleSignMultisig(e,this.msig);this.msig.subsig[s].s=n}}appendToMultisig(e){if(void 0===this.msig)throw new Error("no multisig present");const[t,r]=this.singleSignMultisig(e,this.msig);this.msig.subsig[r].s=t}signProgram(e){return g(R(this.tag,this.logic),e)}singleSignMultisig(e,t){let r=-1;const n=f(e).publicKey;for(let e=0;e<t.subsig.length;e++){const{pk:s}=t.subsig[e];if(I(s,n)){r=e;break}}if(-1===r)throw new Error("invalid secret key");return[this.signProgram(e),r]}toByte(){return J(this.get_obj_for_encoding())}static fromByte(e){const t=Q(e);return ns.from_obj_for_encoding(t)}}class ss{constructor(e,t){this.lsig=new ns(e,t),this.sigkey=void 0}get_obj_for_encoding(){const e={lsig:this.lsig.get_obj_for_encoding()};return this.sigkey&&(e.sigkey=this.sigkey),e}static from_obj_for_encoding(e){const t=new ss(e.lsig.l,e.lsig.arg);return t.lsig=ns.from_obj_for_encoding(e.lsig),t.sigkey=e.sigkey,t}toByte(){return J(this.get_obj_for_encoding())}static fromByte(e){const t=Q(e);return ss.from_obj_for_encoding(t)}isDelegated(){return!(!this.lsig.sig&&!this.lsig.msig)}verify(){const e=this.address();return this.lsig.verify(F(e).publicKey)}address(){if(this.lsig.sig&&this.lsig.msig)throw new Error("LogicSig has too many signatures. At most one of sig or msig may be present");if(this.lsig.sig){if(!this.sigkey)throw new Error("Signing key for delegated account is missing");return z(this.sigkey)}return this.lsig.msig?z(H({version:this.lsig.msig.v,threshold:this.lsig.msig.thr,pks:this.lsig.msig.subsig.map((e=>e.pk))})):this.lsig.address()}signMultisig(e,t){this.lsig.sign(t,e)}appendToMultisig(e){this.lsig.appendToMultisig(e)}sign(e){this.lsig.sign(e),this.sigkey=f(e).publicKey}}function is(e,t){let r,n;return t instanceof ss?(r=t.lsig,n=F(t.address()).publicKey):(r=t,n=r.sig?e.from.publicKey:r.msig?H({version:r.msig.v,threshold:r.msig.thr,pks:r.msig.subsig.map((e=>e.pk))}):F(r.address()).publicKey),function(e,t,r){if(!t.verify(r))throw new Error("Logic signature verification failed. Ensure the program and signature are valid.");const n={lsig:t.get_obj_for_encoding(),txn:e.get_obj_for_encoding()};return m(r,e.from.publicKey)||(n.sgnr=o.lW.from(r)),{txID:e.txID().toString(),blob:J(n)}}(e,r,n)}function os(e,t){return is(le(e),t)}function as(e){return ns.fromByte(e)}const cs=o.lW.from("ProgData");function ls(e,t,r){const n=R(F(r).publicKey,t);return g(o.lW.from(R(cs,n)),e)}function us(e,t,r,n){const s=R(F(t).publicKey,e);return y(o.lW.from(R(cs,s)),r,n)}function hs(e,t,r){return ls(e,t,new ns(r).address())}let ds={},ps={};"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split("").forEach((function(e,t){ds[e]=t,ps[t]=e}));class fs{constructor({version:e,sources:t,names:r,mappings:n}){if(this.version=e,this.sources=t,this.names=r,this.mappings=n,3!==this.version)throw new Error(`Only version 3 is supported, got ${this.version}`);if(void 0===this.mappings)throw new Error("mapping undefined, cannot build source map without `mapping`");const s=this.mappings.split(";").map((e=>{const t=function(e){let t=[],r=0,n=0;for(let s=0;s<e.length;s+=1){let i=ds[e[s]];if(void 0===i)throw new Error("Invalid character ("+e[s]+")");const o=32&i;if(i&=31,n+=i<<r,o)r+=5;else{const e=1&n;n>>>=1,e?t.push(0===n?-2147483648:-n):t.push(n),n=r=0}}return t}(e);if(t.length>2)return t[2]}));this.pcToLine={},this.lineToPc={};let i=0;for(const[e,t]of s.entries())void 0!==t&&(i+=t),i in this.lineToPc||(this.lineToPc[i]=[]),this.lineToPc[i].push(e),this.pcToLine[e]=i}getLineForPc(e){return this.pcToLine[e]}getPcsForLine(e){return this.lineToPc[e]}}const gs=1380011588;function ms(e){return e.params["approval-program"]=o.lW.from(e.params["approval-program"].toString(),"base64"),e.params["clear-state-program"]=o.lW.from(e.params["clear-state-program"].toString(),"base64"),e}async function ys({client:e,txns:t,protocolVersion:r,latestTimestamp:n,round:s,sources:i}){const o=[],a=[],c=[],l=[],u=[];for(const e of t)e.txn.type===ee.appl&&(u.push(z(e.txn.from.publicKey)),e.txn.appAccounts&&u.push(...e.txn.appAccounts.map((e=>z(e.publicKey)))),e.txn.appForeignApps&&(c.push(...e.txn.appForeignApps),u.push(...e.txn.appForeignApps.map((e=>G(e))))),e.txn.appForeignAssets&&l.push(...e.txn.appForeignAssets),void 0===e.txn.appIndex||0===e.txn.appIndex?o.push(new Me({id:gs,params:new We({creator:z(e.txn.from.publicKey),approvalProgram:e.txn.appApprovalProgram,clearStateProgram:e.txn.appClearProgram,localStateSchema:new Fe({numUint:e.txn.appLocalInts,numByteSlice:e.txn.appLocalByteSlices}),globalStateSchema:new Fe({numUint:e.txn.appGlobalInts,numByteSlice:e.txn.appGlobalByteSlices})})})):(c.push(e.txn.appIndex),u.push(G(e.txn.appIndex))));const h=[];for(const t of[...new Set(l)])h.push(e.getAssetByID(t).do().then((e=>{u.push(e.params.creator)})));await Promise.all(h);const d=[];for(const t of[...new Set(c)])d.push(e.getApplicationByID(t).do().then((e=>{const t=ms(e);o.push(t),u.push(t.params.creator)})));await Promise.all(d);const p=[];for(const t of[...new Set(u)])p.push(e.accountInformation(t).do().then((e=>{"created-apps"in e&&(e["created-apps"]=e["created-apps"].map((e=>ms(e)))),a.push(e)})));return await Promise.all(p),new tt({txns:t.map((e=>({...e,txn:e.txn.get_obj_for_encoding()}))),accounts:a,apps:o,latestTimestamp:n,round:s,protocolVersion:r,sources:i})}class ws{constructor(e){this.type=0,this.bytes="",this.uint=0,this.type=e.type,this.bytes=e.bytes,this.uint=e.uint}toString(){return 1===this.type?`0x${o.lW.from(this.bytes,"base64").toString("hex")}`:this.uint.toString()}}class bs{constructor(e){this.error="",this.line=0,this.pc=0,this.scratch=[],this.stack=[],this.error=void 0===e.error?"":e.error,this.line=e.line,this.pc=e.pc,this.scratch=e.scratch,this.stack=e.stack.map((e=>new ws(e)))}}class vs{constructor(e){this.trace=[],null!=e&&(this.trace=e.map((e=>new bs(e))))}}function _s(e,t){return e.length>t&&t>0?`${e.slice(0,t)}...`:e}function As(e,t){if(0===t.length)return"";let r=null;for(let n=0;n<t.length;n++)(n>e.length||JSON.stringify(e[n])!==JSON.stringify(t[n]))&&(r=n);if(null==r)return"";const n=t[r];return n.bytes.length>0?`${r} = 0x${o.lW.from(n.bytes,"base64").toString("hex")}`:`${r} = ${n.uint.toString()}`}function xs(e,t){return`[${(t?e.reverse():e).map((e=>{switch(e.type){case 1:return`0x${o.lW.from(e.bytes,"base64").toString("hex")}`;case 2:return`${e.uint.toString()}`;default:return""}})).join(", ")}]`}class Es{constructor(e){this.disassembly=[],this.appCallMessages=[],this.localDeltas=[],this.globalDelta=[],this.cost=0,this.logicSigMessages=[],this.logicSigDisassembly=[],this.logs=[],this.appCallTrace=void 0,this.logicSigTrace=void 0,this.required=["disassembly"],this.optionals=["app-call-messages","local-deltas","global-delta","cost","logic-sig-messages","logic-sig-disassembly","logs"],this.traces=["app-call-trace","logic-sig-trace"],this.disassembly=e.disassembly,this.appCallMessages=e["app-call-messages"],this.localDeltas=e["local-deltas"],this.globalDelta=e["global-delta"],this.cost=e.cost,this.logicSigMessages=e["logic-sig-messages"],this.logicSigDisassembly=e["logic-sig-disassembly"],this.logs=e.logs,this.appCallTrace=new vs(e["app-call-trace"]),this.logicSigTrace=new vs(e["logic-sig-trace"])}appCallRejected(){return void 0!==this.appCallMessages&&this.appCallMessages.includes("REJECT")}logicSigRejected(){return void 0!==this.logicSigMessages&&this.logicSigMessages.includes("REJECT")}static trace(e,t,r){const n=r.maxValueWidth||30,s=[["pc#","ln#","source","scratch","stack"]];for(let i=0;i<e.trace.length;i++){const{line:o,error:a,pc:c,scratch:l,stack:u}=e.trace[i],h=void 0!==l?l:[],d=i>0&&void 0!==e.trace[i-1].scratch?e.trace[i-1].scratch:[],p=""===a?t[o]:`!! ${a} !!`;s.push([c.toString().padEnd(3," "),o.toString().padEnd(3," "),_s(p,n),_s(As(d,h),n),_s(xs(u,r.topOfStackFirst),n)])}const i=s.reduce(((e,t)=>{const r=new Array(s[0].length).fill(0);for(let n=0;n<e.length;n++)r[n]=t[n].length>e[n]?t[n].length:e[n];return r}),new Array(s[0].length).fill(0));return`${s.map((e=>e.map(((e,t)=>e.padEnd(i[t]+1," "))).join("|").trim())).join("\n")}\n`}appTrace(e){if(void 0===this.appCallTrace||!this.disassembly)return"";let t=e;return void 0===e&&(t={maxValueWidth:30,topOfStackFirst:!1}),Es.trace(this.appCallTrace,this.disassembly,t)}lsigTrace(e){if(void 0===this.logicSigTrace||void 0===this.logicSigDisassembly)return"";let t=e;return void 0===e&&(t={maxValueWidth:30,topOfStackFirst:!0}),Es.trace(this.logicSigTrace,this.logicSigDisassembly,t)}}class Ts{constructor(e){this.error="",this.protocolVersion="",this.txns=[],this.error=e.error,this.protocolVersion=e["protocol-version"],this.txns=e.txns.map((e=>new Es(e)))}}function ks(e,t,r,n,s,i,o){const a={from:e,to:t,amount:r,closeRemainderTo:n,note:s,suggestedParams:i,type:ee.pay,reKeyTo:o};return new se(a)}function Ss(e){return ks(e.from,e.to,e.amount,e.closeRemainderTo,e.note,e.suggestedParams,e.rekeyTo)}function Is(e,t,r,n,s,i,o,a,c,l=!1,u=void 0){const h={from:e,note:t,voteKey:r,selectionKey:n,voteFirst:s,voteLast:i,voteKeyDilution:o,suggestedParams:a,type:ee.keyreg,reKeyTo:c,nonParticipation:l,stateProofKey:u};return new se(h)}function Rs(e){return Is(e.from,e.note,e.voteKey,e.selectionKey,e.voteFirst,e.voteLast,e.voteKeyDilution,e.suggestedParams,e.rekeyTo,e.nonParticipation,e.stateProofKey)}function Bs(e,t,r,n,s,i,o,a,c,l,u,h,d,p,f){const g={from:e,note:t,suggestedParams:p,assetTotal:r,assetDecimals:n,assetDefaultFrozen:s,assetUnitName:l,assetName:u,assetURL:h,assetMetadataHash:d,assetManager:i,assetReserve:o,assetFreeze:a,assetClawback:c,type:ee.acfg,reKeyTo:f};return new se(g)}function Ps(e){return Bs(e.from,e.note,e.total,e.decimals,e.defaultFrozen,e.manager,e.reserve,e.freeze,e.clawback,e.unitName,e.assetName,e.assetURL,e.assetMetadataHash,e.suggestedParams,e.rekeyTo)}function Us(e,t,r,n,s,i,o,a,c=!0,l){if(c&&(void 0===n||void 0===s||void 0===i||void 0===o))throw Error("strict empty address checking was turned on, but at least one empty address was provided");const u={from:e,suggestedParams:a,assetIndex:r,assetManager:n,assetReserve:s,assetFreeze:i,assetClawback:o,type:ee.acfg,note:t,reKeyTo:l};return new se(u)}function Cs(e){return Us(e.from,e.note,e.assetIndex,e.manager,e.reserve,e.freeze,e.clawback,e.suggestedParams,e.strictEmptyAddressChecking,e.rekeyTo)}function Os(e,t,r,n,s){const i={from:e,suggestedParams:n,assetIndex:r,type:ee.acfg,note:t,reKeyTo:s};return new se(i)}function $s(e){return Os(e.from,e.note,e.assetIndex,e.suggestedParams,e.rekeyTo)}function Ds(e,t,r,n,s,i,o){const a={from:e,type:ee.afrz,freezeAccount:n,assetIndex:r,freezeState:s,note:t,suggestedParams:i,reKeyTo:o};return new se(a)}function Ls(e){return Ds(e.from,e.note,e.assetIndex,e.freezeTarget,e.freezeState,e.suggestedParams,e.rekeyTo)}function js(e,t,r,n,s,i,o,a,c){const l={type:ee.axfer,from:e,to:t,amount:s,suggestedParams:a,assetIndex:o,note:i,assetRevocationTarget:n,closeRemainderTo:r,reKeyTo:c};return new se(l)}function qs(e){return js(e.from,e.to,e.closeRemainderTo,e.revocationTarget,e.amount,e.note,e.assetIndex,e.suggestedParams,e.rekeyTo)}function Ms(e,t,r,n,s,i,o,a,c,l,u,h,d,p,f,g,m,y){const w={type:ee.appl,from:e,suggestedParams:t,appIndex:0,appOnComplete:r,appLocalInts:i,appLocalByteSlices:o,appGlobalInts:a,appGlobalByteSlices:c,appApprovalProgram:n,appClearProgram:s,appArgs:l,appAccounts:u,appForeignApps:h,appForeignAssets:d,boxes:y,note:p,lease:f,reKeyTo:g,extraPages:m};return new se(w)}function Ns(e){return Ms(e.from,e.suggestedParams,e.onComplete,e.approvalProgram,e.clearProgram,e.numLocalInts,e.numLocalByteSlices,e.numGlobalInts,e.numGlobalByteSlices,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.extraPages,e.boxes)}function Ws(e,t,r,n,s,i,o,a,c,l,u,h,d){const p={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appApprovalProgram:n,appOnComplete:te.UpdateApplicationOC,appClearProgram:s,appArgs:i,appAccounts:o,appForeignApps:a,appForeignAssets:c,boxes:d,note:l,lease:u,reKeyTo:h};return new se(p)}function Fs(e){return Ws(e.from,e.suggestedParams,e.appIndex,e.approvalProgram,e.clearProgram,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function Ks(e,t,r,n,s,i,o,a,c,l,u){const h={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appOnComplete:te.DeleteApplicationOC,appArgs:n,appAccounts:s,appForeignApps:i,appForeignAssets:o,boxes:u,note:a,lease:c,reKeyTo:l};return new se(h)}function zs(e){return Ks(e.from,e.suggestedParams,e.appIndex,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function Hs(e,t,r,n,s,i,o,a,c,l,u){const h={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appOnComplete:te.OptInOC,appArgs:n,appAccounts:s,appForeignApps:i,appForeignAssets:o,boxes:u,note:a,lease:c,reKeyTo:l};return new se(h)}function Vs(e){return Hs(e.from,e.suggestedParams,e.appIndex,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function Gs(e,t,r,n,s,i,o,a,c,l,u){const h={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appOnComplete:te.CloseOutOC,appArgs:n,appAccounts:s,appForeignApps:i,appForeignAssets:o,boxes:u,note:a,lease:c,reKeyTo:l};return new se(h)}function Ys(e){return Gs(e.from,e.suggestedParams,e.appIndex,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function Xs(e,t,r,n,s,i,o,a,c,l,u){const h={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appOnComplete:te.ClearStateOC,appArgs:n,appAccounts:s,appForeignApps:i,appForeignAssets:o,boxes:u,note:a,lease:c,reKeyTo:l};return new se(h)}function Zs(e){return Xs(e.from,e.suggestedParams,e.appIndex,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function Js(e,t,r,n,s,i,o,a,c,l,u){const h={type:ee.appl,from:e,suggestedParams:t,appIndex:r,appOnComplete:te.NoOpOC,appArgs:n,appAccounts:s,appForeignApps:i,appForeignAssets:o,boxes:u,note:a,lease:c,reKeyTo:l};return new se(h)}function Qs(e){return Js(e.from,e.suggestedParams,e.appIndex,e.appArgs,e.accounts,e.foreignApps,e.foreignAssets,e.note,e.lease,e.rekeyTo,e.boxes)}function ei(e){const t={type:ee.appl,from:e.from,suggestedParams:e.suggestedParams,appIndex:e.appIndex,appOnComplete:e.onComplete,appLocalInts:e.numLocalInts,appLocalByteSlices:e.numLocalByteSlices,appGlobalInts:e.numGlobalInts,appGlobalByteSlices:e.numGlobalByteSlices,appApprovalProgram:e.approvalProgram,appClearProgram:e.clearProgram,appArgs:e.appArgs,appAccounts:e.accounts,appForeignApps:e.foreignApps,appForeignAssets:e.foreignAssets,boxes:e.boxes,note:e.note,lease:e.lease,reKeyTo:e.rekeyTo,extraPages:e.extraPages};return new se(t)}function ti(e){return(t,r)=>{const n=[];for(const s of r)n.push(t[s].signTxn(e.sk));return Promise.resolve(n)}}function ri(e){return(t,r)=>{const n=[];for(const s of r){const{blob:r}=is(t[s],e);n.push(r)}return Promise.resolve(n)}}function ni(e,t){return(r,n)=>{const s=[];for(const i of n){const n=r[i],o=[];for(const r of t){const{blob:t}=Jn(n,e,r);o.push(t)}s.push(Xn(o))}return Promise.resolve(s)}}function si(){return(e,t)=>{const r=[];for(const n of t)r.push(ie(e[n]));return Promise.resolve(r)}}function ii(e){return"object"==typeof e&&2===Object.keys(e).length&&"object"==typeof e.txn&&"function"==typeof e.signer}const oi=65535,ai=32,ci=1,li=1,ui=2,hi=/^([a-z\d[\](),]+)\[(0|[1-9][\d]*)]$/,di=/^ufixed([1-9][\d]*)x([1-9][\d]*)$/;class pi{static from(e){if(e.endsWith("[]")){const t=pi.from(e.slice(0,e.length-2));return new _i(t)}if(e.endsWith("]")){const t=e.match(hi);if(3!==t.length)throw new Error(`malformed static array string: ${e}`);const r=t[2],n=parseInt(r,10);if(n>oi)throw new Error(`array length exceeds limit ${oi}`);const s=pi.from(t[1]);return new vi(s,n)}if(e.startsWith("uint")){const t=e=>[...e].every((e=>"0123456789".includes(e))),r=e.slice(4,e.length);if(!t(r))throw new Error(`malformed uint string: ${r}`);const n=parseInt(r,10);if(n>oi)throw new Error(`malformed uint string: ${n}`);return new fi(n)}if("byte"===e)return new wi;if(e.startsWith("ufixed")){const t=e.match(di);if(3!==t.length)throw new Error(`malformed ufixed type: ${e}`);const r=parseInt(t[1],10),n=parseInt(t[2],10);return new gi(r,n)}if("bool"===e)return new yi;if("address"===e)return new mi;if("string"===e)return new bi;if(e.length>=2&&"("===e[0]&&")"===e[e.length-1]){const t=Ai.parseTupleContent(e.slice(1,e.length-1)),r=[];for(let e=0;e<t.length;e++){const n=pi.from(t[e]);r.push(n)}return new Ai(r)}throw new Error(`cannot convert a string ${e} to an ABI type`)}}class fi extends pi{constructor(e){if(super(),e%8!=0||e<8||e>512)throw new Error(`unsupported uint type bitSize: ${e}`);this.bitSize=e}toString(){return`uint${this.bitSize}`}equals(e){return e instanceof fi&&this.bitSize===e.bitSize}isDynamic(){return!1}byteLen(){return this.bitSize/8}encode(e){if("bigint"!=typeof e&&"number"!=typeof e)throw new Error(`Cannot encode value as uint${this.bitSize}: ${e}`);if(e>=BigInt(2**this.bitSize)||e<BigInt(0))throw new Error(`${e} is not a non-negative int or too big to fit in size uint${this.bitSize}`);if("number"==typeof e&&!Number.isSafeInteger(e))throw new Error(`${e} should be converted into a BigInt before it is encoded`);return xn(e,this.bitSize/8)}decode(e){if(e.length!==this.bitSize/8)throw new Error(`byte string must correspond to a uint${this.bitSize}`);return En(e)}}class gi extends pi{constructor(e,t){if(super(),e%8!=0||e<8||e>512)throw new Error(`unsupported ufixed type bitSize: ${e}`);if(t>160||t<1)throw new Error(`unsupported ufixed type precision: ${t}`);this.bitSize=e,this.precision=t}toString(){return`ufixed${this.bitSize}x${this.precision}`}equals(e){return e instanceof gi&&this.bitSize===e.bitSize&&this.precision===e.precision}isDynamic(){return!1}byteLen(){return this.bitSize/8}encode(e){if("bigint"!=typeof e&&"number"!=typeof e)throw new Error(`Cannot encode value as ${this.toString()}: ${e}`);if(e>=BigInt(2**this.bitSize)||e<BigInt(0))throw new Error(`${e} is not a non-negative int or too big to fit in size ${this.toString()}`);if("number"==typeof e&&!Number.isSafeInteger(e))throw new Error(`${e} should be converted into a BigInt before it is encoded`);return xn(e,this.bitSize/8)}decode(e){if(e.length!==this.bitSize/8)throw new Error(`byte string must correspond to a ${this.toString()}`);return En(e)}}class mi extends pi{toString(){return"address"}equals(e){return e instanceof mi}isDynamic(){return!1}byteLen(){return ai}encode(e){if("string"!=typeof e&&!(e instanceof Uint8Array))throw new Error(`Cannot encode value as ${this.toString()}: ${e}`);if("string"==typeof e)return F(e).publicKey;if(32!==e.byteLength)throw new Error("byte string must be 32 bytes long for an address");return e}decode(e){if(32!==e.byteLength)throw new Error("byte string must be 32 bytes long for an address");return z(e)}}class yi extends pi{toString(){return"bool"}equals(e){return e instanceof yi}isDynamic(){return!1}byteLen(){return li}encode(e){if("boolean"!=typeof e)throw new Error(`Cannot encode value as bool: ${e}`);return e?new Uint8Array([128]):new Uint8Array([0])}decode(e){if(1!==e.byteLength)throw new Error("bool string must be 1 byte long");const t=e[0];if(128===t)return!0;if(0===t)return!1;throw new Error("boolean could not be decoded from the byte string")}}class wi extends pi{toString(){return"byte"}equals(e){return e instanceof wi}isDynamic(){return!1}byteLen(){return ci}encode(e){if("number"!=typeof e&&"bigint"!=typeof e)throw new Error(`Cannot encode value as byte: ${e}`);if("bigint"==typeof e&&(e=Number(e)),e<0||e>255)throw new Error(`${e} cannot be encoded into a byte`);return new Uint8Array([e])}decode(e){if(1!==e.byteLength)throw new Error("byte string must be 1 byte long");return e[0]}}class bi extends pi{toString(){return"string"}equals(e){return e instanceof bi}isDynamic(){return!0}byteLen(){throw new Error(`${this.toString()} is a dynamic type`)}encode(e){if("string"!=typeof e&&!(e instanceof Uint8Array))throw new Error(`Cannot encode value as string: ${e}`);const t=o.lW.from(e),r=xn(t.length,ui),n=new Uint8Array(t.length+ui);return n.set(r),n.set(t,ui),n}decode(e){if(e.length<ui)throw new Error(`byte string is too short to be decoded. Actual length is ${e.length}, but expected at least ${ui}`);const t=o.lW.from(e).readUIntBE(0,ui),r=e.slice(ui,e.length);if(t!==r.length)throw new Error(`string length bytes do not match the actual length of string. Expected ${t}, got ${r.length}`);return o.lW.from(r).toString("utf-8")}}class vi extends pi{constructor(e,t){if(super(),t<0)throw new Error(`static array must have a non negative length: ${t}`);this.childType=e,this.staticLength=t}toString(){return`${this.childType.toString()}[${this.staticLength}]`}equals(e){return e instanceof vi&&this.staticLength===e.staticLength&&this.childType.equals(e.childType)}isDynamic(){return this.childType.isDynamic()}byteLen(){return this.childType.constructor===yi?Math.ceil(this.staticLength/8):this.staticLength*this.childType.byteLen()}encode(e){if(!(Array.isArray(e)||e instanceof Uint8Array))throw new Error(`Cannot encode value as ${this.toString()}: ${e}`);if(e.length!==this.staticLength)throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${e.length}`);return this.toABITupleType().encode(e)}decode(e){return this.toABITupleType().decode(e)}toABITupleType(){return new Ai(Array(this.staticLength).fill(this.childType))}}class _i extends pi{constructor(e){super(),this.childType=e}toString(){return`${this.childType.toString()}[]`}equals(e){return e instanceof _i&&this.childType.equals(e.childType)}isDynamic(){return!0}byteLen(){throw new Error(`${this.toString()} is a dynamic type`)}encode(e){if(!(Array.isArray(e)||e instanceof Uint8Array))throw new Error(`Cannot encode value as ${this.toString()}: ${e}`);const t=this.toABITupleType(e.length),r=t.encode(e);return R(xn(t.childTypes.length,ui),r)}decode(e){const t=o.lW.from(e).readUIntBE(0,ui);return this.toABITupleType(t).decode(e.slice(ui,e.length))}toABITupleType(e){return new Ai(Array(e).fill(this.childType))}}class Ai extends pi{constructor(e){if(super(),e.length>=oi)throw new Error("tuple type child type number larger than maximum uint16 error");this.childTypes=e}toString(){const e=[];for(let t=0;t<this.childTypes.length;t++)e[t]=this.childTypes[t].toString();return`(${e.join(",")})`}equals(e){return e instanceof Ai&&this.childTypes.length===e.childTypes.length&&this.childTypes.every(((t,r)=>t.equals(e.childTypes[r])))}isDynamic(){return this.childTypes.some((e=>e.isDynamic()))}byteLen(){let e=0;for(let t=0;t<this.childTypes.length;t++)if(this.childTypes[t].constructor===yi){const r=Ei(this.childTypes,t,1),n=r+1;t+=r,e+=Math.trunc((n+7)/8)}else e+=this.childTypes[t].byteLen();return e}encode(e){if(!(Array.isArray(e)||e instanceof Uint8Array))throw new Error(`Cannot encode value as ${this.toString()}: ${e}`);const t=Array.from(e);if(e.length>oi)throw new Error("length of tuple array should not exceed a uint16");const r=this.childTypes,n=[],s=[],i=new Map;let o=0;for(;o<r.length;){const e=r[o];if(e.isDynamic())i.set(n.length,!0),n.push(new Uint8Array([0,0])),s.push(e.encode(t[o]));else{if(e.constructor===yi){const e=Ei(r,o,-1);let s=Ei(r,o,1);if(e%8!=0)throw new Error("expected before index should have number of bool mod 8 equal 0");s=Math.min(7,s);const i=xi(t.slice(o,o+s+1));n.push(xn(i,1)),o+=s}else{const r=e.encode(t[o]);n.push(r)}i.set(o,!1),s.push(new Uint8Array)}o+=1}let a=0;for(const e of n)a+=e.length;let c=0;for(let e=0;e<n.length;e++){if(i.get(e)){const t=a+c;if(t>oi)throw new Error(`byte length of ${t} should not exceed a uint16`);n[e]=xn(t,ui)}c+=s[e].length}return R(...n,...s)}decode(e){const t=this.childTypes,r=[],n=[];let s=0,i=0;const a=o.lW.from(e);for(;s<t.length;){const o=t[s];if(o.isDynamic()){if(e.slice(i,e.length).length<ui)throw new Error("dynamic type in tuple is too short to be decoded");const t=a.readUIntBE(i,ui);if(r.length>0&&(r[r.length-1].right=t,t<r[r.length-1].left))throw new Error("dynamic index segment miscalculation: left is greater than right index");const s={left:t,right:-1};r.push(s),n.push(null),i+=ui}else if(o.constructor===yi){const t=Ei(this.childTypes,s,-1);let r=Ei(this.childTypes,s,1);if(t%8!=0)throw new Error("expected before bool number mod 8 === 0");r=Math.min(7,r);for(let t=0;t<=r;t++){const r=128>>t;(e[i]&r)>0?n.push(new Uint8Array([128])):n.push(new Uint8Array([0]))}s+=r,i+=1}else{const t=o.byteLen();n.push(e.slice(i,i+t)),i+=t}if(s!==t.length-1&&i>=e.length)throw new Error("input byte not enough to decode");s+=1}if(r.length>0&&(r[r.length-1].right=e.length,i=e.length),i<e.length)throw new Error("input byte not fully consumed");for(let e=0;e<r.length;e++){const t=r[e];if(t.left>t.right)throw new Error("dynamic segment should display a [l, r] space with l <= r");if(e!==r.length-1&&t.right!==r[e+1].left)throw new Error("dynamic segment should be consecutive")}let c=0;for(let s=0;s<t.length;s++)t[s].isDynamic()&&(n[s]=e.slice(r[c].left,r[c].right),c+=1);const l=[];for(let e=0;e<t.length;e++){const r=t[e].decode(n[e]);l.push(r)}return l}static parseTupleContent(e){if(0===e.length)return[];if(e.endsWith(",")||e.startsWith(","))throw new Error("tuple string should not start with comma");if(e.includes(",,"))throw new Error("tuple string should not have consecutive commas");const t=[];let r=0,n="";for(const s of e)n+=s,"("===s?r+=1:")"===s?r-=1:","===s&&0===r&&(t.push(n.slice(0,n.length-1)),n="");if(0!==n.length&&t.push(n),0!==r)throw new Error("tuple string has mismatched parentheses");return t}}function xi(e){let t=0;if(e.length>8)throw new Error("value list passed in should be no greater than length 8");for(let r=0;r<e.length;r++){const n=e[r];if("boolean"!=typeof n)throw new Error("non-boolean values cannot be compressed into a byte");n&&(t|=1<<7-r)}return t}function Ei(e,t,r){let n=0;for(;;){const s=t+r*n;if(e[s].constructor!==yi){n-=1;break}if(s!==e.length-1&&1===r)n+=1;else{if(!(s>0&&-1===r))break;n+=1}}return n}var Ti,ki;function Si(e){return e===Ti.any||e===Ti.pay||e===Ti.keyreg||e===Ti.acfg||e===Ti.axfer||e===Ti.afrz||e===Ti.appl}function Ii(e,t){return e===Ti.any||t.type&&t.type.toString()===e.toString()}function Ri(e){return e===ki.account||e===ki.application||e===ki.asset}!function(e){e.any="txn",e.pay="pay",e.keyreg="keyreg",e.acfg="acfg",e.axfer="axfer",e.afrz="afrz",e.appl="appl"}(Ti||(Ti={})),function(e){e.account="account",e.application="application",e.asset="asset"}(ki||(ki={}));class Bi{constructor(e){if("string"!=typeof e.name||"object"!=typeof e.returns||!Array.isArray(e.args))throw new Error("Invalid ABIMethod parameters");this.name=e.name,this.description=e.desc,this.args=e.args.map((({type:e,name:t,desc:r})=>Si(e)||Ri(e)?{type:e,name:t,description:r}:{type:pi.from(e),name:t,description:r})),this.returns={type:"void"===e.returns.type?e.returns.type:pi.from(e.returns.type),description:e.returns.desc}}getSignature(){const e=this.args.map((e=>e.type.toString())).join(","),t=this.returns.type.toString();return`${this.name}(${e})${t}`}getSelector(){const e=h(this.getSignature());return new Uint8Array(e.slice(0,4))}txnCount(){let e=1;for(const t of this.args)"string"==typeof t.type&&Si(t.type)&&(e+=1);return e}toJSON(){return{name:this.name,desc:this.description,args:this.args.map((({type:e,name:t,description:r})=>({type:e.toString(),name:t,desc:r}))),returns:{type:this.returns.type.toString(),desc:this.returns.description}}}static fromSignature(e){const{name:t,args:r,returns:n}=function(e){const t=e.indexOf("(");if(-1===t)throw new Error(`Invalid method signature: ${e}`);let r=-1,n=0;for(let s=t;s<e.length;s++){const t=e[s];if("("===t)n+=1;else if(")"===t){if(0===n)break;if(n-=1,0===n){r=s;break}}}if(-1===r)throw new Error(`Invalid method signature: ${e}`);return{name:e.slice(0,t),args:Ai.parseTupleContent(e.slice(t+1,r)),returns:e.slice(r+1)}}(e);return new Bi({name:t,args:r.map((e=>({type:e}))),returns:{type:n}})}}function Pi(e,t){if(null===e||!Array.isArray(e)||!e.every((e=>e instanceof Bi)))throw new Error("Methods list provided is null or not the correct type");const r=e.filter((e=>e.name===t));if(r.length>1)throw new Error(`found ${r.length} methods with the same name ${r.map((e=>e.getSignature())).join(",")}`);if(0===r.length)throw new Error(`found 0 methods with the name ${t}`);return r[0]}class Ui{constructor(e){if("string"!=typeof e.name||!Array.isArray(e.methods)||e.networks&&"object"!=typeof e.networks)throw new Error("Invalid ABIContract parameters");this.name=e.name,this.description=e.desc,this.networks=e.networks?{...e.networks}:{},this.methods=e.methods.map((e=>new Bi(e)))}toJSON(){return{name:this.name,desc:this.description,networks:this.networks,methods:this.methods.map((e=>e.toJSON()))}}getMethodByName(e){return Pi(this.methods,e)}}class Ci{constructor(e){if("string"!=typeof e.name||!Array.isArray(e.methods))throw new Error("Invalid ABIInterface parameters");this.name=e.name,this.description=e.desc,this.methods=e.methods.map((e=>new Bi(e)))}toJSON(){return{name:this.name,desc:this.description,methods:this.methods.map((e=>e.toJSON()))}}getMethodByName(e){return Pi(this.methods,e)}}const Oi=o.lW.from([21,31,124,117]);var $i;function Di(e,t,r){if(null!=r&&e===r)return 0;const n=null==r?0:1;for(let r=0;r<t.length;r++)if(e===t[r])return r+n;return t.push(e),t.length-1+n}!function(e){e[e.BUILDING=0]="BUILDING",e[e.BUILT=1]="BUILT",e[e.SIGNED=2]="SIGNED",e[e.SUBMITTED=3]="SUBMITTED",e[e.COMMITTED=4]="COMMITTED"}($i||($i={}));class Li{constructor(){this.status=$i.BUILDING,this.transactions=[],this.methodCalls=new Map,this.signedTxns=[],this.txIDs=[]}getStatus(){return this.status}count(){return this.transactions.length}clone(){const e=new Li;return e.transactions=this.transactions.map((({txn:e,signer:t})=>({txn:se.from_obj_for_encoding({...e.get_obj_for_encoding(),grp:void 0}),signer:t}))),e.methodCalls=new Map(this.methodCalls),e}addTransaction(e){if(this.status!==$i.BUILDING)throw new Error("Cannot add transactions when composer status is not BUILDING");if(this.transactions.length===Li.MAX_GROUP_SIZE)throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${Li.MAX_GROUP_SIZE}`);if(e.txn.group&&e.txn.group.some((e=>0!==e)))throw new Error("Cannot add a transaction with nonzero group ID");this.transactions.push(e)}addMethodCall({appID:e,method:t,methodArgs:r,sender:n,suggestedParams:s,onComplete:i,approvalProgram:o,clearProgram:a,numGlobalInts:c,numGlobalByteSlices:l,numLocalInts:u,numLocalByteSlices:h,extraPages:d,appAccounts:p,appForeignApps:f,appForeignAssets:g,boxes:m,note:y,lease:w,rekeyTo:b,signer:v}){if(this.status!==$i.BUILDING)throw new Error("Cannot add transactions when composer status is not BUILDING");if(this.transactions.length+t.txnCount()>Li.MAX_GROUP_SIZE)throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${Li.MAX_GROUP_SIZE}`);if(0===e){if(null==o||null==a||null==c||null==l||null==u||null==h)throw new Error("One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices")}else if(i===te.UpdateApplicationOC){if(null==o||null==a)throw new Error("One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram");if(null!=c||null!=l||null!=u||null!=h||null!=d)throw new Error("One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages")}else if(null!=o||null!=a||null!=c||null!=l||null!=u||null!=h||null!=d)throw new Error("One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages");if(null==r&&(r=[]),r.length!==t.args.length)throw new Error(`Incorrect number of method arguments. Expected ${t.args.length}, got ${r.length}`);let _=[],A=[];const x=[],E=[],T=[],k=new Map,S=m||[];for(let e=0;e<r.length;e++){let n=t.args[e].type;const s=r[e];if(Si(n)){if(!ii(s)||!Ii(n,s.txn))throw new Error(`Expected ${n} transaction for argument at index ${e}`);if(s.txn.group&&s.txn.group.some((e=>0!==e)))throw new Error("Cannot add a transaction with nonzero group ID");x.push(s)}else{if(ii(s))throw new Error(`Expected non-transaction value for argument at index ${e}`);if(Ri(n)&&(k.set(E.length,_.length),E.push(n),T.push(s),n=new fi(8)),"string"==typeof n)throw new Error(`Unknown ABI type: ${n}`);_.push(n),A.push(s)}}const I=[],R=null==p?[]:p.slice(),B=null==f?[]:f.slice(),P=null==g?[]:g.slice();for(let t=0;t<E.length;t++){const r=E[t],s=T[t];let i=0;switch(r){case ki.account:{const e=new mi;i=Di(e.decode(e.encode(s)),R,n);break}case ki.application:{const t=new fi(64),r=t.decode(t.encode(s));if(r>Number.MAX_SAFE_INTEGER)throw new Error(`Expected safe integer for application value, got ${r}`);i=Di(Number(r),B,e);break}case ki.asset:{const e=new fi(64),t=e.decode(e.encode(s));if(t>Number.MAX_SAFE_INTEGER)throw new Error(`Expected safe integer for asset value, got ${t}`);i=Di(Number(t),P);break}default:throw new Error(`Unknown reference type: ${r}`)}I.push(i)}for(let e=0;e<I.length;e++)A[k.get(e)]=I[e];if(_.length>15){const e=_.slice(14),t=A.slice(14);_=_.slice(0,14),A=A.slice(0,14),_.push(new Ai(e)),A.push(t)}const U=[t.getSelector()];for(let e=0;e<_.length;e++)U.push(_[e].encode(A[e]));const C={txn:ei({from:n,appIndex:e,appArgs:U,accounts:R,foreignApps:B,foreignAssets:P,boxes:S,onComplete:null==i?te.NoOpOC:i,approvalProgram:o,clearProgram:a,numGlobalInts:c,numGlobalByteSlices:l,numLocalInts:u,numLocalByteSlices:h,extraPages:d,lease:w,note:y,rekeyTo:b,suggestedParams:s}),signer:v};this.transactions.push(...x,C),this.methodCalls.set(this.transactions.length-1,t)}buildGroup(){if(this.status===$i.BUILDING){if(0===this.transactions.length)throw new Error("Cannot build a group with 0 transactions");this.transactions.length>1&&Mn(this.transactions.map((e=>e.txn))),this.status=$i.BUILT}return this.transactions}async gatherSignatures(){if(this.status>=$i.SIGNED)return this.signedTxns;const e=this.buildGroup(),t=e.map((e=>e.txn)),r=new Map;for(let t=0;t<e.length;t++){const{signer:n}=e[t];r.has(n)||r.set(n,[]),r.get(n).push(t)}const n=Array.from(r),s=await Promise.all(n.map((([e,r])=>e(t,r)))),i=e.map((()=>null));for(let e=0;e<n.length;e++){const t=n[e][1],r=s[e];for(let e=0;e<t.length;e++)i[t[e]]=r[e]}if(!i.every((e=>null!=e)))throw new Error(`Missing signatures. Got ${i}`);const o=i.map(((e,t)=>{try{return ce(e).txn.txID()}catch(e){throw new Error(`Cannot decode signed transaction at index ${t}. ${e}`)}}));return this.signedTxns=i,this.txIDs=o,this.status=$i.SIGNED,i}async submit(e){if(this.status>$i.SUBMITTED)throw new Error("Transaction group cannot be resubmitted");const t=await this.gatherSignatures();return await e.sendRawTransaction(t).do(),this.status=$i.SUBMITTED,this.txIDs}async simulate(e){if(this.status>$i.SUBMITTED)throw new Error("Simulated Transaction group has already been submitted to the network");const t=await this.gatherSignatures(),r=await e.simulateRawTransactions(t).do(),n=[];for(const[e,t]of this.methodCalls){const s=this.txIDs[e],i=r.txnGroups[0].txnResults[e].txnResult,o={txID:s,rawReturnValue:new Uint8Array,method:t};n.push(Li.parseMethodResponse(t,o,i.get_obj_for_encoding()))}return{methodResults:n,simulateResponse:r}}async execute(e,t){if(this.status===$i.COMMITTED)throw new Error("Transaction group has already been executed successfully");const r=await this.submit(e);this.status=$i.SUBMITTED;const n=this.transactions.findIndex(((e,t)=>this.methodCalls.has(t))),s=-1===n?0:n,i=await An(e,r[s],t);this.status=$i.COMMITTED;const o=i["confirmed-round"],a=[];for(const[t,s]of this.methodCalls){const o=r[t];let c={txID:o,rawReturnValue:new Uint8Array,method:s};try{const r=t===n?i:await e.pendingTransactionInformation(o).do();c=Li.parseMethodResponse(s,c,r)}catch(e){c.decodeError=e}a.push(c)}return{confirmedRound:o,txIDs:r,methodResults:a}}static parseMethodResponse(e,t,r){const n=t;try{if(n.txInfo=r,"void"!==e.returns.type){const s=r.logs||[];if(0===s.length)throw new Error("App call transaction did not log a return value");const i=o.lW.from(s[s.length-1],"base64");if(i.byteLength<4||!i.slice(0,4).equals(Oi))throw new Error("App call transaction did not log a return value");n.rawReturnValue=new Uint8Array(i.slice(4)),n.returnValue=e.returns.type.decode(t.rawReturnValue)}}catch(e){n.decodeError=e}return n}}Li.MAX_GROUP_SIZE=16;const ji=o.lW.from([77,88]),qi="The transaction sender address and multisig preimage do not match.";function Mi(e,t){if(void 0===e.from){const r=f(t);e.from=z(r.publicKey)}const r=le(e);return{txID:r.txID().toString(),blob:r.signTxn(t)}}function Ni(e,t){return new ue(e).signBid(t)}function Wi(e,t){return g(o.lW.from(R(ji,e)),t)}function Fi(e,t,r){return y(o.lW.from(R(ji,e)),t,F(r).publicKey)}function Ki(e){return new Uint8Array(J(e))}function zi(e){return Q(e)}const Hi=new Error(qi),Vi=new Error(de),Gi=i},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,i=a(e),o=i[0],c=i[1],l=new s(function(e,t,r){return 3*(t+r)/4-r}(0,o,c)),u=0,h=c>0?o-4:o;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;return 2===c&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[u++]=255&t),1===c&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t),l},t.fromByteArray=function(e){for(var t,n=e.length,s=n%3,i=[],o=16383,a=0,l=n-s;a<l;a+=o)i.push(c(e,a,a+o>l?l:a+o));return 1===s?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),i.join("")};for(var r=[],n=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)r[o]=i[o],n[i.charCodeAt(o)]=o;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,n){for(var s,i,o=[],a=t;a<n;a+=3)s=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(i=s)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return o.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},4431:function(e,t,r){var n;!function(s){"use strict";var i,o=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,a=Math.ceil,c=Math.floor,l="[BigNumber Error] ",u=l+"Number primitive has more than 15 significant digits: ",h=1e14,d=14,p=9007199254740991,f=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],g=1e7,m=1e9;function y(e){var t=0|e;return e>0||e===t?t:t-1}function w(e){for(var t,r,n=1,s=e.length,i=e[0]+"";n<s;){for(t=e[n++]+"",r=d-t.length;r--;t="0"+t);i+=t}for(s=i.length;48===i.charCodeAt(--s););return i.slice(0,s+1||1)}function b(e,t){var r,n,s=e.c,i=t.c,o=e.s,a=t.s,c=e.e,l=t.e;if(!o||!a)return null;if(r=s&&!s[0],n=i&&!i[0],r||n)return r?n?0:-a:o;if(o!=a)return o;if(r=o<0,n=c==l,!s||!i)return n?0:!s^r?1:-1;if(!n)return c>l^r?1:-1;for(a=(c=s.length)<(l=i.length)?c:l,o=0;o<a;o++)if(s[o]!=i[o])return s[o]>i[o]^r?1:-1;return c==l?0:c>l^r?1:-1}function v(e,t,r,n){if(e<t||e>r||e!==c(e))throw Error(l+(n||"Argument")+("number"==typeof e?e<t||e>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function _(e){var t=e.c.length-1;return y(e.e/d)==t&&e.c[t]%2!=0}function A(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function x(e,t,r){var n,s;if(t<0){for(s=r+".";++t;s+=r);e=s+e}else if(++t>(n=e.length)){for(s=r,t-=n;--t;s+=r);e+=s}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}i=function e(t){var r,n,s,i,E,T,k,S,I,R,B=K.prototype={constructor:K,toString:null,valueOf:null},P=new K(1),U=20,C=4,O=-7,$=21,D=-1e7,L=1e7,j=!1,q=1,M=0,N={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},W="0123456789abcdefghijklmnopqrstuvwxyz",F=!0;function K(e,t){var r,i,a,l,h,f,g,m,y=this;if(!(y instanceof K))return new K(e,t);if(null==t){if(e&&!0===e._isBigNumber)return y.s=e.s,void(!e.c||e.e>L?y.c=y.e=null:e.e<D?y.c=[y.e=0]:(y.e=e.e,y.c=e.c.slice()));if((f="number"==typeof e)&&0*e==0){if(y.s=1/e<0?(e=-e,-1):1,e===~~e){for(l=0,h=e;h>=10;h/=10,l++);return void(l>L?y.c=y.e=null:(y.e=l,y.c=[e]))}m=String(e)}else{if(!o.test(m=String(e)))return s(y,m,f);y.s=45==m.charCodeAt(0)?(m=m.slice(1),-1):1}(l=m.indexOf("."))>-1&&(m=m.replace(".","")),(h=m.search(/e/i))>0?(l<0&&(l=h),l+=+m.slice(h+1),m=m.substring(0,h)):l<0&&(l=m.length)}else{if(v(t,2,W.length,"Base"),10==t&&F)return G(y=new K(e),U+y.e+1,C);if(m=String(e),f="number"==typeof e){if(0*e!=0)return s(y,m,f,t);if(y.s=1/e<0?(m=m.slice(1),-1):1,K.DEBUG&&m.replace(/^0\.0*|\./,"").length>15)throw Error(u+e)}else y.s=45===m.charCodeAt(0)?(m=m.slice(1),-1):1;for(r=W.slice(0,t),l=h=0,g=m.length;h<g;h++)if(r.indexOf(i=m.charAt(h))<0){if("."==i){if(h>l){l=g;continue}}else if(!a&&(m==m.toUpperCase()&&(m=m.toLowerCase())||m==m.toLowerCase()&&(m=m.toUpperCase()))){a=!0,h=-1,l=0;continue}return s(y,String(e),f,t)}f=!1,(l=(m=n(m,t,10,y.s)).indexOf("."))>-1?m=m.replace(".",""):l=m.length}for(h=0;48===m.charCodeAt(h);h++);for(g=m.length;48===m.charCodeAt(--g););if(m=m.slice(h,++g)){if(g-=h,f&&K.DEBUG&&g>15&&(e>p||e!==c(e)))throw Error(u+y.s*e);if((l=l-h-1)>L)y.c=y.e=null;else if(l<D)y.c=[y.e=0];else{if(y.e=l,y.c=[],h=(l+1)%d,l<0&&(h+=d),h<g){for(h&&y.c.push(+m.slice(0,h)),g-=d;h<g;)y.c.push(+m.slice(h,h+=d));h=d-(m=m.slice(h)).length}else h-=g;for(;h--;m+="0");y.c.push(+m)}}else y.c=[y.e=0]}function z(e,t,r,n){var s,i,o,a,c;if(null==r?r=C:v(r,0,8),!e.c)return e.toString();if(s=e.c[0],o=e.e,null==t)c=w(e.c),c=1==n||2==n&&(o<=O||o>=$)?A(c,o):x(c,o,"0");else if(i=(e=G(new K(e),t,r)).e,a=(c=w(e.c)).length,1==n||2==n&&(t<=i||i<=O)){for(;a<t;c+="0",a++);c=A(c,i)}else if(t-=o,c=x(c,i,"0"),i+1>a){if(--t>0)for(c+=".";t--;c+="0");}else if((t+=i-a)>0)for(i+1==a&&(c+=".");t--;c+="0");return e.s<0&&s?"-"+c:c}function H(e,t){for(var r,n=1,s=new K(e[0]);n<e.length;n++){if(!(r=new K(e[n])).s){s=r;break}t.call(s,r)&&(s=r)}return s}function V(e,t,r){for(var n=1,s=t.length;!t[--s];t.pop());for(s=t[0];s>=10;s/=10,n++);return(r=n+r*d-1)>L?e.c=e.e=null:r<D?e.c=[e.e=0]:(e.e=r,e.c=t),e}function G(e,t,r,n){var s,i,o,l,u,p,g,m=e.c,y=f;if(m){e:{for(s=1,l=m[0];l>=10;l/=10,s++);if((i=t-s)<0)i+=d,o=t,g=(u=m[p=0])/y[s-o-1]%10|0;else if((p=a((i+1)/d))>=m.length){if(!n)break e;for(;m.length<=p;m.push(0));u=g=0,s=1,o=(i%=d)-d+1}else{for(u=l=m[p],s=1;l>=10;l/=10,s++);g=(o=(i%=d)-d+s)<0?0:u/y[s-o-1]%10|0}if(n=n||t<0||null!=m[p+1]||(o<0?u:u%y[s-o-1]),n=r<4?(g||n)&&(0==r||r==(e.s<0?3:2)):g>5||5==g&&(4==r||n||6==r&&(i>0?o>0?u/y[s-o]:0:m[p-1])%10&1||r==(e.s<0?8:7)),t<1||!m[0])return m.length=0,n?(t-=e.e+1,m[0]=y[(d-t%d)%d],e.e=-t||0):m[0]=e.e=0,e;if(0==i?(m.length=p,l=1,p--):(m.length=p+1,l=y[d-i],m[p]=o>0?c(u/y[s-o]%y[o])*l:0),n)for(;;){if(0==p){for(i=1,o=m[0];o>=10;o/=10,i++);for(o=m[0]+=l,l=1;o>=10;o/=10,l++);i!=l&&(e.e++,m[0]==h&&(m[0]=1));break}if(m[p]+=l,m[p]!=h)break;m[p--]=0,l=1}for(i=m.length;0===m[--i];m.pop());}e.e>L?e.c=e.e=null:e.e<D&&(e.c=[e.e=0])}return e}function Y(e){var t,r=e.e;return null===r?e.toString():(t=w(e.c),t=r<=O||r>=$?A(t,r):x(t,r,"0"),e.s<0?"-"+t:t)}return K.clone=e,K.ROUND_UP=0,K.ROUND_DOWN=1,K.ROUND_CEIL=2,K.ROUND_FLOOR=3,K.ROUND_HALF_UP=4,K.ROUND_HALF_DOWN=5,K.ROUND_HALF_EVEN=6,K.ROUND_HALF_CEIL=7,K.ROUND_HALF_FLOOR=8,K.EUCLID=9,K.config=K.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(l+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(v(r=e[t],0,m,t),U=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(v(r=e[t],0,8,t),C=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(v(r[0],-m,0,t),v(r[1],0,m,t),O=r[0],$=r[1]):(v(r,-m,m,t),O=-($=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)v(r[0],-m,-1,t),v(r[1],1,m,t),D=r[0],L=r[1];else{if(v(r,-m,m,t),!r)throw Error(l+t+" cannot be zero: "+r);D=-(L=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(l+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw j=!r,Error(l+"crypto unavailable");j=r}else j=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(v(r=e[t],0,9,t),q=r),e.hasOwnProperty(t="POW_PRECISION")&&(v(r=e[t],0,m,t),M=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(l+t+" not an object: "+r);N=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(l+t+" invalid: "+r);F="0123456789"==r.slice(0,10),W=r}}return{DECIMAL_PLACES:U,ROUNDING_MODE:C,EXPONENTIAL_AT:[O,$],RANGE:[D,L],CRYPTO:j,MODULO_MODE:q,POW_PRECISION:M,FORMAT:N,ALPHABET:W}},K.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!K.DEBUG)return!0;var t,r,n=e.c,s=e.e,i=e.s;e:if("[object Array]"=={}.toString.call(n)){if((1===i||-1===i)&&s>=-m&&s<=m&&s===c(s)){if(0===n[0]){if(0===s&&1===n.length)return!0;break e}if((t=(s+1)%d)<1&&(t+=d),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||r>=h||r!==c(r))break e;if(0!==r)return!0}}}else if(null===n&&null===s&&(null===i||1===i||-1===i))return!0;throw Error(l+"Invalid BigNumber: "+e)},K.maximum=K.max=function(){return H(arguments,B.lt)},K.minimum=K.min=function(){return H(arguments,B.gt)},K.random=(i=9007199254740992,E=Math.random()*i&2097151?function(){return c(Math.random()*i)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,s,i,o=0,u=[],h=new K(P);if(null==e?e=U:v(e,0,m),s=a(e/d),j)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(s*=2));o<s;)(i=131072*t[o]+(t[o+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),t[o]=r[0],t[o+1]=r[1]):(u.push(i%1e14),o+=2);o=s/2}else{if(!crypto.randomBytes)throw j=!1,Error(l+"crypto unavailable");for(t=crypto.randomBytes(s*=7);o<s;)(i=281474976710656*(31&t[o])+1099511627776*t[o+1]+4294967296*t[o+2]+16777216*t[o+3]+(t[o+4]<<16)+(t[o+5]<<8)+t[o+6])>=9e15?crypto.randomBytes(7).copy(t,o):(u.push(i%1e14),o+=7);o=s/7}if(!j)for(;o<s;)(i=E())<9e15&&(u[o++]=i%1e14);for(s=u[--o],e%=d,s&&e&&(i=f[d-e],u[o]=c(s/i)*i);0===u[o];u.pop(),o--);if(o<0)u=[n=0];else{for(n=-1;0===u[0];u.splice(0,1),n-=d);for(o=1,i=u[0];i>=10;i/=10,o++);o<d&&(n-=d-o)}return h.e=n,h.c=u,h}),K.sum=function(){for(var e=1,t=arguments,r=new K(t[0]);e<t.length;)r=r.plus(t[e++]);return r},n=function(){var e="0123456789";function t(e,t,r,n){for(var s,i,o=[0],a=0,c=e.length;a<c;){for(i=o.length;i--;o[i]*=t);for(o[0]+=n.indexOf(e.charAt(a++)),s=0;s<o.length;s++)o[s]>r-1&&(null==o[s+1]&&(o[s+1]=0),o[s+1]+=o[s]/r|0,o[s]%=r)}return o.reverse()}return function(n,s,i,o,a){var c,l,u,h,d,p,f,g,m=n.indexOf("."),y=U,b=C;for(m>=0&&(h=M,M=0,n=n.replace(".",""),p=(g=new K(s)).pow(n.length-m),M=h,g.c=t(x(w(p.c),p.e,"0"),10,i,e),g.e=g.c.length),u=h=(f=t(n,s,i,a?(c=W,e):(c=e,W))).length;0==f[--h];f.pop());if(!f[0])return c.charAt(0);if(m<0?--u:(p.c=f,p.e=u,p.s=o,f=(p=r(p,g,y,b,i)).c,d=p.r,u=p.e),m=f[l=u+y+1],h=i/2,d=d||l<0||null!=f[l+1],d=b<4?(null!=m||d)&&(0==b||b==(p.s<0?3:2)):m>h||m==h&&(4==b||d||6==b&&1&f[l-1]||b==(p.s<0?8:7)),l<1||!f[0])n=d?x(c.charAt(1),-y,c.charAt(0)):c.charAt(0);else{if(f.length=l,d)for(--i;++f[--l]>i;)f[l]=0,l||(++u,f=[1].concat(f));for(h=f.length;!f[--h];);for(m=0,n="";m<=h;n+=c.charAt(f[m++]));n=x(n,u,c.charAt(0))}return n}}(),r=function(){function e(e,t,r){var n,s,i,o,a=0,c=e.length,l=t%g,u=t/g|0;for(e=e.slice();c--;)a=((s=l*(i=e[c]%g)+(n=u*i+(o=e[c]/g|0)*l)%g*g+a)/r|0)+(n/g|0)+u*o,e[c]=s%r;return a&&(e=[a].concat(e)),e}function t(e,t,r,n){var s,i;if(r!=n)i=r>n?1:-1;else for(s=i=0;s<r;s++)if(e[s]!=t[s]){i=e[s]>t[s]?1:-1;break}return i}function r(e,t,r,n){for(var s=0;r--;)e[r]-=s,s=e[r]<t[r]?1:0,e[r]=s*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(n,s,i,o,a){var l,u,p,f,g,m,w,b,v,_,A,x,E,T,k,S,I,R=n.s==s.s?1:-1,B=n.c,P=s.c;if(!(B&&B[0]&&P&&P[0]))return new K(n.s&&s.s&&(B?!P||B[0]!=P[0]:P)?B&&0==B[0]||!P?0*R:R/0:NaN);for(v=(b=new K(R)).c=[],R=i+(u=n.e-s.e)+1,a||(a=h,u=y(n.e/d)-y(s.e/d),R=R/d|0),p=0;P[p]==(B[p]||0);p++);if(P[p]>(B[p]||0)&&u--,R<0)v.push(1),f=!0;else{for(T=B.length,S=P.length,p=0,R+=2,(g=c(a/(P[0]+1)))>1&&(P=e(P,g,a),B=e(B,g,a),S=P.length,T=B.length),E=S,A=(_=B.slice(0,S)).length;A<S;_[A++]=0);I=P.slice(),I=[0].concat(I),k=P[0],P[1]>=a/2&&k++;do{if(g=0,(l=t(P,_,S,A))<0){if(x=_[0],S!=A&&(x=x*a+(_[1]||0)),(g=c(x/k))>1)for(g>=a&&(g=a-1),w=(m=e(P,g,a)).length,A=_.length;1==t(m,_,w,A);)g--,r(m,S<w?I:P,w,a),w=m.length,l=1;else 0==g&&(l=g=1),w=(m=P.slice()).length;if(w<A&&(m=[0].concat(m)),r(_,m,A,a),A=_.length,-1==l)for(;t(P,_,S,A)<1;)g++,r(_,S<A?I:P,A,a),A=_.length}else 0===l&&(g++,_=[0]);v[p++]=g,_[0]?_[A++]=B[E]||0:(_=[B[E]],A=1)}while((E++<T||null!=_[0])&&R--);f=null!=_[0],v[0]||v.splice(0,1)}if(a==h){for(p=1,R=v[0];R>=10;R/=10,p++);G(b,i+(b.e=p+u*d-1)+1,o,f)}else b.e=u,b.r=+f;return b}}(),T=/^(-?)0([xbo])(?=\w[\w.]*$)/i,k=/^([^.]+)\.$/,S=/^\.([^.]+)$/,I=/^-?(Infinity|NaN)$/,R=/^\s*\+(?=[\w.])|^\s+|\s+$/g,s=function(e,t,r,n){var s,i=r?t:t.replace(R,"");if(I.test(i))e.s=isNaN(i)?null:i<0?-1:1;else{if(!r&&(i=i.replace(T,(function(e,t,r){return s="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=s?e:t})),n&&(s=n,i=i.replace(k,"$1").replace(S,"0.$1")),t!=i))return new K(i,s);if(K.DEBUG)throw Error(l+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},B.absoluteValue=B.abs=function(){var e=new K(this);return e.s<0&&(e.s=1),e},B.comparedTo=function(e,t){return b(this,new K(e,t))},B.decimalPlaces=B.dp=function(e,t){var r,n,s,i=this;if(null!=e)return v(e,0,m),null==t?t=C:v(t,0,8),G(new K(i),e+i.e+1,t);if(!(r=i.c))return null;if(n=((s=r.length-1)-y(this.e/d))*d,s=r[s])for(;s%10==0;s/=10,n--);return n<0&&(n=0),n},B.dividedBy=B.div=function(e,t){return r(this,new K(e,t),U,C)},B.dividedToIntegerBy=B.idiv=function(e,t){return r(this,new K(e,t),0,1)},B.exponentiatedBy=B.pow=function(e,t){var r,n,s,i,o,u,h,p,f=this;if((e=new K(e)).c&&!e.isInteger())throw Error(l+"Exponent not an integer: "+Y(e));if(null!=t&&(t=new K(t)),o=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return p=new K(Math.pow(+Y(f),o?2-_(e):+Y(e))),t?p.mod(t):p;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new K(NaN);(n=!u&&f.isInteger()&&t.isInteger())&&(f=f.mod(t))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||o&&f.c[1]>=24e7:f.c[0]<8e13||o&&f.c[0]<=9999975e7)))return i=f.s<0&&_(e)?-0:0,f.e>-1&&(i=1/i),new K(u?1/i:i);M&&(i=a(M/d+2))}for(o?(r=new K(.5),u&&(e.s=1),h=_(e)):h=(s=Math.abs(+Y(e)))%2,p=new K(P);;){if(h){if(!(p=p.times(f)).c)break;i?p.c.length>i&&(p.c.length=i):n&&(p=p.mod(t))}if(s){if(0===(s=c(s/2)))break;h=s%2}else if(G(e=e.times(r),e.e+1,1),e.e>14)h=_(e);else{if(0==(s=+Y(e)))break;h=s%2}f=f.times(f),i?f.c&&f.c.length>i&&(f.c.length=i):n&&(f=f.mod(t))}return n?p:(u&&(p=P.div(p)),t?p.mod(t):i?G(p,M,C,void 0):p)},B.integerValue=function(e){var t=new K(this);return null==e?e=C:v(e,0,8),G(t,t.e+1,e)},B.isEqualTo=B.eq=function(e,t){return 0===b(this,new K(e,t))},B.isFinite=function(){return!!this.c},B.isGreaterThan=B.gt=function(e,t){return b(this,new K(e,t))>0},B.isGreaterThanOrEqualTo=B.gte=function(e,t){return 1===(t=b(this,new K(e,t)))||0===t},B.isInteger=function(){return!!this.c&&y(this.e/d)>this.c.length-2},B.isLessThan=B.lt=function(e,t){return b(this,new K(e,t))<0},B.isLessThanOrEqualTo=B.lte=function(e,t){return-1===(t=b(this,new K(e,t)))||0===t},B.isNaN=function(){return!this.s},B.isNegative=function(){return this.s<0},B.isPositive=function(){return this.s>0},B.isZero=function(){return!!this.c&&0==this.c[0]},B.minus=function(e,t){var r,n,s,i,o=this,a=o.s;if(t=(e=new K(e,t)).s,!a||!t)return new K(NaN);if(a!=t)return e.s=-t,o.plus(e);var c=o.e/d,l=e.e/d,u=o.c,p=e.c;if(!c||!l){if(!u||!p)return u?(e.s=-t,e):new K(p?o:NaN);if(!u[0]||!p[0])return p[0]?(e.s=-t,e):new K(u[0]?o:3==C?-0:0)}if(c=y(c),l=y(l),u=u.slice(),a=c-l){for((i=a<0)?(a=-a,s=u):(l=c,s=p),s.reverse(),t=a;t--;s.push(0));s.reverse()}else for(n=(i=(a=u.length)<(t=p.length))?a:t,a=t=0;t<n;t++)if(u[t]!=p[t]){i=u[t]<p[t];break}if(i&&(s=u,u=p,p=s,e.s=-e.s),(t=(n=p.length)-(r=u.length))>0)for(;t--;u[r++]=0);for(t=h-1;n>a;){if(u[--n]<p[n]){for(r=n;r&&!u[--r];u[r]=t);--u[r],u[n]+=h}u[n]-=p[n]}for(;0==u[0];u.splice(0,1),--l);return u[0]?V(e,u,l):(e.s=3==C?-1:1,e.c=[e.e=0],e)},B.modulo=B.mod=function(e,t){var n,s,i=this;return e=new K(e,t),!i.c||!e.s||e.c&&!e.c[0]?new K(NaN):!e.c||i.c&&!i.c[0]?new K(i):(9==q?(s=e.s,e.s=1,n=r(i,e,0,3),e.s=s,n.s*=s):n=r(i,e,0,q),(e=i.minus(n.times(e))).c[0]||1!=q||(e.s=i.s),e)},B.multipliedBy=B.times=function(e,t){var r,n,s,i,o,a,c,l,u,p,f,m,w,b,v,_=this,A=_.c,x=(e=new K(e,t)).c;if(!(A&&x&&A[0]&&x[0]))return!_.s||!e.s||A&&!A[0]&&!x||x&&!x[0]&&!A?e.c=e.e=e.s=null:(e.s*=_.s,A&&x?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=y(_.e/d)+y(e.e/d),e.s*=_.s,(c=A.length)<(p=x.length)&&(w=A,A=x,x=w,s=c,c=p,p=s),s=c+p,w=[];s--;w.push(0));for(b=h,v=g,s=p;--s>=0;){for(r=0,f=x[s]%v,m=x[s]/v|0,i=s+(o=c);i>s;)r=((l=f*(l=A[--o]%v)+(a=m*l+(u=A[o]/v|0)*f)%v*v+w[i]+r)/b|0)+(a/v|0)+m*u,w[i--]=l%b;w[i]=r}return r?++n:w.splice(0,1),V(e,w,n)},B.negated=function(){var e=new K(this);return e.s=-e.s||null,e},B.plus=function(e,t){var r,n=this,s=n.s;if(t=(e=new K(e,t)).s,!s||!t)return new K(NaN);if(s!=t)return e.s=-t,n.minus(e);var i=n.e/d,o=e.e/d,a=n.c,c=e.c;if(!i||!o){if(!a||!c)return new K(s/0);if(!a[0]||!c[0])return c[0]?e:new K(a[0]?n:0*s)}if(i=y(i),o=y(o),a=a.slice(),s=i-o){for(s>0?(o=i,r=c):(s=-s,r=a),r.reverse();s--;r.push(0));r.reverse()}for((s=a.length)-(t=c.length)<0&&(r=c,c=a,a=r,t=s),s=0;t;)s=(a[--t]=a[t]+c[t]+s)/h|0,a[t]=h===a[t]?0:a[t]%h;return s&&(a=[s].concat(a),++o),V(e,a,o)},B.precision=B.sd=function(e,t){var r,n,s,i=this;if(null!=e&&e!==!!e)return v(e,1,m),null==t?t=C:v(t,0,8),G(new K(i),e,t);if(!(r=i.c))return null;if(n=(s=r.length-1)*d+1,s=r[s]){for(;s%10==0;s/=10,n--);for(s=r[0];s>=10;s/=10,n++);}return e&&i.e+1>n&&(n=i.e+1),n},B.shiftedBy=function(e){return v(e,-9007199254740991,p),this.times("1e"+e)},B.squareRoot=B.sqrt=function(){var e,t,n,s,i,o=this,a=o.c,c=o.s,l=o.e,u=U+4,h=new K("0.5");if(1!==c||!a||!a[0])return new K(!c||c<0&&(!a||a[0])?NaN:a?o:1/0);if(0==(c=Math.sqrt(+Y(o)))||c==1/0?(((t=w(a)).length+l)%2==0&&(t+="0"),c=Math.sqrt(+t),l=y((l+1)/2)-(l<0||l%2),n=new K(t=c==1/0?"5e"+l:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+l)):n=new K(c+""),n.c[0])for((c=(l=n.e)+u)<3&&(c=0);;)if(i=n,n=h.times(i.plus(r(o,i,u,1))),w(i.c).slice(0,c)===(t=w(n.c)).slice(0,c)){if(n.e<l&&--c,"9999"!=(t=t.slice(c-3,c+1))&&(s||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(G(n,n.e+U+2,1),e=!n.times(n).eq(o));break}if(!s&&(G(i,i.e+U+2,0),i.times(i).eq(o))){n=i;break}u+=4,c+=4,s=1}return G(n,n.e+U+1,C,e)},B.toExponential=function(e,t){return null!=e&&(v(e,0,m),e++),z(this,e,t,1)},B.toFixed=function(e,t){return null!=e&&(v(e,0,m),e=e+this.e+1),z(this,e,t)},B.toFormat=function(e,t,r){var n,s=this;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=N;else if("object"!=typeof r)throw Error(l+"Argument not an object: "+r);if(n=s.toFixed(e,t),s.c){var i,o=n.split("."),a=+r.groupSize,c=+r.secondaryGroupSize,u=r.groupSeparator||"",h=o[0],d=o[1],p=s.s<0,f=p?h.slice(1):h,g=f.length;if(c&&(i=a,a=c,c=i,g-=i),a>0&&g>0){for(i=g%a||a,h=f.substr(0,i);i<g;i+=a)h+=u+f.substr(i,a);c>0&&(h+=u+f.slice(i)),p&&(h="-"+h)}n=d?h+(r.decimalSeparator||"")+((c=+r.fractionGroupSize)?d.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):d):h}return(r.prefix||"")+n+(r.suffix||"")},B.toFraction=function(e){var t,n,s,i,o,a,c,u,h,p,g,m,y=this,b=y.c;if(null!=e&&(!(c=new K(e)).isInteger()&&(c.c||1!==c.s)||c.lt(P)))throw Error(l+"Argument "+(c.isInteger()?"out of range: ":"not an integer: ")+Y(c));if(!b)return new K(y);for(t=new K(P),h=n=new K(P),s=u=new K(P),m=w(b),o=t.e=m.length-y.e-1,t.c[0]=f[(a=o%d)<0?d+a:a],e=!e||c.comparedTo(t)>0?o>0?t:h:c,a=L,L=1/0,c=new K(m),u.c[0]=0;p=r(c,t,0,1),1!=(i=n.plus(p.times(s))).comparedTo(e);)n=s,s=i,h=u.plus(p.times(i=h)),u=i,t=c.minus(p.times(i=t)),c=i;return i=r(e.minus(n),s,0,1),u=u.plus(i.times(h)),n=n.plus(i.times(s)),u.s=h.s=y.s,g=r(h,s,o*=2,C).minus(y).abs().comparedTo(r(u,n,o,C).minus(y).abs())<1?[h,s]:[u,n],L=a,g},B.toNumber=function(){return+Y(this)},B.toPrecision=function(e,t){return null!=e&&v(e,1,m),z(this,e,t,2)},B.toString=function(e){var t,r=this,s=r.s,i=r.e;return null===i?s?(t="Infinity",s<0&&(t="-"+t)):t="NaN":(null==e?t=i<=O||i>=$?A(w(r.c),i):x(w(r.c),i,"0"):10===e&&F?t=x(w((r=G(new K(r),U+i+1,C)).c),r.e,"0"):(v(e,2,W.length,"Base"),t=n(x(w(r.c),i,"0"),10,e,s,!0)),s<0&&r.c[0]&&(t="-"+t)),t},B.valueOf=B.toJSON=function(){return Y(this)},B._isBigNumber=!0,null!=t&&K.set(t),K}(),i.default=i.BigNumber=i,void 0===(n=function(){return i}.call(t,r,t,e))||(e.exports=n)}()},8764:(e,t,r)=>{"use strict";const n=r(9742),s=r(645),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=c,t.h2=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let n=a(r);const s=n.write(e,t);return s!==r&&(n=n.slice(0,s)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Y(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Y(e,ArrayBuffer)||e&&Y(e.buffer,ArrayBuffer))return p(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(Y(e,SharedArrayBuffer)||e&&Y(e.buffer,SharedArrayBuffer)))return p(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);const s=function(e){if(c.isBuffer(e)){const t=0|f(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||X(e.length)?a(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return u(e),a(e<0?0:0|f(e))}function d(e){const t=e.length<0?0:0|f(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function p(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,c.prototype),n}function f(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Y(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return V(e).length;default:if(s)return n?-1:H(e).length;t=(""+t).toLowerCase(),s=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return B(this,t,r);case"utf8":case"utf-8":return k(this,t,r);case"ascii":return I(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return T(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function w(e,t,r,n,s){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),X(r=+r)&&(r=s?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,s);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,s){let i,o=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,r/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let n=-1;for(i=r;i<a;i++)if(l(e,i)===l(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===c)return n*o}else-1!==n&&(i-=i-n),n=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){let r=!0;for(let n=0;n<c;n++)if(l(e,i+n)!==l(t,n)){r=!1;break}if(r)return i}return-1}function v(e,t,r,n){r=Number(r)||0;const s=e.length-r;n?(n=Number(n))>s&&(n=s):n=s;const i=t.length;let o;for(n>i/2&&(n=i/2),o=0;o<n;++o){const n=parseInt(t.substr(2*o,2),16);if(X(n))return o;e[r+o]=n}return o}function _(e,t,r,n){return G(H(t,e.length-r),e,r,n)}function A(e,t,r,n){return G(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return G(V(t),e,r,n)}function E(e,t,r,n){return G(function(e,t){let r,n,s;const i=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,s=r%256,i.push(s),i.push(n);return i}(t,e.length-r),e,r,n)}function T(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function k(e,t,r){r=Math.min(e.length,r);const n=[];let s=t;for(;s<r;){const t=e[s];let i=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=r){let r,n,a,c;switch(o){case 1:t<128&&(i=t);break;case 2:r=e[s+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(i=c));break;case 3:r=e[s+1],n=e[s+2],128==(192&r)&&128==(192&n)&&(c=(15&t)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:r=e[s+1],n=e[s+2],a=e[s+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,o=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),s+=o}return function(e){const t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=S));return r}(n)}c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return u(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},c.allocUnsafe=function(e){return h(e)},c.allocUnsafeSlow=function(e){return h(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(Y(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),Y(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let s=0,i=Math.min(r,n);s<i;++s)if(e[s]!==t[s]){r=e[s],n=t[s];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=c.allocUnsafe(t);let s=0;for(r=0;r<e.length;++r){let t=e[r];if(Y(t,Uint8Array))s+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,s)):Uint8Array.prototype.set.call(n,t,s);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,s)}s+=t.length}return n},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)y(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?k(this,0,e):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.h2;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,s){if(Y(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),t<0||r>e.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&t>=r)return 0;if(n>=s)return-1;if(t>=r)return 1;if(this===e)return 0;let i=(s>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0);const a=Math.min(i,o),l=this.slice(n,s),u=e.slice(t,r);for(let e=0;e<a;++e)if(l[e]!==u[e]){i=l[e],o=u[e];break}return i<o?-1:o<i?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return w(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return w(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const s=this.length-t;if((void 0===r||r>s)&&(r=s),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let i=!1;for(;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return A(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function I(e,t,r){let n="";r=Math.min(e.length,r);for(let s=t;s<r;++s)n+=String.fromCharCode(127&e[s]);return n}function R(e,t,r){let n="";r=Math.min(e.length,r);for(let s=t;s<r;++s)n+=String.fromCharCode(e[s]);return n}function B(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let s="";for(let n=t;n<r;++n)s+=Z[e[n]];return s}function P(e,t,r){const n=e.slice(t,r);let s="";for(let e=0;e<n.length-1;e+=2)s+=String.fromCharCode(n[e]+256*n[e+1]);return s}function U(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function C(e,t,r,n,s,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function O(e,t,r,n,s){W(t,n,s,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function $(e,t,r,n,s){W(t,n,s,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function D(e,t,r,n,s,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(e,t,r,n,i){return t=+t,r>>>=0,i||D(e,0,r,4),s.write(e,t,r,n,23,4),r+4}function j(e,t,r,n,i){return t=+t,r>>>=0,i||D(e,0,r,8),s.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e],s=1,i=0;for(;++i<t&&(s*=256);)n+=this[e+i]*s;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e+--t],s=1;for(;t>0&&(s*=256);)n+=this[e+--t]*s;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||U(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||U(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||U(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=J((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(s)<<BigInt(32))})),c.prototype.readBigUInt64BE=J((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(s)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=this[e],s=1,i=0;for(;++i<t&&(s*=256);)n+=this[e+i]*s;return s*=128,n>=s&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||U(e,t,this.length);let n=t,s=1,i=this[e+--n];for(;n>0&&(s*=256);)i+=this[e+--n]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return e>>>=0,t||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||U(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||U(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=J((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=J((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||U(e,4,this.length),s.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||U(e,4,this.length),s.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||U(e,8,this.length),s.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||U(e,8,this.length),s.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);let s=1,i=0;for(this[t]=255&e;++i<r&&(s*=256);)this[t+i]=e/s&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);let s=r-1,i=1;for(this[t+s]=255&e;--s>=0&&(i*=256);)this[t+s]=e/i&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=J((function(e,t=0){return O(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=J((function(e,t=0){return $(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);C(this,e,t,r,n-1,-n)}let s=0,i=1,o=0;for(this[t]=255&e;++s<r&&(i*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/i>>0)-o&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);C(this,e,t,r,n-1,-n)}let s=r-1,i=1,o=0;for(this[t+s]=255&e;--s>=0&&(i*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/i>>0)-o&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=J((function(e,t=0){return O(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=J((function(e,t=0){return $(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return L(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return L(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return j(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return j(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const s=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),s},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{const i=c.isBuffer(e)?e:c.from(e,n),o=i.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<r-t;++s)this[s+t]=i[s%o]}return this};const q={};function M(e,t,r){q[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function N(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function W(e,t,r,n,s,i){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let s;throw s=i>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new q.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,r){F(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||K(t,e.length-(r+1))}(n,s,i)}function F(e,t){if("number"!=typeof e)throw new q.ERR_INVALID_ARG_TYPE(t,"number",e)}function K(e,t,r){if(Math.floor(e)!==e)throw F(e,r),new q.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new q.ERR_BUFFER_OUT_OF_BOUNDS;throw new q.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}M("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),M("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),M("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,s=r;return Number.isInteger(r)&&Math.abs(r)>2**32?s=N(String(r)):"bigint"==typeof r&&(s=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(s=N(s)),s+="n"),n+=` It must be ${t}. Received ${s}`,n}),RangeError);const z=/[^+/0-9A-Za-z-_]/g;function H(e,t){let r;t=t||1/0;const n=e.length;let s=null;const i=[];for(let o=0;o<n;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!s){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}s=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(t-=3)>-1&&i.push(239,191,189);if(s=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function V(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function G(e,t,r,n){let s;for(s=0;s<n&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}function Y(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function X(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let s=0;s<16;++s)t[n+s]=e[r]+e[s]}return t}();function J(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},4098:function(e,t){var r="undefined"!=typeof self?self:this,n=function(){function e(){this.fetch=!1,this.DOMException=r.DOMException}return e.prototype=r,new e}();!function(e){!function(t){var r={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(r.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&n.indexOf(Object.prototype.toString.call(e))>-1};function i(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function o(e){return"string"!=typeof e&&(e=String(e)),e}function a(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r.iterable&&(t[Symbol.iterator]=function(){return t}),t}function c(e){this.map={},e instanceof c?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function l(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function u(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function h(e){var t=new FileReader,r=u(t);return t.readAsArrayBuffer(e),r}function d(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function p(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:r.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():r.arrayBuffer&&r.blob&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=d(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var e=l(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var e,t,r,n=l(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,r=u(t=new FileReader),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(e,t){e=i(e),t=o(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},c.prototype.delete=function(e){delete this.map[i(e)]},c.prototype.get=function(e){return e=i(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(i(e))},c.prototype.set=function(e,t){this.map[i(e)]=o(t)},c.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},c.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),a(e)},c.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),a(e)},c.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),a(e)},r.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var f=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(e,t){var r,n,s=(t=t||{}).body;if(e instanceof g){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,s||null==e._bodyInit||(s=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=(n=(r=t.method||this.method||"GET").toUpperCase(),f.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&s)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(s)}function m(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\+/g," "),s=r.join("=").replace(/\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(s))}})),t}function y(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},p.call(g.prototype),p.call(y.prototype),y.prototype.clone=function(){return new y(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},y.error=function(){var e=new y(null,{status:0,statusText:""});return e.type="error",e};var w=[301,302,303,307,308];y.redirect=function(e,t){if(-1===w.indexOf(t))throw new RangeError("Invalid status code");return new y(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function b(e,n){return new Promise((function(s,i){var o=new g(e,n);if(o.signal&&o.signal.aborted)return i(new t.DOMException("Aborted","AbortError"));var a=new XMLHttpRequest;function l(){a.abort()}a.onload=function(){var e,t,r={status:a.status,statusText:a.statusText,headers:(e=a.getAllResponseHeaders()||"",t=new c,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var s=r.join(":").trim();t.append(n,s)}})),t)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var n="response"in a?a.response:a.responseText;s(new y(n,r))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.onabort=function(){i(new t.DOMException("Aborted","AbortError"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&r.blob&&(a.responseType="blob"),o.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),o.signal&&(o.signal.addEventListener("abort",l),a.onreadystatechange=function(){4===a.readyState&&o.signal.removeEventListener("abort",l)}),a.send(void 0===o._bodyInit?null:o._bodyInit)}))}b.polyfill=!0,e.fetch||(e.fetch=b,e.Headers=c,e.Request=g,e.Response=y),t.Headers=c,t.Request=g,t.Response=y,t.fetch=b,Object.defineProperty(t,"__esModule",{value:!0})}({})}(n),n.fetch.ponyfill=!0,delete n.fetch.polyfill;var s=n;(t=s.fetch).default=s.fetch,t.fetch=s.fetch,t.Headers=s.Headers,t.Request=s.Request,t.Response=s.Response,e.exports=t},9090:(e,t,r)=>{var n;!function(){"use strict";var t="object"==typeof window?window:{};!t.HI_BASE32_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node&&(t=r.g);var s=!t.HI_BASE32_NO_COMMON_JS&&e.exports,i=r.amdO,o="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567".split(""),a={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,2:26,3:27,4:28,5:29,6:30,7:31},c=[0,0,0,0,0,0,0,0],l=function(e,t){t.length>10&&(t="..."+t.substr(-10));var r=new Error("Decoded data is not valid UTF-8. Maybe try base32.decode.asBytes()? Partial data after reading "+e+" bytes: "+t+" <-");throw r.position=e,r},u=function(e){if(""===e)return[];if(!/^[A-Z2-7=]+$/.test(e))throw new Error("Invalid base32 characters");for(var t,r,n,s,i,o,c,l,u=[],h=0,d=(e=e.replace(/=/g,"")).length,p=0,f=d>>3<<3;p<f;)t=a[e.charAt(p++)],r=a[e.charAt(p++)],n=a[e.charAt(p++)],s=a[e.charAt(p++)],i=a[e.charAt(p++)],o=a[e.charAt(p++)],c=a[e.charAt(p++)],l=a[e.charAt(p++)],u[h++]=255&(t<<3|r>>>2),u[h++]=255&(r<<6|n<<1|s>>>4),u[h++]=255&(s<<4|i>>>1),u[h++]=255&(i<<7|o<<2|c>>>3),u[h++]=255&(c<<5|l);var g=d-f;return 2===g?(t=a[e.charAt(p++)],r=a[e.charAt(p++)],u[h++]=255&(t<<3|r>>>2)):4===g?(t=a[e.charAt(p++)],r=a[e.charAt(p++)],n=a[e.charAt(p++)],s=a[e.charAt(p++)],u[h++]=255&(t<<3|r>>>2),u[h++]=255&(r<<6|n<<1|s>>>4)):5===g?(t=a[e.charAt(p++)],r=a[e.charAt(p++)],n=a[e.charAt(p++)],s=a[e.charAt(p++)],i=a[e.charAt(p++)],u[h++]=255&(t<<3|r>>>2),u[h++]=255&(r<<6|n<<1|s>>>4),u[h++]=255&(s<<4|i>>>1)):7===g&&(t=a[e.charAt(p++)],r=a[e.charAt(p++)],n=a[e.charAt(p++)],s=a[e.charAt(p++)],i=a[e.charAt(p++)],o=a[e.charAt(p++)],c=a[e.charAt(p++)],u[h++]=255&(t<<3|r>>>2),u[h++]=255&(r<<6|n<<1|s>>>4),u[h++]=255&(s<<4|i>>>1),u[h++]=255&(i<<7|o<<2|c>>>3)),u},h=function(e,t){if(!t)return function(e){for(var t,r,n="",s=e.length,i=0,o=0;i<s;)if((t=e[i++])<=127)n+=String.fromCharCode(t);else{t>191&&t<=223?(r=31&t,o=1):t<=239?(r=15&t,o=2):t<=247?(r=7&t,o=3):l(i,n);for(var a=0;a<o;++a)((t=e[i++])<128||t>191)&&l(i,n),r<<=6,r+=63&t;r>=55296&&r<=57343&&l(i,n),r>1114111&&l(i,n),r<=65535?n+=String.fromCharCode(r):(r-=65536,n+=String.fromCharCode(55296+(r>>10)),n+=String.fromCharCode(56320+(1023&r)))}return n}(u(e));if(""===e)return"";if(!/^[A-Z2-7=]+$/.test(e))throw new Error("Invalid base32 characters");var r,n,s,i,o,c,h,d,p="",f=e.indexOf("=");-1===f&&(f=e.length);for(var g=0,m=f>>3<<3;g<m;)r=a[e.charAt(g++)],n=a[e.charAt(g++)],s=a[e.charAt(g++)],i=a[e.charAt(g++)],o=a[e.charAt(g++)],c=a[e.charAt(g++)],h=a[e.charAt(g++)],d=a[e.charAt(g++)],p+=String.fromCharCode(255&(r<<3|n>>>2))+String.fromCharCode(255&(n<<6|s<<1|i>>>4))+String.fromCharCode(255&(i<<4|o>>>1))+String.fromCharCode(255&(o<<7|c<<2|h>>>3))+String.fromCharCode(255&(h<<5|d));var y=f-m;return 2===y?(r=a[e.charAt(g++)],n=a[e.charAt(g++)],p+=String.fromCharCode(255&(r<<3|n>>>2))):4===y?(r=a[e.charAt(g++)],n=a[e.charAt(g++)],s=a[e.charAt(g++)],i=a[e.charAt(g++)],p+=String.fromCharCode(255&(r<<3|n>>>2))+String.fromCharCode(255&(n<<6|s<<1|i>>>4))):5===y?(r=a[e.charAt(g++)],n=a[e.charAt(g++)],s=a[e.charAt(g++)],i=a[e.charAt(g++)],o=a[e.charAt(g++)],p+=String.fromCharCode(255&(r<<3|n>>>2))+String.fromCharCode(255&(n<<6|s<<1|i>>>4))+String.fromCharCode(255&(i<<4|o>>>1))):7===y&&(r=a[e.charAt(g++)],n=a[e.charAt(g++)],s=a[e.charAt(g++)],i=a[e.charAt(g++)],o=a[e.charAt(g++)],c=a[e.charAt(g++)],h=a[e.charAt(g++)],p+=String.fromCharCode(255&(r<<3|n>>>2))+String.fromCharCode(255&(n<<6|s<<1|i>>>4))+String.fromCharCode(255&(i<<4|o>>>1))+String.fromCharCode(255&(o<<7|c<<2|h>>>3))),p},d={encode:function(e,t){var r="string"!=typeof e;return r&&e.constructor===ArrayBuffer&&(e=new Uint8Array(e)),r?function(e){for(var t,r,n,s,i,a="",c=e.length,l=0,u=5*parseInt(c/5);l<u;)t=e[l++],r=e[l++],n=e[l++],s=e[l++],i=e[l++],a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[31&(s<<3|i>>>5)]+o[31&i];var h=c-u;return 1===h?(t=e[l],a+=o[t>>>3]+o[t<<2&31]+"======"):2===h?(t=e[l++],r=e[l],a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[r<<4&31]+"===="):3===h?(t=e[l++],r=e[l++],n=e[l],a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[n<<1&31]+"==="):4===h&&(t=e[l++],r=e[l++],n=e[l++],s=e[l],a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[s<<3&31]+"="),a}(e):t?function(e){for(var t,r,n,s,i,a="",c=e.length,l=0,u=5*parseInt(c/5);l<u;)t=e.charCodeAt(l++),r=e.charCodeAt(l++),n=e.charCodeAt(l++),s=e.charCodeAt(l++),i=e.charCodeAt(l++),a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[31&(s<<3|i>>>5)]+o[31&i];var h=c-u;return 1===h?(t=e.charCodeAt(l),a+=o[t>>>3]+o[t<<2&31]+"======"):2===h?(t=e.charCodeAt(l++),r=e.charCodeAt(l),a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[r<<4&31]+"===="):3===h?(t=e.charCodeAt(l++),r=e.charCodeAt(l++),n=e.charCodeAt(l),a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[n<<1&31]+"==="):4===h&&(t=e.charCodeAt(l++),r=e.charCodeAt(l++),n=e.charCodeAt(l++),s=e.charCodeAt(l),a+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[s<<3&31]+"="),a}(e):function(e){var t,r,n,s,i,a,l,u=!1,h="",d=0,p=0,f=e.length;if(""===e)return h;do{for(c[0]=c[5],c[1]=c[6],c[2]=c[7],l=p;d<f&&l<5;++d)(a=e.charCodeAt(d))<128?c[l++]=a:a<2048?(c[l++]=192|a>>6,c[l++]=128|63&a):a<55296||a>=57344?(c[l++]=224|a>>12,c[l++]=128|a>>6&63,c[l++]=128|63&a):(a=65536+((1023&a)<<10|1023&e.charCodeAt(++d)),c[l++]=240|a>>18,c[l++]=128|a>>12&63,c[l++]=128|a>>6&63,c[l++]=128|63&a);p=l-5,d===f&&++d,d>f&&l<6&&(u=!0),t=c[0],l>4?(r=c[1],n=c[2],s=c[3],i=c[4],h+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[31&(s<<3|i>>>5)]+o[31&i]):1===l?h+=o[t>>>3]+o[t<<2&31]+"======":2===l?(r=c[1],h+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[r<<4&31]+"===="):3===l?(r=c[1],n=c[2],h+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[n<<1&31]+"==="):(r=c[1],n=c[2],s=c[3],h+=o[t>>>3]+o[31&(t<<2|r>>>6)]+o[r>>>1&31]+o[31&(r<<4|n>>>4)]+o[31&(n<<1|s>>>7)]+o[s>>>2&31]+o[s<<3&31]+"=")}while(!u);return h}(e)},decode:h};h.asBytes=u,s?e.exports=d:(t.base32=d,i&&(void 0===(n=function(){return d}.call(d,r,d,e))||(e.exports=n)))}()},645:(e,t)=>{t.read=function(e,t,r,n,s){var i,o,a=8*s-n-1,c=(1<<a)-1,l=c>>1,u=-7,h=r?s-1:0,d=r?-1:1,p=e[t+h];for(h+=d,i=p&(1<<-u)-1,p>>=-u,u+=a;u>0;i=256*i+e[t+h],h+=d,u-=8);for(o=i&(1<<-u)-1,i>>=-u,u+=n;u>0;o=256*o+e[t+h],h+=d,u-=8);if(0===i)i=1-l;else{if(i===c)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),i-=l}return(p?-1:1)*o*Math.pow(2,i-n)},t.write=function(e,t,r,n,s,i){var o,a,c,l=8*i-s-1,u=(1<<l)-1,h=u>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,f=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(o++,c/=2),o+h>=u?(a=0,o=u):o+h>=1?(a=(t*c-1)*Math.pow(2,s),o+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,s),o=0));s>=8;e[r+p]=255&a,p+=f,a/=256,s-=8);for(o=o<<s|a,l+=s;l>0;e[r+p]=255&o,p+=f,o/=256,l-=8);e[r+p-f]|=128*g}},3434:(e,t,r)=>{var n;!function(){"use strict";var t="input is invalid type",s="object"==typeof window,i=s?window:{};i.JS_SHA512_NO_WINDOW&&(s=!1);var o=!s&&"object"==typeof self;!i.JS_SHA512_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?i=r.g:o&&(i=self);var a=!i.JS_SHA512_NO_COMMON_JS&&e.exports,c=r.amdO,l=!i.JS_SHA512_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,u="0123456789abcdef".split(""),h=[-2147483648,8388608,32768,128],d=[24,16,8,0],p=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],f=["hex","array","digest","arrayBuffer"],g=[];!i.JS_SHA512_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!l||!i.JS_SHA512_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});var m=function(e,t){return function(r){return new v(t,!0).update(r)[e]()}},y=function(e){var t=m("hex",e);t.create=function(){return new v(e)},t.update=function(e){return t.create().update(e)};for(var r=0;r<f.length;++r){var n=f[r];t[n]=m(n,e)}return t},w=function(e,t){return function(r,n){return new _(r,t,!0).update(n)[e]()}},b=function(e){var t=w("hex",e);t.create=function(t){return new _(t,e)},t.update=function(e,r){return t.create(e).update(r)};for(var r=0;r<f.length;++r){var n=f[r];t[n]=w(n,e)}return t};function v(e,t){t?(g[0]=g[1]=g[2]=g[3]=g[4]=g[5]=g[6]=g[7]=g[8]=g[9]=g[10]=g[11]=g[12]=g[13]=g[14]=g[15]=g[16]=g[17]=g[18]=g[19]=g[20]=g[21]=g[22]=g[23]=g[24]=g[25]=g[26]=g[27]=g[28]=g[29]=g[30]=g[31]=g[32]=0,this.blocks=g):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],384==e?(this.h0h=3418070365,this.h0l=3238371032,this.h1h=1654270250,this.h1l=914150663,this.h2h=2438529370,this.h2l=812702999,this.h3h=355462360,this.h3l=4144912697,this.h4h=1731405415,this.h4l=4290775857,this.h5h=2394180231,this.h5l=1750603025,this.h6h=3675008525,this.h6l=1694076839,this.h7h=1203062813,this.h7l=3204075428):256==e?(this.h0h=573645204,this.h0l=4230739756,this.h1h=2673172387,this.h1l=3360449730,this.h2h=596883563,this.h2l=1867755857,this.h3h=2520282905,this.h3l=1497426621,this.h4h=2519219938,this.h4l=2827943907,this.h5h=3193839141,this.h5l=1401305490,this.h6h=721525244,this.h6l=746961066,this.h7h=246885852,this.h7l=2177182882):224==e?(this.h0h=2352822216,this.h0l=424955298,this.h1h=1944164710,this.h1l=2312950998,this.h2h=502970286,this.h2l=855612546,this.h3h=1738396948,this.h3l=1479516111,this.h4h=258812777,this.h4l=2077511080,this.h5h=2011393907,this.h5l=79989058,this.h6h=1067287976,this.h6l=1780299464,this.h7h=286451373,this.h7l=2446758561):(this.h0h=1779033703,this.h0l=4089235720,this.h1h=3144134277,this.h1l=2227873595,this.h2h=1013904242,this.h2l=4271175723,this.h3h=2773480762,this.h3l=1595750129,this.h4h=1359893119,this.h4l=2917565137,this.h5h=2600822924,this.h5l=725511199,this.h6h=528734635,this.h6l=4215389547,this.h7h=1541459225,this.h7l=327033209),this.bits=e,this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1}function _(e,r,n){var s,i=typeof e;if("string"!==i){if("object"!==i)throw new Error(t);if(null===e)throw new Error(t);if(l&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||l&&ArrayBuffer.isView(e)))throw new Error(t);s=!0}var o=e.length;if(!s){for(var a,c=[],u=(o=e.length,0),h=0;h<o;++h)(a=e.charCodeAt(h))<128?c[u++]=a:a<2048?(c[u++]=192|a>>6,c[u++]=128|63&a):a<55296||a>=57344?(c[u++]=224|a>>12,c[u++]=128|a>>6&63,c[u++]=128|63&a):(a=65536+((1023&a)<<10|1023&e.charCodeAt(++h)),c[u++]=240|a>>18,c[u++]=128|a>>12&63,c[u++]=128|a>>6&63,c[u++]=128|63&a);e=c}e.length>128&&(e=new v(r,!0).update(e).array());var d=[],p=[];for(h=0;h<128;++h){var f=e[h]||0;d[h]=92^f,p[h]=54^f}v.call(this,r,n),this.update(p),this.oKeyPad=d,this.inner=!0,this.sharedMemory=n}v.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var r,n=typeof e;if("string"!==n){if("object"!==n)throw new Error(t);if(null===e)throw new Error(t);if(l&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||l&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}for(var s,i,o=0,a=e.length,c=this.blocks;o<a;){if(this.hashed&&(this.hashed=!1,c[0]=this.block,c[1]=c[2]=c[3]=c[4]=c[5]=c[6]=c[7]=c[8]=c[9]=c[10]=c[11]=c[12]=c[13]=c[14]=c[15]=c[16]=c[17]=c[18]=c[19]=c[20]=c[21]=c[22]=c[23]=c[24]=c[25]=c[26]=c[27]=c[28]=c[29]=c[30]=c[31]=c[32]=0),r)for(i=this.start;o<a&&i<128;++o)c[i>>2]|=e[o]<<d[3&i++];else for(i=this.start;o<a&&i<128;++o)(s=e.charCodeAt(o))<128?c[i>>2]|=s<<d[3&i++]:s<2048?(c[i>>2]|=(192|s>>6)<<d[3&i++],c[i>>2]|=(128|63&s)<<d[3&i++]):s<55296||s>=57344?(c[i>>2]|=(224|s>>12)<<d[3&i++],c[i>>2]|=(128|s>>6&63)<<d[3&i++],c[i>>2]|=(128|63&s)<<d[3&i++]):(s=65536+((1023&s)<<10|1023&e.charCodeAt(++o)),c[i>>2]|=(240|s>>18)<<d[3&i++],c[i>>2]|=(128|s>>12&63)<<d[3&i++],c[i>>2]|=(128|s>>6&63)<<d[3&i++],c[i>>2]|=(128|63&s)<<d[3&i++]);this.lastByteIndex=i,this.bytes+=i-this.start,i>=128?(this.block=c[32],this.start=i-128,this.hash(),this.hashed=!0):this.start=i}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this},v.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex;e[32]=this.block,e[t>>2]|=h[3&t],this.block=e[32],t>=112&&(this.hashed||this.hash(),e[0]=this.block,e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=e[7]=e[8]=e[9]=e[10]=e[11]=e[12]=e[13]=e[14]=e[15]=e[16]=e[17]=e[18]=e[19]=e[20]=e[21]=e[22]=e[23]=e[24]=e[25]=e[26]=e[27]=e[28]=e[29]=e[30]=e[31]=e[32]=0),e[30]=this.hBytes<<3|this.bytes>>>29,e[31]=this.bytes<<3,this.hash()}},v.prototype.hash=function(){var e,t,r,n,s,i,o,a,c,l,u,h,d,f,g,m,y,w,b,v,_,A,x,E,T,k=this.h0h,S=this.h0l,I=this.h1h,R=this.h1l,B=this.h2h,P=this.h2l,U=this.h3h,C=this.h3l,O=this.h4h,$=this.h4l,D=this.h5h,L=this.h5l,j=this.h6h,q=this.h6l,M=this.h7h,N=this.h7l,W=this.blocks;for(e=32;e<160;e+=2)t=((v=W[e-30])>>>1|(_=W[e-29])<<31)^(v>>>8|_<<24)^v>>>7,r=(_>>>1|v<<31)^(_>>>8|v<<24)^(_>>>7|v<<25),n=((v=W[e-4])>>>19|(_=W[e-3])<<13)^(_>>>29|v<<3)^v>>>6,s=(_>>>19|v<<13)^(v>>>29|_<<3)^(_>>>6|v<<26),v=W[e-32],_=W[e-31],c=((A=W[e-14])>>>16)+(v>>>16)+(t>>>16)+(n>>>16)+((a=(65535&A)+(65535&v)+(65535&t)+(65535&n)+((o=((x=W[e-13])>>>16)+(_>>>16)+(r>>>16)+(s>>>16)+((i=(65535&x)+(65535&_)+(65535&r)+(65535&s))>>>16))>>>16))>>>16),W[e]=c<<16|65535&a,W[e+1]=o<<16|65535&i;var F=k,K=S,z=I,H=R,V=B,G=P,Y=U,X=C,Z=O,J=$,Q=D,ee=L,te=j,re=q,ne=M,se=N;for(m=z&V,y=H&G,e=0;e<160;e+=8)t=(F>>>28|K<<4)^(K>>>2|F<<30)^(K>>>7|F<<25),r=(K>>>28|F<<4)^(F>>>2|K<<30)^(F>>>7|K<<25),n=(Z>>>14|J<<18)^(Z>>>18|J<<14)^(J>>>9|Z<<23),s=(J>>>14|Z<<18)^(J>>>18|Z<<14)^(Z>>>9|J<<23),w=(l=F&z)^F&V^m,b=(u=K&H)^K&G^y,E=Z&Q^~Z&te,T=J&ee^~J&re,v=W[e],_=W[e+1],v=(c=((A=p[e])>>>16)+(v>>>16)+(E>>>16)+(n>>>16)+(ne>>>16)+((a=(65535&A)+(65535&v)+(65535&E)+(65535&n)+(65535&ne)+((o=((x=p[e+1])>>>16)+(_>>>16)+(T>>>16)+(s>>>16)+(se>>>16)+((i=(65535&x)+(65535&_)+(65535&T)+(65535&s)+(65535&se))>>>16))>>>16))>>>16))<<16|65535&a,_=o<<16|65535&i,A=(c=(w>>>16)+(t>>>16)+((a=(65535&w)+(65535&t)+((o=(b>>>16)+(r>>>16)+((i=(65535&b)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,x=o<<16|65535&i,ne=(c=(Y>>>16)+(v>>>16)+((a=(65535&Y)+(65535&v)+((o=(X>>>16)+(_>>>16)+((i=(65535&X)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,se=o<<16|65535&i,t=((Y=(c=(A>>>16)+(v>>>16)+((a=(65535&A)+(65535&v)+((o=(x>>>16)+(_>>>16)+((i=(65535&x)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(X=o<<16|65535&i)<<4)^(X>>>2|Y<<30)^(X>>>7|Y<<25),r=(X>>>28|Y<<4)^(Y>>>2|X<<30)^(Y>>>7|X<<25),n=(ne>>>14|se<<18)^(ne>>>18|se<<14)^(se>>>9|ne<<23),s=(se>>>14|ne<<18)^(se>>>18|ne<<14)^(ne>>>9|se<<23),w=(h=Y&F)^Y&z^l,b=(d=X&K)^X&H^u,E=ne&Z^~ne&Q,T=se&J^~se&ee,v=W[e+2],_=W[e+3],v=(c=((A=p[e+2])>>>16)+(v>>>16)+(E>>>16)+(n>>>16)+(te>>>16)+((a=(65535&A)+(65535&v)+(65535&E)+(65535&n)+(65535&te)+((o=((x=p[e+3])>>>16)+(_>>>16)+(T>>>16)+(s>>>16)+(re>>>16)+((i=(65535&x)+(65535&_)+(65535&T)+(65535&s)+(65535&re))>>>16))>>>16))>>>16))<<16|65535&a,_=o<<16|65535&i,A=(c=(w>>>16)+(t>>>16)+((a=(65535&w)+(65535&t)+((o=(b>>>16)+(r>>>16)+((i=(65535&b)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,x=o<<16|65535&i,te=(c=(V>>>16)+(v>>>16)+((a=(65535&V)+(65535&v)+((o=(G>>>16)+(_>>>16)+((i=(65535&G)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,re=o<<16|65535&i,t=((V=(c=(A>>>16)+(v>>>16)+((a=(65535&A)+(65535&v)+((o=(x>>>16)+(_>>>16)+((i=(65535&x)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(G=o<<16|65535&i)<<4)^(G>>>2|V<<30)^(G>>>7|V<<25),r=(G>>>28|V<<4)^(V>>>2|G<<30)^(V>>>7|G<<25),n=(te>>>14|re<<18)^(te>>>18|re<<14)^(re>>>9|te<<23),s=(re>>>14|te<<18)^(re>>>18|te<<14)^(te>>>9|re<<23),w=(f=V&Y)^V&F^h,b=(g=G&X)^G&K^d,E=te&ne^~te&Z,T=re&se^~re&J,v=W[e+4],_=W[e+5],v=(c=((A=p[e+4])>>>16)+(v>>>16)+(E>>>16)+(n>>>16)+(Q>>>16)+((a=(65535&A)+(65535&v)+(65535&E)+(65535&n)+(65535&Q)+((o=((x=p[e+5])>>>16)+(_>>>16)+(T>>>16)+(s>>>16)+(ee>>>16)+((i=(65535&x)+(65535&_)+(65535&T)+(65535&s)+(65535&ee))>>>16))>>>16))>>>16))<<16|65535&a,_=o<<16|65535&i,A=(c=(w>>>16)+(t>>>16)+((a=(65535&w)+(65535&t)+((o=(b>>>16)+(r>>>16)+((i=(65535&b)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,x=o<<16|65535&i,Q=(c=(z>>>16)+(v>>>16)+((a=(65535&z)+(65535&v)+((o=(H>>>16)+(_>>>16)+((i=(65535&H)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,ee=o<<16|65535&i,t=((z=(c=(A>>>16)+(v>>>16)+((a=(65535&A)+(65535&v)+((o=(x>>>16)+(_>>>16)+((i=(65535&x)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(H=o<<16|65535&i)<<4)^(H>>>2|z<<30)^(H>>>7|z<<25),r=(H>>>28|z<<4)^(z>>>2|H<<30)^(z>>>7|H<<25),n=(Q>>>14|ee<<18)^(Q>>>18|ee<<14)^(ee>>>9|Q<<23),s=(ee>>>14|Q<<18)^(ee>>>18|Q<<14)^(Q>>>9|ee<<23),w=(m=z&V)^z&Y^f,b=(y=H&G)^H&X^g,E=Q&te^~Q&ne,T=ee&re^~ee&se,v=W[e+6],_=W[e+7],v=(c=((A=p[e+6])>>>16)+(v>>>16)+(E>>>16)+(n>>>16)+(Z>>>16)+((a=(65535&A)+(65535&v)+(65535&E)+(65535&n)+(65535&Z)+((o=((x=p[e+7])>>>16)+(_>>>16)+(T>>>16)+(s>>>16)+(J>>>16)+((i=(65535&x)+(65535&_)+(65535&T)+(65535&s)+(65535&J))>>>16))>>>16))>>>16))<<16|65535&a,_=o<<16|65535&i,A=(c=(w>>>16)+(t>>>16)+((a=(65535&w)+(65535&t)+((o=(b>>>16)+(r>>>16)+((i=(65535&b)+(65535&r))>>>16))>>>16))>>>16))<<16|65535&a,x=o<<16|65535&i,Z=(c=(F>>>16)+(v>>>16)+((a=(65535&F)+(65535&v)+((o=(K>>>16)+(_>>>16)+((i=(65535&K)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,J=o<<16|65535&i,F=(c=(A>>>16)+(v>>>16)+((a=(65535&A)+(65535&v)+((o=(x>>>16)+(_>>>16)+((i=(65535&x)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,K=o<<16|65535&i;c=(k>>>16)+(F>>>16)+((a=(65535&k)+(65535&F)+((o=(S>>>16)+(K>>>16)+((i=(65535&S)+(65535&K))>>>16))>>>16))>>>16),this.h0h=c<<16|65535&a,this.h0l=o<<16|65535&i,c=(I>>>16)+(z>>>16)+((a=(65535&I)+(65535&z)+((o=(R>>>16)+(H>>>16)+((i=(65535&R)+(65535&H))>>>16))>>>16))>>>16),this.h1h=c<<16|65535&a,this.h1l=o<<16|65535&i,c=(B>>>16)+(V>>>16)+((a=(65535&B)+(65535&V)+((o=(P>>>16)+(G>>>16)+((i=(65535&P)+(65535&G))>>>16))>>>16))>>>16),this.h2h=c<<16|65535&a,this.h2l=o<<16|65535&i,c=(U>>>16)+(Y>>>16)+((a=(65535&U)+(65535&Y)+((o=(C>>>16)+(X>>>16)+((i=(65535&C)+(65535&X))>>>16))>>>16))>>>16),this.h3h=c<<16|65535&a,this.h3l=o<<16|65535&i,c=(O>>>16)+(Z>>>16)+((a=(65535&O)+(65535&Z)+((o=($>>>16)+(J>>>16)+((i=(65535&$)+(65535&J))>>>16))>>>16))>>>16),this.h4h=c<<16|65535&a,this.h4l=o<<16|65535&i,c=(D>>>16)+(Q>>>16)+((a=(65535&D)+(65535&Q)+((o=(L>>>16)+(ee>>>16)+((i=(65535&L)+(65535&ee))>>>16))>>>16))>>>16),this.h5h=c<<16|65535&a,this.h5l=o<<16|65535&i,c=(j>>>16)+(te>>>16)+((a=(65535&j)+(65535&te)+((o=(q>>>16)+(re>>>16)+((i=(65535&q)+(65535&re))>>>16))>>>16))>>>16),this.h6h=c<<16|65535&a,this.h6l=o<<16|65535&i,c=(M>>>16)+(ne>>>16)+((a=(65535&M)+(65535&ne)+((o=(N>>>16)+(se>>>16)+((i=(65535&N)+(65535&se))>>>16))>>>16))>>>16),this.h7h=c<<16|65535&a,this.h7l=o<<16|65535&i},v.prototype.hex=function(){this.finalize();var e=this.h0h,t=this.h0l,r=this.h1h,n=this.h1l,s=this.h2h,i=this.h2l,o=this.h3h,a=this.h3l,c=this.h4h,l=this.h4l,h=this.h5h,d=this.h5l,p=this.h6h,f=this.h6l,g=this.h7h,m=this.h7l,y=this.bits,w=u[e>>28&15]+u[e>>24&15]+u[e>>20&15]+u[e>>16&15]+u[e>>12&15]+u[e>>8&15]+u[e>>4&15]+u[15&e]+u[t>>28&15]+u[t>>24&15]+u[t>>20&15]+u[t>>16&15]+u[t>>12&15]+u[t>>8&15]+u[t>>4&15]+u[15&t]+u[r>>28&15]+u[r>>24&15]+u[r>>20&15]+u[r>>16&15]+u[r>>12&15]+u[r>>8&15]+u[r>>4&15]+u[15&r]+u[n>>28&15]+u[n>>24&15]+u[n>>20&15]+u[n>>16&15]+u[n>>12&15]+u[n>>8&15]+u[n>>4&15]+u[15&n]+u[s>>28&15]+u[s>>24&15]+u[s>>20&15]+u[s>>16&15]+u[s>>12&15]+u[s>>8&15]+u[s>>4&15]+u[15&s]+u[i>>28&15]+u[i>>24&15]+u[i>>20&15]+u[i>>16&15]+u[i>>12&15]+u[i>>8&15]+u[i>>4&15]+u[15&i]+u[o>>28&15]+u[o>>24&15]+u[o>>20&15]+u[o>>16&15]+u[o>>12&15]+u[o>>8&15]+u[o>>4&15]+u[15&o];return y>=256&&(w+=u[a>>28&15]+u[a>>24&15]+u[a>>20&15]+u[a>>16&15]+u[a>>12&15]+u[a>>8&15]+u[a>>4&15]+u[15&a]),y>=384&&(w+=u[c>>28&15]+u[c>>24&15]+u[c>>20&15]+u[c>>16&15]+u[c>>12&15]+u[c>>8&15]+u[c>>4&15]+u[15&c]+u[l>>28&15]+u[l>>24&15]+u[l>>20&15]+u[l>>16&15]+u[l>>12&15]+u[l>>8&15]+u[l>>4&15]+u[15&l]+u[h>>28&15]+u[h>>24&15]+u[h>>20&15]+u[h>>16&15]+u[h>>12&15]+u[h>>8&15]+u[h>>4&15]+u[15&h]+u[d>>28&15]+u[d>>24&15]+u[d>>20&15]+u[d>>16&15]+u[d>>12&15]+u[d>>8&15]+u[d>>4&15]+u[15&d]),512==y&&(w+=u[p>>28&15]+u[p>>24&15]+u[p>>20&15]+u[p>>16&15]+u[p>>12&15]+u[p>>8&15]+u[p>>4&15]+u[15&p]+u[f>>28&15]+u[f>>24&15]+u[f>>20&15]+u[f>>16&15]+u[f>>12&15]+u[f>>8&15]+u[f>>4&15]+u[15&f]+u[g>>28&15]+u[g>>24&15]+u[g>>20&15]+u[g>>16&15]+u[g>>12&15]+u[g>>8&15]+u[g>>4&15]+u[15&g]+u[m>>28&15]+u[m>>24&15]+u[m>>20&15]+u[m>>16&15]+u[m>>12&15]+u[m>>8&15]+u[m>>4&15]+u[15&m]),w},v.prototype.toString=v.prototype.hex,v.prototype.digest=function(){this.finalize();var e=this.h0h,t=this.h0l,r=this.h1h,n=this.h1l,s=this.h2h,i=this.h2l,o=this.h3h,a=this.h3l,c=this.h4h,l=this.h4l,u=this.h5h,h=this.h5l,d=this.h6h,p=this.h6l,f=this.h7h,g=this.h7l,m=this.bits,y=[e>>24&255,e>>16&255,e>>8&255,255&e,t>>24&255,t>>16&255,t>>8&255,255&t,r>>24&255,r>>16&255,r>>8&255,255&r,n>>24&255,n>>16&255,n>>8&255,255&n,s>>24&255,s>>16&255,s>>8&255,255&s,i>>24&255,i>>16&255,i>>8&255,255&i,o>>24&255,o>>16&255,o>>8&255,255&o];return m>=256&&y.push(a>>24&255,a>>16&255,a>>8&255,255&a),m>=384&&y.push(c>>24&255,c>>16&255,c>>8&255,255&c,l>>24&255,l>>16&255,l>>8&255,255&l,u>>24&255,u>>16&255,u>>8&255,255&u,h>>24&255,h>>16&255,h>>8&255,255&h),512==m&&y.push(d>>24&255,d>>16&255,d>>8&255,255&d,p>>24&255,p>>16&255,p>>8&255,255&p,f>>24&255,f>>16&255,f>>8&255,255&f,g>>24&255,g>>16&255,g>>8&255,255&g),y},v.prototype.array=v.prototype.digest,v.prototype.arrayBuffer=function(){this.finalize();var e=this.bits,t=new ArrayBuffer(e/8),r=new DataView(t);return r.setUint32(0,this.h0h),r.setUint32(4,this.h0l),r.setUint32(8,this.h1h),r.setUint32(12,this.h1l),r.setUint32(16,this.h2h),r.setUint32(20,this.h2l),r.setUint32(24,this.h3h),e>=256&&r.setUint32(28,this.h3l),e>=384&&(r.setUint32(32,this.h4h),r.setUint32(36,this.h4l),r.setUint32(40,this.h5h),r.setUint32(44,this.h5l)),512==e&&(r.setUint32(48,this.h6h),r.setUint32(52,this.h6l),r.setUint32(56,this.h7h),r.setUint32(60,this.h7l)),t},v.prototype.clone=function(){var e=new v(this.bits,!1);return this.copyTo(e),e},v.prototype.copyTo=function(e){var t=0,r=["h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","start","bytes","hBytes","finalized","hashed","lastByteIndex"];for(t=0;t<r.length;++t)e[r[t]]=this[r[t]];for(t=0;t<this.blocks.length;++t)e.blocks[t]=this.blocks[t]},_.prototype=new v,_.prototype.finalize=function(){if(v.prototype.finalize.call(this),this.inner){this.inner=!1;var e=this.array();v.call(this,this.bits,this.sharedMemory),this.update(this.oKeyPad),this.update(e),v.prototype.finalize.call(this)}},_.prototype.clone=function(){var e=new _([],this.bits,!1);this.copyTo(e),e.inner=this.inner;for(var t=0;t<this.oKeyPad.length;++t)e.oKeyPad[t]=this.oKeyPad[t];return e};var A=y(512);A.sha512=A,A.sha384=y(384),A.sha512_256=y(256),A.sha512_224=y(224),A.sha512.hmac=b(512),A.sha384.hmac=b(384),A.sha512_256.hmac=b(256),A.sha512_224.hmac=b(224),a?e.exports=A:(i.sha512=A.sha512,i.sha384=A.sha384,i.sha512_256=A.sha512_256,i.sha512_224=A.sha512_224,c&&(void 0===(n=function(){return A}.call(A,r,A,e))||(e.exports=n)))}()},4400:(e,t,r)=>{var n=r(4123).stringify,s=r(6813);e.exports=function(e){return{parse:s(e),stringify:n}},e.exports.parse=s(),e.exports.stringify=n},6813:(e,t,r)=>{var n=null;const s=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,i=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;e.exports=function(e){"use strict";var t={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=e){if(!0===e.strict&&(t.strict=!0),!0===e.storeAsString&&(t.storeAsString=!0),t.alwaysParseAsBig=!0===e.alwaysParseAsBig&&e.alwaysParseAsBig,t.useNativeBigInt=!0===e.useNativeBigInt&&e.useNativeBigInt,void 0!==e.constructorAction){if("error"!==e.constructorAction&&"ignore"!==e.constructorAction&&"preserve"!==e.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${e.constructorAction}`);t.constructorAction=e.constructorAction}if(void 0!==e.protoAction){if("error"!==e.protoAction&&"ignore"!==e.protoAction&&"preserve"!==e.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${e.protoAction}`);t.protoAction=e.protoAction}}var o,a,c,l,u={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},h=function(e){throw{name:"SyntaxError",message:e,at:o,text:c}},d=function(e){return e&&e!==a&&h("Expected '"+e+"' instead of '"+a+"'"),a=c.charAt(o),o+=1,a},p=function(){var e,s="";for("-"===a&&(s="-",d("-"));a>="0"&&a<="9";)s+=a,d();if("."===a)for(s+=".";d()&&a>="0"&&a<="9";)s+=a;if("e"===a||"E"===a)for(s+=a,d(),"-"!==a&&"+"!==a||(s+=a,d());a>="0"&&a<="9";)s+=a,d();if(e=+s,isFinite(e))return null==n&&(n=r(4431)),s.length>15?t.storeAsString?s:t.useNativeBigInt?BigInt(s):new n(s):t.alwaysParseAsBig?t.useNativeBigInt?BigInt(e):new n(e):e;h("Bad number")},f=function(){var e,t,r,n="";if('"'===a)for(var s=o;d();){if('"'===a)return o-1>s&&(n+=c.substring(s,o-1)),d(),n;if("\\"===a){if(o-1>s&&(n+=c.substring(s,o-1)),d(),"u"===a){for(r=0,t=0;t<4&&(e=parseInt(d(),16),isFinite(e));t+=1)r=16*r+e;n+=String.fromCharCode(r)}else{if("string"!=typeof u[a])break;n+=u[a]}s=o}}h("Bad string")},g=function(){for(;a&&a<=" ";)d()};return l=function(){switch(g(),a){case"{":return function(){var e,r=Object.create(null);if("{"===a){if(d("{"),g(),"}"===a)return d("}"),r;for(;a;){if(e=f(),g(),d(":"),!0===t.strict&&Object.hasOwnProperty.call(r,e)&&h('Duplicate key "'+e+'"'),!0===s.test(e)?"error"===t.protoAction?h("Object contains forbidden prototype property"):"ignore"===t.protoAction?l():r[e]=l():!0===i.test(e)?"error"===t.constructorAction?h("Object contains forbidden constructor property"):"ignore"===t.constructorAction?l():r[e]=l():r[e]=l(),g(),"}"===a)return d("}"),r;d(","),g()}}h("Bad object")}();case"[":return function(){var e=[];if("["===a){if(d("["),g(),"]"===a)return d("]"),e;for(;a;){if(e.push(l()),g(),"]"===a)return d("]"),e;d(","),g()}}h("Bad array")}();case'"':return f();case"-":return p();default:return a>="0"&&a<="9"?p():function(){switch(a){case"t":return d("t"),d("r"),d("u"),d("e"),!0;case"f":return d("f"),d("a"),d("l"),d("s"),d("e"),!1;case"n":return d("n"),d("u"),d("l"),d("l"),null}h("Unexpected '"+a+"'")}()}},function(e,t){var r;return c=e+"",o=0,a=" ",r=l(),g(),a&&h("Syntax error"),"function"==typeof t?function e(r,n){var s,i=r[n];return i&&"object"==typeof i&&Object.keys(i).forEach((function(t){void 0!==(s=e(i,t))?i[t]=s:delete i[t]})),t.call(r,n,i)}({"":r},""):r}}},4123:(e,t,r)=>{var n=r(4431),s=e.exports;!function(){"use strict";var e,t,r,i=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,o={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function a(e){return i.lastIndex=0,i.test(e)?'"'+e.replace(i,(function(e){var t=o[e];return"string"==typeof t?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}function c(s,i){var o,l,u,h,d,p=e,f=i[s],g=null!=f&&(f instanceof n||n.isBigNumber(f));switch(f&&"object"==typeof f&&"function"==typeof f.toJSON&&(f=f.toJSON(s)),"function"==typeof r&&(f=r.call(i,s,f)),typeof f){case"string":return g?f:a(f);case"number":return isFinite(f)?String(f):"null";case"boolean":case"null":case"bigint":return String(f);case"object":if(!f)return"null";if(e+=t,d=[],"[object Array]"===Object.prototype.toString.apply(f)){for(h=f.length,o=0;o<h;o+=1)d[o]=c(o,f)||"null";return u=0===d.length?"[]":e?"[\n"+e+d.join(",\n"+e)+"\n"+p+"]":"["+d.join(",")+"]",e=p,u}if(r&&"object"==typeof r)for(h=r.length,o=0;o<h;o+=1)"string"==typeof r[o]&&(u=c(l=r[o],f))&&d.push(a(l)+(e?": ":":")+u);else Object.keys(f).forEach((function(t){var r=c(t,f);r&&d.push(a(t)+(e?": ":":")+r)}));return u=0===d.length?"{}":e?"{\n"+e+d.join(",\n"+e)+"\n"+p+"}":"{"+d.join(",")+"}",e=p,u}}"function"!=typeof s.stringify&&(s.stringify=function(n,s,i){var o;if(e="",t="","number"==typeof i)for(o=0;o<i;o+=1)t+=" ";else"string"==typeof i&&(t=i);if(r=s,s&&"function"!=typeof s&&("object"!=typeof s||"number"!=typeof s.length))throw new Error("JSON.stringify");return c("",{"":n})})}()},780:(e,t,r)=>{!function(e){"use strict";var t=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},n=function(){throw new Error("no PRNG")},s=new Uint8Array(16),i=new Uint8Array(32);i[0]=9;var o=t(),a=t([1]),c=t([56129,1]),l=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),h=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),d=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),p=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function f(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function g(e,t,r,n,s){var i,o=0;for(i=0;i<s;i++)o|=e[t+i]^r[n+i];return(1&o-1>>>8)-1}function m(e,t,r,n){return g(e,t,r,n,16)}function y(e,t,r,n){return g(e,t,r,n,32)}function w(e,t,r,n){!function(e,t,r,n){for(var s,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,l=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,h=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,d=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,f=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,y=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,w=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,b=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,v=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,_=i,A=o,x=a,E=c,T=l,k=u,S=h,I=d,R=p,B=f,P=g,U=m,C=y,O=w,$=b,D=v,L=0;L<20;L+=2)_^=(s=(C^=(s=(R^=(s=(T^=(s=_+C|0)<<7|s>>>25)+_|0)<<9|s>>>23)+T|0)<<13|s>>>19)+R|0)<<18|s>>>14,k^=(s=(A^=(s=(O^=(s=(B^=(s=k+A|0)<<7|s>>>25)+k|0)<<9|s>>>23)+B|0)<<13|s>>>19)+O|0)<<18|s>>>14,P^=(s=(S^=(s=(x^=(s=($^=(s=P+S|0)<<7|s>>>25)+P|0)<<9|s>>>23)+$|0)<<13|s>>>19)+x|0)<<18|s>>>14,D^=(s=(U^=(s=(I^=(s=(E^=(s=D+U|0)<<7|s>>>25)+D|0)<<9|s>>>23)+E|0)<<13|s>>>19)+I|0)<<18|s>>>14,_^=(s=(E^=(s=(x^=(s=(A^=(s=_+E|0)<<7|s>>>25)+_|0)<<9|s>>>23)+A|0)<<13|s>>>19)+x|0)<<18|s>>>14,k^=(s=(T^=(s=(I^=(s=(S^=(s=k+T|0)<<7|s>>>25)+k|0)<<9|s>>>23)+S|0)<<13|s>>>19)+I|0)<<18|s>>>14,P^=(s=(B^=(s=(R^=(s=(U^=(s=P+B|0)<<7|s>>>25)+P|0)<<9|s>>>23)+U|0)<<13|s>>>19)+R|0)<<18|s>>>14,D^=(s=($^=(s=(O^=(s=(C^=(s=D+$|0)<<7|s>>>25)+D|0)<<9|s>>>23)+C|0)<<13|s>>>19)+O|0)<<18|s>>>14;_=_+i|0,A=A+o|0,x=x+a|0,E=E+c|0,T=T+l|0,k=k+u|0,S=S+h|0,I=I+d|0,R=R+p|0,B=B+f|0,P=P+g|0,U=U+m|0,C=C+y|0,O=O+w|0,$=$+b|0,D=D+v|0,e[0]=_>>>0&255,e[1]=_>>>8&255,e[2]=_>>>16&255,e[3]=_>>>24&255,e[4]=A>>>0&255,e[5]=A>>>8&255,e[6]=A>>>16&255,e[7]=A>>>24&255,e[8]=x>>>0&255,e[9]=x>>>8&255,e[10]=x>>>16&255,e[11]=x>>>24&255,e[12]=E>>>0&255,e[13]=E>>>8&255,e[14]=E>>>16&255,e[15]=E>>>24&255,e[16]=T>>>0&255,e[17]=T>>>8&255,e[18]=T>>>16&255,e[19]=T>>>24&255,e[20]=k>>>0&255,e[21]=k>>>8&255,e[22]=k>>>16&255,e[23]=k>>>24&255,e[24]=S>>>0&255,e[25]=S>>>8&255,e[26]=S>>>16&255,e[27]=S>>>24&255,e[28]=I>>>0&255,e[29]=I>>>8&255,e[30]=I>>>16&255,e[31]=I>>>24&255,e[32]=R>>>0&255,e[33]=R>>>8&255,e[34]=R>>>16&255,e[35]=R>>>24&255,e[36]=B>>>0&255,e[37]=B>>>8&255,e[38]=B>>>16&255,e[39]=B>>>24&255,e[40]=P>>>0&255,e[41]=P>>>8&255,e[42]=P>>>16&255,e[43]=P>>>24&255,e[44]=U>>>0&255,e[45]=U>>>8&255,e[46]=U>>>16&255,e[47]=U>>>24&255,e[48]=C>>>0&255,e[49]=C>>>8&255,e[50]=C>>>16&255,e[51]=C>>>24&255,e[52]=O>>>0&255,e[53]=O>>>8&255,e[54]=O>>>16&255,e[55]=O>>>24&255,e[56]=$>>>0&255,e[57]=$>>>8&255,e[58]=$>>>16&255,e[59]=$>>>24&255,e[60]=D>>>0&255,e[61]=D>>>8&255,e[62]=D>>>16&255,e[63]=D>>>24&255}(e,t,r,n)}function b(e,t,r,n){!function(e,t,r,n){for(var s,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,l=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,h=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,d=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,f=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,g=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,y=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,w=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,b=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,v=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,_=0;_<20;_+=2)i^=(s=(y^=(s=(p^=(s=(l^=(s=i+y|0)<<7|s>>>25)+i|0)<<9|s>>>23)+l|0)<<13|s>>>19)+p|0)<<18|s>>>14,u^=(s=(o^=(s=(w^=(s=(f^=(s=u+o|0)<<7|s>>>25)+u|0)<<9|s>>>23)+f|0)<<13|s>>>19)+w|0)<<18|s>>>14,g^=(s=(h^=(s=(a^=(s=(b^=(s=g+h|0)<<7|s>>>25)+g|0)<<9|s>>>23)+b|0)<<13|s>>>19)+a|0)<<18|s>>>14,v^=(s=(m^=(s=(d^=(s=(c^=(s=v+m|0)<<7|s>>>25)+v|0)<<9|s>>>23)+c|0)<<13|s>>>19)+d|0)<<18|s>>>14,i^=(s=(c^=(s=(a^=(s=(o^=(s=i+c|0)<<7|s>>>25)+i|0)<<9|s>>>23)+o|0)<<13|s>>>19)+a|0)<<18|s>>>14,u^=(s=(l^=(s=(d^=(s=(h^=(s=u+l|0)<<7|s>>>25)+u|0)<<9|s>>>23)+h|0)<<13|s>>>19)+d|0)<<18|s>>>14,g^=(s=(f^=(s=(p^=(s=(m^=(s=g+f|0)<<7|s>>>25)+g|0)<<9|s>>>23)+m|0)<<13|s>>>19)+p|0)<<18|s>>>14,v^=(s=(b^=(s=(w^=(s=(y^=(s=v+b|0)<<7|s>>>25)+v|0)<<9|s>>>23)+y|0)<<13|s>>>19)+w|0)<<18|s>>>14;e[0]=i>>>0&255,e[1]=i>>>8&255,e[2]=i>>>16&255,e[3]=i>>>24&255,e[4]=u>>>0&255,e[5]=u>>>8&255,e[6]=u>>>16&255,e[7]=u>>>24&255,e[8]=g>>>0&255,e[9]=g>>>8&255,e[10]=g>>>16&255,e[11]=g>>>24&255,e[12]=v>>>0&255,e[13]=v>>>8&255,e[14]=v>>>16&255,e[15]=v>>>24&255,e[16]=h>>>0&255,e[17]=h>>>8&255,e[18]=h>>>16&255,e[19]=h>>>24&255,e[20]=d>>>0&255,e[21]=d>>>8&255,e[22]=d>>>16&255,e[23]=d>>>24&255,e[24]=p>>>0&255,e[25]=p>>>8&255,e[26]=p>>>16&255,e[27]=p>>>24&255,e[28]=f>>>0&255,e[29]=f>>>8&255,e[30]=f>>>16&255,e[31]=f>>>24&255}(e,t,r,n)}var v=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function _(e,t,r,n,s,i,o){var a,c,l=new Uint8Array(16),u=new Uint8Array(64);for(c=0;c<16;c++)l[c]=0;for(c=0;c<8;c++)l[c]=i[c];for(;s>=64;){for(w(u,l,o,v),c=0;c<64;c++)e[t+c]=r[n+c]^u[c];for(a=1,c=8;c<16;c++)a=a+(255&l[c])|0,l[c]=255&a,a>>>=8;s-=64,t+=64,n+=64}if(s>0)for(w(u,l,o,v),c=0;c<s;c++)e[t+c]=r[n+c]^u[c];return 0}function A(e,t,r,n,s){var i,o,a=new Uint8Array(16),c=new Uint8Array(64);for(o=0;o<16;o++)a[o]=0;for(o=0;o<8;o++)a[o]=n[o];for(;r>=64;){for(w(c,a,s,v),o=0;o<64;o++)e[t+o]=c[o];for(i=1,o=8;o<16;o++)i=i+(255&a[o])|0,a[o]=255&i,i>>>=8;r-=64,t+=64}if(r>0)for(w(c,a,s,v),o=0;o<r;o++)e[t+o]=c[o];return 0}function x(e,t,r,n,s){var i=new Uint8Array(32);b(i,n,s,v);for(var o=new Uint8Array(8),a=0;a<8;a++)o[a]=n[a+16];return A(e,t,r,o,i)}function E(e,t,r,n,s,i,o){var a=new Uint8Array(32);b(a,i,o,v);for(var c=new Uint8Array(8),l=0;l<8;l++)c[l]=i[l+16];return _(e,t,r,n,s,c,a)}var T=function(e){var t,r,n,s,i,o,a,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|r<<3),n=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(r>>>10|n<<6),s=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(n>>>7|s<<9),i=255&e[8]|(255&e[9])<<8,this.r[4]=255&(s>>>4|i<<12),this.r[5]=i>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(i>>>14|o<<2),a=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(o>>>11|a<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(a>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function k(e,t,r,n,s,i){var o=new T(i);return o.update(r,n,s),o.finish(e,t),0}function S(e,t,r,n,s,i){var o=new Uint8Array(16);return k(o,0,r,n,s,i),m(e,t,o,0)}function I(e,t,r,n,s){var i;if(r<32)return-1;for(E(e,0,t,0,r,n,s),k(e,16,e,32,r-32,e),i=0;i<16;i++)e[i]=0;return 0}function R(e,t,r,n,s){var i,o=new Uint8Array(32);if(r<32)return-1;if(x(o,0,32,n,s),0!==S(t,16,t,32,r-32,o))return-1;for(E(e,0,t,0,r,n,s),i=0;i<32;i++)e[i]=0;return 0}function B(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function P(e){var t,r,n=1;for(t=0;t<16;t++)r=e[t]+n+65535,n=Math.floor(r/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function U(e,t,r){for(var n,s=~(r-1),i=0;i<16;i++)n=s&(e[i]^t[i]),e[i]^=n,t[i]^=n}function C(e,r){var n,s,i,o=t(),a=t();for(n=0;n<16;n++)a[n]=r[n];for(P(a),P(a),P(a),s=0;s<2;s++){for(o[0]=a[0]-65517,n=1;n<15;n++)o[n]=a[n]-65535-(o[n-1]>>16&1),o[n-1]&=65535;o[15]=a[15]-32767-(o[14]>>16&1),i=o[15]>>16&1,o[14]&=65535,U(a,o,1-i)}for(n=0;n<16;n++)e[2*n]=255&a[n],e[2*n+1]=a[n]>>8}function O(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return C(r,e),C(n,t),y(r,0,n,0)}function $(e){var t=new Uint8Array(32);return C(t,e),1&t[0]}function D(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function L(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function j(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function q(e,t,r){var n,s,i=0,o=0,a=0,c=0,l=0,u=0,h=0,d=0,p=0,f=0,g=0,m=0,y=0,w=0,b=0,v=0,_=0,A=0,x=0,E=0,T=0,k=0,S=0,I=0,R=0,B=0,P=0,U=0,C=0,O=0,$=0,D=r[0],L=r[1],j=r[2],q=r[3],M=r[4],N=r[5],W=r[6],F=r[7],K=r[8],z=r[9],H=r[10],V=r[11],G=r[12],Y=r[13],X=r[14],Z=r[15];i+=(n=t[0])*D,o+=n*L,a+=n*j,c+=n*q,l+=n*M,u+=n*N,h+=n*W,d+=n*F,p+=n*K,f+=n*z,g+=n*H,m+=n*V,y+=n*G,w+=n*Y,b+=n*X,v+=n*Z,o+=(n=t[1])*D,a+=n*L,c+=n*j,l+=n*q,u+=n*M,h+=n*N,d+=n*W,p+=n*F,f+=n*K,g+=n*z,m+=n*H,y+=n*V,w+=n*G,b+=n*Y,v+=n*X,_+=n*Z,a+=(n=t[2])*D,c+=n*L,l+=n*j,u+=n*q,h+=n*M,d+=n*N,p+=n*W,f+=n*F,g+=n*K,m+=n*z,y+=n*H,w+=n*V,b+=n*G,v+=n*Y,_+=n*X,A+=n*Z,c+=(n=t[3])*D,l+=n*L,u+=n*j,h+=n*q,d+=n*M,p+=n*N,f+=n*W,g+=n*F,m+=n*K,y+=n*z,w+=n*H,b+=n*V,v+=n*G,_+=n*Y,A+=n*X,x+=n*Z,l+=(n=t[4])*D,u+=n*L,h+=n*j,d+=n*q,p+=n*M,f+=n*N,g+=n*W,m+=n*F,y+=n*K,w+=n*z,b+=n*H,v+=n*V,_+=n*G,A+=n*Y,x+=n*X,E+=n*Z,u+=(n=t[5])*D,h+=n*L,d+=n*j,p+=n*q,f+=n*M,g+=n*N,m+=n*W,y+=n*F,w+=n*K,b+=n*z,v+=n*H,_+=n*V,A+=n*G,x+=n*Y,E+=n*X,T+=n*Z,h+=(n=t[6])*D,d+=n*L,p+=n*j,f+=n*q,g+=n*M,m+=n*N,y+=n*W,w+=n*F,b+=n*K,v+=n*z,_+=n*H,A+=n*V,x+=n*G,E+=n*Y,T+=n*X,k+=n*Z,d+=(n=t[7])*D,p+=n*L,f+=n*j,g+=n*q,m+=n*M,y+=n*N,w+=n*W,b+=n*F,v+=n*K,_+=n*z,A+=n*H,x+=n*V,E+=n*G,T+=n*Y,k+=n*X,S+=n*Z,p+=(n=t[8])*D,f+=n*L,g+=n*j,m+=n*q,y+=n*M,w+=n*N,b+=n*W,v+=n*F,_+=n*K,A+=n*z,x+=n*H,E+=n*V,T+=n*G,k+=n*Y,S+=n*X,I+=n*Z,f+=(n=t[9])*D,g+=n*L,m+=n*j,y+=n*q,w+=n*M,b+=n*N,v+=n*W,_+=n*F,A+=n*K,x+=n*z,E+=n*H,T+=n*V,k+=n*G,S+=n*Y,I+=n*X,R+=n*Z,g+=(n=t[10])*D,m+=n*L,y+=n*j,w+=n*q,b+=n*M,v+=n*N,_+=n*W,A+=n*F,x+=n*K,E+=n*z,T+=n*H,k+=n*V,S+=n*G,I+=n*Y,R+=n*X,B+=n*Z,m+=(n=t[11])*D,y+=n*L,w+=n*j,b+=n*q,v+=n*M,_+=n*N,A+=n*W,x+=n*F,E+=n*K,T+=n*z,k+=n*H,S+=n*V,I+=n*G,R+=n*Y,B+=n*X,P+=n*Z,y+=(n=t[12])*D,w+=n*L,b+=n*j,v+=n*q,_+=n*M,A+=n*N,x+=n*W,E+=n*F,T+=n*K,k+=n*z,S+=n*H,I+=n*V,R+=n*G,B+=n*Y,P+=n*X,U+=n*Z,w+=(n=t[13])*D,b+=n*L,v+=n*j,_+=n*q,A+=n*M,x+=n*N,E+=n*W,T+=n*F,k+=n*K,S+=n*z,I+=n*H,R+=n*V,B+=n*G,P+=n*Y,U+=n*X,C+=n*Z,b+=(n=t[14])*D,v+=n*L,_+=n*j,A+=n*q,x+=n*M,E+=n*N,T+=n*W,k+=n*F,S+=n*K,I+=n*z,R+=n*H,B+=n*V,P+=n*G,U+=n*Y,C+=n*X,O+=n*Z,v+=(n=t[15])*D,o+=38*(A+=n*j),a+=38*(x+=n*q),c+=38*(E+=n*M),l+=38*(T+=n*N),u+=38*(k+=n*W),h+=38*(S+=n*F),d+=38*(I+=n*K),p+=38*(R+=n*z),f+=38*(B+=n*H),g+=38*(P+=n*V),m+=38*(U+=n*G),y+=38*(C+=n*Y),w+=38*(O+=n*X),b+=38*($+=n*Z),i=(n=(i+=38*(_+=n*L))+(s=1)+65535)-65536*(s=Math.floor(n/65536)),o=(n=o+s+65535)-65536*(s=Math.floor(n/65536)),a=(n=a+s+65535)-65536*(s=Math.floor(n/65536)),c=(n=c+s+65535)-65536*(s=Math.floor(n/65536)),l=(n=l+s+65535)-65536*(s=Math.floor(n/65536)),u=(n=u+s+65535)-65536*(s=Math.floor(n/65536)),h=(n=h+s+65535)-65536*(s=Math.floor(n/65536)),d=(n=d+s+65535)-65536*(s=Math.floor(n/65536)),p=(n=p+s+65535)-65536*(s=Math.floor(n/65536)),f=(n=f+s+65535)-65536*(s=Math.floor(n/65536)),g=(n=g+s+65535)-65536*(s=Math.floor(n/65536)),m=(n=m+s+65535)-65536*(s=Math.floor(n/65536)),y=(n=y+s+65535)-65536*(s=Math.floor(n/65536)),w=(n=w+s+65535)-65536*(s=Math.floor(n/65536)),b=(n=b+s+65535)-65536*(s=Math.floor(n/65536)),v=(n=v+s+65535)-65536*(s=Math.floor(n/65536)),i=(n=(i+=s-1+37*(s-1))+(s=1)+65535)-65536*(s=Math.floor(n/65536)),o=(n=o+s+65535)-65536*(s=Math.floor(n/65536)),a=(n=a+s+65535)-65536*(s=Math.floor(n/65536)),c=(n=c+s+65535)-65536*(s=Math.floor(n/65536)),l=(n=l+s+65535)-65536*(s=Math.floor(n/65536)),u=(n=u+s+65535)-65536*(s=Math.floor(n/65536)),h=(n=h+s+65535)-65536*(s=Math.floor(n/65536)),d=(n=d+s+65535)-65536*(s=Math.floor(n/65536)),p=(n=p+s+65535)-65536*(s=Math.floor(n/65536)),f=(n=f+s+65535)-65536*(s=Math.floor(n/65536)),g=(n=g+s+65535)-65536*(s=Math.floor(n/65536)),m=(n=m+s+65535)-65536*(s=Math.floor(n/65536)),y=(n=y+s+65535)-65536*(s=Math.floor(n/65536)),w=(n=w+s+65535)-65536*(s=Math.floor(n/65536)),b=(n=b+s+65535)-65536*(s=Math.floor(n/65536)),v=(n=v+s+65535)-65536*(s=Math.floor(n/65536)),i+=s-1+37*(s-1),e[0]=i,e[1]=o,e[2]=a,e[3]=c,e[4]=l,e[5]=u,e[6]=h,e[7]=d,e[8]=p,e[9]=f,e[10]=g,e[11]=m,e[12]=y,e[13]=w,e[14]=b,e[15]=v}function M(e,t){q(e,t,t)}function N(e,r){var n,s=t();for(n=0;n<16;n++)s[n]=r[n];for(n=253;n>=0;n--)M(s,s),2!==n&&4!==n&&q(s,s,r);for(n=0;n<16;n++)e[n]=s[n]}function W(e,r){var n,s=t();for(n=0;n<16;n++)s[n]=r[n];for(n=250;n>=0;n--)M(s,s),1!==n&&q(s,s,r);for(n=0;n<16;n++)e[n]=s[n]}function F(e,r,n){var s,i,o=new Uint8Array(32),a=new Float64Array(80),l=t(),u=t(),h=t(),d=t(),p=t(),f=t();for(i=0;i<31;i++)o[i]=r[i];for(o[31]=127&r[31]|64,o[0]&=248,D(a,n),i=0;i<16;i++)u[i]=a[i],d[i]=l[i]=h[i]=0;for(l[0]=d[0]=1,i=254;i>=0;--i)U(l,u,s=o[i>>>3]>>>(7&i)&1),U(h,d,s),L(p,l,h),j(l,l,h),L(h,u,d),j(u,u,d),M(d,p),M(f,l),q(l,h,l),q(h,u,p),L(p,l,h),j(l,l,h),M(u,l),j(h,d,f),q(l,h,c),L(l,l,d),q(h,h,l),q(l,d,f),q(d,u,a),M(u,p),U(l,u,s),U(h,d,s);for(i=0;i<16;i++)a[i+16]=l[i],a[i+32]=h[i],a[i+48]=u[i],a[i+64]=d[i];var g=a.subarray(32),m=a.subarray(16);return N(g,g),q(m,m,g),C(e,m),0}function K(e,t){return F(e,t,i)}function z(e,t){return n(t,32),K(e,t)}function H(e,t,r){var n=new Uint8Array(32);return F(n,r,t),b(e,s,n,v)}T.prototype.blocks=function(e,t,r){for(var n,s,i,o,a,c,l,u,h,d,p,f,g,m,y,w,b,v,_,A=this.fin?0:2048,x=this.h[0],E=this.h[1],T=this.h[2],k=this.h[3],S=this.h[4],I=this.h[5],R=this.h[6],B=this.h[7],P=this.h[8],U=this.h[9],C=this.r[0],O=this.r[1],$=this.r[2],D=this.r[3],L=this.r[4],j=this.r[5],q=this.r[6],M=this.r[7],N=this.r[8],W=this.r[9];r>=16;)d=h=0,d+=(x+=8191&(n=255&e[t+0]|(255&e[t+1])<<8))*C,d+=(E+=8191&(n>>>13|(s=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*W),d+=(T+=8191&(s>>>10|(i=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*N),d+=(k+=8191&(i>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*M),h=(d+=(S+=8191&(o>>>4|(a=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*q))>>>13,d&=8191,d+=(I+=a>>>1&8191)*(5*j),d+=(R+=8191&(a>>>14|(c=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*L),d+=(B+=8191&(c>>>11|(l=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*D),d+=(P+=8191&(l>>>8|(u=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*$),p=h+=(d+=(U+=u>>>5|A)*(5*O))>>>13,p+=x*O,p+=E*C,p+=T*(5*W),p+=k*(5*N),h=(p+=S*(5*M))>>>13,p&=8191,p+=I*(5*q),p+=R*(5*j),p+=B*(5*L),p+=P*(5*D),h+=(p+=U*(5*$))>>>13,p&=8191,f=h,f+=x*$,f+=E*O,f+=T*C,f+=k*(5*W),h=(f+=S*(5*N))>>>13,f&=8191,f+=I*(5*M),f+=R*(5*q),f+=B*(5*j),f+=P*(5*L),g=h+=(f+=U*(5*D))>>>13,g+=x*D,g+=E*$,g+=T*O,g+=k*C,h=(g+=S*(5*W))>>>13,g&=8191,g+=I*(5*N),g+=R*(5*M),g+=B*(5*q),g+=P*(5*j),m=h+=(g+=U*(5*L))>>>13,m+=x*L,m+=E*D,m+=T*$,m+=k*O,h=(m+=S*C)>>>13,m&=8191,m+=I*(5*W),m+=R*(5*N),m+=B*(5*M),m+=P*(5*q),y=h+=(m+=U*(5*j))>>>13,y+=x*j,y+=E*L,y+=T*D,y+=k*$,h=(y+=S*O)>>>13,y&=8191,y+=I*C,y+=R*(5*W),y+=B*(5*N),y+=P*(5*M),w=h+=(y+=U*(5*q))>>>13,w+=x*q,w+=E*j,w+=T*L,w+=k*D,h=(w+=S*$)>>>13,w&=8191,w+=I*O,w+=R*C,w+=B*(5*W),w+=P*(5*N),b=h+=(w+=U*(5*M))>>>13,b+=x*M,b+=E*q,b+=T*j,b+=k*L,h=(b+=S*D)>>>13,b&=8191,b+=I*$,b+=R*O,b+=B*C,b+=P*(5*W),v=h+=(b+=U*(5*N))>>>13,v+=x*N,v+=E*M,v+=T*q,v+=k*j,h=(v+=S*L)>>>13,v&=8191,v+=I*D,v+=R*$,v+=B*O,v+=P*C,_=h+=(v+=U*(5*W))>>>13,_+=x*W,_+=E*N,_+=T*M,_+=k*q,h=(_+=S*j)>>>13,_&=8191,_+=I*L,_+=R*D,_+=B*$,_+=P*O,x=d=8191&(h=(h=((h+=(_+=U*C)>>>13)<<2)+h|0)+(d&=8191)|0),E=p+=h>>>=13,T=f&=8191,k=g&=8191,S=m&=8191,I=y&=8191,R=w&=8191,B=b&=8191,P=v&=8191,U=_&=8191,t+=16,r-=16;this.h[0]=x,this.h[1]=E,this.h[2]=T,this.h[3]=k,this.h[4]=S,this.h[5]=I,this.h[6]=R,this.h[7]=B,this.h[8]=P,this.h[9]=U},T.prototype.finish=function(e,t){var r,n,s,i,o=new Uint16Array(10);if(this.leftover){for(i=this.leftover,this.buffer[i++]=1;i<16;i++)this.buffer[i]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,i=2;i<10;i++)this.h[i]+=r,r=this.h[i]>>>13,this.h[i]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,i=1;i<10;i++)o[i]=this.h[i]+r,r=o[i]>>>13,o[i]&=8191;for(o[9]-=8192,n=(1^r)-1,i=0;i<10;i++)o[i]&=n;for(n=~n,i=0;i<10;i++)this.h[i]=this.h[i]&n|o[i];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),s=this.h[0]+this.pad[0],this.h[0]=65535&s,i=1;i<8;i++)s=(this.h[i]+this.pad[i]|0)+(s>>>16)|0,this.h[i]=65535&s;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},T.prototype.update=function(e,t,r){var n,s;if(this.leftover){for((s=16-this.leftover)>r&&(s=r),n=0;n<s;n++)this.buffer[this.leftover+n]=e[t+n];if(r-=s,t+=s,this.leftover+=s,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(s=r-r%16,this.blocks(e,t,s),t+=s,r-=s),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=r}};var V=I,G=R,Y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function X(e,t,r,n){for(var s,i,o,a,c,l,u,h,d,p,f,g,m,y,w,b,v,_,A,x,E,T,k,S,I,R,B=new Int32Array(16),P=new Int32Array(16),U=e[0],C=e[1],O=e[2],$=e[3],D=e[4],L=e[5],j=e[6],q=e[7],M=t[0],N=t[1],W=t[2],F=t[3],K=t[4],z=t[5],H=t[6],V=t[7],G=0;n>=128;){for(A=0;A<16;A++)x=8*A+G,B[A]=r[x+0]<<24|r[x+1]<<16|r[x+2]<<8|r[x+3],P[A]=r[x+4]<<24|r[x+5]<<16|r[x+6]<<8|r[x+7];for(A=0;A<80;A++)if(s=U,i=C,o=O,a=$,c=D,l=L,u=j,d=M,p=N,f=W,g=F,m=K,y=z,w=H,k=65535&(T=V),S=T>>>16,I=65535&(E=q),R=E>>>16,k+=65535&(T=(K>>>14|D<<18)^(K>>>18|D<<14)^(D>>>9|K<<23)),S+=T>>>16,I+=65535&(E=(D>>>14|K<<18)^(D>>>18|K<<14)^(K>>>9|D<<23)),R+=E>>>16,k+=65535&(T=K&z^~K&H),S+=T>>>16,I+=65535&(E=D&L^~D&j),R+=E>>>16,E=Y[2*A],k+=65535&(T=Y[2*A+1]),S+=T>>>16,I+=65535&E,R+=E>>>16,E=B[A%16],S+=(T=P[A%16])>>>16,I+=65535&E,R+=E>>>16,I+=(S+=(k+=65535&T)>>>16)>>>16,k=65535&(T=_=65535&k|S<<16),S=T>>>16,I=65535&(E=v=65535&I|(R+=I>>>16)<<16),R=E>>>16,k+=65535&(T=(M>>>28|U<<4)^(U>>>2|M<<30)^(U>>>7|M<<25)),S+=T>>>16,I+=65535&(E=(U>>>28|M<<4)^(M>>>2|U<<30)^(M>>>7|U<<25)),R+=E>>>16,S+=(T=M&N^M&W^N&W)>>>16,I+=65535&(E=U&C^U&O^C&O),R+=E>>>16,h=65535&(I+=(S+=(k+=65535&T)>>>16)>>>16)|(R+=I>>>16)<<16,b=65535&k|S<<16,k=65535&(T=g),S=T>>>16,I=65535&(E=a),R=E>>>16,S+=(T=_)>>>16,I+=65535&(E=v),R+=E>>>16,C=s,O=i,$=o,D=a=65535&(I+=(S+=(k+=65535&T)>>>16)>>>16)|(R+=I>>>16)<<16,L=c,j=l,q=u,U=h,N=d,W=p,F=f,K=g=65535&k|S<<16,z=m,H=y,V=w,M=b,A%16==15)for(x=0;x<16;x++)E=B[x],k=65535&(T=P[x]),S=T>>>16,I=65535&E,R=E>>>16,E=B[(x+9)%16],k+=65535&(T=P[(x+9)%16]),S+=T>>>16,I+=65535&E,R+=E>>>16,v=B[(x+1)%16],k+=65535&(T=((_=P[(x+1)%16])>>>1|v<<31)^(_>>>8|v<<24)^(_>>>7|v<<25)),S+=T>>>16,I+=65535&(E=(v>>>1|_<<31)^(v>>>8|_<<24)^v>>>7),R+=E>>>16,v=B[(x+14)%16],S+=(T=((_=P[(x+14)%16])>>>19|v<<13)^(v>>>29|_<<3)^(_>>>6|v<<26))>>>16,I+=65535&(E=(v>>>19|_<<13)^(_>>>29|v<<3)^v>>>6),R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,B[x]=65535&I|R<<16,P[x]=65535&k|S<<16;k=65535&(T=M),S=T>>>16,I=65535&(E=U),R=E>>>16,E=e[0],S+=(T=t[0])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[0]=U=65535&I|R<<16,t[0]=M=65535&k|S<<16,k=65535&(T=N),S=T>>>16,I=65535&(E=C),R=E>>>16,E=e[1],S+=(T=t[1])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[1]=C=65535&I|R<<16,t[1]=N=65535&k|S<<16,k=65535&(T=W),S=T>>>16,I=65535&(E=O),R=E>>>16,E=e[2],S+=(T=t[2])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[2]=O=65535&I|R<<16,t[2]=W=65535&k|S<<16,k=65535&(T=F),S=T>>>16,I=65535&(E=$),R=E>>>16,E=e[3],S+=(T=t[3])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[3]=$=65535&I|R<<16,t[3]=F=65535&k|S<<16,k=65535&(T=K),S=T>>>16,I=65535&(E=D),R=E>>>16,E=e[4],S+=(T=t[4])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[4]=D=65535&I|R<<16,t[4]=K=65535&k|S<<16,k=65535&(T=z),S=T>>>16,I=65535&(E=L),R=E>>>16,E=e[5],S+=(T=t[5])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[5]=L=65535&I|R<<16,t[5]=z=65535&k|S<<16,k=65535&(T=H),S=T>>>16,I=65535&(E=j),R=E>>>16,E=e[6],S+=(T=t[6])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[6]=j=65535&I|R<<16,t[6]=H=65535&k|S<<16,k=65535&(T=V),S=T>>>16,I=65535&(E=q),R=E>>>16,E=e[7],S+=(T=t[7])>>>16,I+=65535&E,R+=E>>>16,R+=(I+=(S+=(k+=65535&T)>>>16)>>>16)>>>16,e[7]=q=65535&I|R<<16,t[7]=V=65535&k|S<<16,G+=128,n-=128}return n}function Z(e,t,r){var n,s=new Int32Array(8),i=new Int32Array(8),o=new Uint8Array(256),a=r;for(s[0]=1779033703,s[1]=3144134277,s[2]=1013904242,s[3]=2773480762,s[4]=1359893119,s[5]=2600822924,s[6]=528734635,s[7]=1541459225,i[0]=4089235720,i[1]=2227873595,i[2]=4271175723,i[3]=1595750129,i[4]=2917565137,i[5]=725511199,i[6]=4215389547,i[7]=327033209,X(s,i,t,r),r%=128,n=0;n<r;n++)o[n]=t[a-r+n];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,f(o,r-8,a/536870912|0,a<<3),X(s,i,o,r),n=0;n<8;n++)f(e,8*n,s[n],i[n]);return 0}function J(e,r){var n=t(),s=t(),i=t(),o=t(),a=t(),c=t(),l=t(),h=t(),d=t();j(n,e[1],e[0]),j(d,r[1],r[0]),q(n,n,d),L(s,e[0],e[1]),L(d,r[0],r[1]),q(s,s,d),q(i,e[3],r[3]),q(i,i,u),q(o,e[2],r[2]),L(o,o,o),j(a,s,n),j(c,o,i),L(l,o,i),L(h,s,n),q(e[0],a,c),q(e[1],h,l),q(e[2],l,c),q(e[3],a,h)}function Q(e,t,r){var n;for(n=0;n<4;n++)U(e[n],t[n],r)}function ee(e,r){var n=t(),s=t(),i=t();N(i,r[2]),q(n,r[0],i),q(s,r[1],i),C(e,s),e[31]^=$(n)<<7}function te(e,t,r){var n,s;for(B(e[0],o),B(e[1],a),B(e[2],a),B(e[3],o),s=255;s>=0;--s)Q(e,t,n=r[s/8|0]>>(7&s)&1),J(t,e),J(e,e),Q(e,t,n)}function re(e,r){var n=[t(),t(),t(),t()];B(n[0],h),B(n[1],d),B(n[2],a),q(n[3],h,d),te(e,n,r)}function ne(e,r,s){var i,o=new Uint8Array(64),a=[t(),t(),t(),t()];for(s||n(r,32),Z(o,r,32),o[0]&=248,o[31]&=127,o[31]|=64,re(a,o),ee(e,a),i=0;i<32;i++)r[i+32]=e[i];return 0}var se=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ie(e,t){var r,n,s,i;for(n=63;n>=32;--n){for(r=0,s=n-32,i=n-12;s<i;++s)t[s]+=r-16*t[n]*se[s-(n-32)],r=Math.floor((t[s]+128)/256),t[s]-=256*r;t[s]+=r,t[n]=0}for(r=0,s=0;s<32;s++)t[s]+=r-(t[31]>>4)*se[s],r=t[s]>>8,t[s]&=255;for(s=0;s<32;s++)t[s]-=r*se[s];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function oe(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;ie(e,r)}function ae(e,r,n,s){var i,o,a=new Uint8Array(64),c=new Uint8Array(64),l=new Uint8Array(64),u=new Float64Array(64),h=[t(),t(),t(),t()];Z(a,s,32),a[0]&=248,a[31]&=127,a[31]|=64;var d=n+64;for(i=0;i<n;i++)e[64+i]=r[i];for(i=0;i<32;i++)e[32+i]=a[32+i];for(Z(l,e.subarray(32),n+32),oe(l),re(h,l),ee(e,h),i=32;i<64;i++)e[i]=s[i];for(Z(c,e,n+64),oe(c),i=0;i<64;i++)u[i]=0;for(i=0;i<32;i++)u[i]=l[i];for(i=0;i<32;i++)for(o=0;o<32;o++)u[i+o]+=c[i]*a[o];return ie(e.subarray(32),u),d}function ce(e,r,n,s){var i,c=new Uint8Array(32),u=new Uint8Array(64),h=[t(),t(),t(),t()],d=[t(),t(),t(),t()];if(n<64)return-1;if(function(e,r){var n=t(),s=t(),i=t(),c=t(),u=t(),h=t(),d=t();return B(e[2],a),D(e[1],r),M(i,e[1]),q(c,i,l),j(i,i,e[2]),L(c,e[2],c),M(u,c),M(h,u),q(d,h,u),q(n,d,i),q(n,n,c),W(n,n),q(n,n,i),q(n,n,c),q(n,n,c),q(e[0],n,c),M(s,e[0]),q(s,s,c),O(s,i)&&q(e[0],e[0],p),M(s,e[0]),q(s,s,c),O(s,i)?-1:($(e[0])===r[31]>>7&&j(e[0],o,e[0]),q(e[3],e[0],e[1]),0)}(d,s))return-1;for(i=0;i<n;i++)e[i]=r[i];for(i=0;i<32;i++)e[i+32]=s[i];if(Z(u,e,n),oe(u),te(h,d,u),re(d,r.subarray(32)),J(h,d),ee(c,h),n-=64,y(r,0,c,0)){for(i=0;i<n;i++)e[i]=0;return-1}for(i=0;i<n;i++)e[i]=r[i+64];return n}var le=32,ue=24,he=ue,de=64,pe=32,fe=64;function ge(e,t){if(e.length!==le)throw new Error("bad key size");if(t.length!==ue)throw new Error("bad nonce size")}function me(){for(var e=0;e<arguments.length;e++)if(!(arguments[e]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function ye(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:b,crypto_stream_xor:E,crypto_stream:x,crypto_stream_salsa20_xor:_,crypto_stream_salsa20:A,crypto_onetimeauth:k,crypto_onetimeauth_verify:S,crypto_verify_16:m,crypto_verify_32:y,crypto_secretbox:I,crypto_secretbox_open:R,crypto_scalarmult:F,crypto_scalarmult_base:K,crypto_box_beforenm:H,crypto_box_afternm:V,crypto_box:function(e,t,r,n,s,i){var o=new Uint8Array(32);return H(o,s,i),V(e,t,r,n,o)},crypto_box_open:function(e,t,r,n,s,i){var o=new Uint8Array(32);return H(o,s,i),G(e,t,r,n,o)},crypto_box_keypair:z,crypto_hash:Z,crypto_sign:ae,crypto_sign_keypair:ne,crypto_sign_open:ce,crypto_secretbox_KEYBYTES:le,crypto_secretbox_NONCEBYTES:ue,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:he,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:de,crypto_sign_PUBLICKEYBYTES:pe,crypto_sign_SECRETKEYBYTES:fe,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:t,D:l,L:se,pack25519:C,unpack25519:D,M:q,A:L,S:M,Z:j,pow2523:W,add:J,set25519:B,modL:ie,scalarmult:te,scalarbase:re},e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,r){me(e,t,r),ge(r,t);for(var n=new Uint8Array(32+e.length),s=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+32]=e[i];return I(s,n,n.length,t,r),s.subarray(16)},e.secretbox.open=function(e,t,r){me(e,t,r),ge(r,t);for(var n=new Uint8Array(16+e.length),s=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+16]=e[i];return n.length<32||0!==R(s,n,n.length,t,r)?null:s.subarray(32)},e.secretbox.keyLength=le,e.secretbox.nonceLength=ue,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(me(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var r=new Uint8Array(32);return F(r,e,t),r},e.scalarMult.base=function(e){if(me(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return K(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,n,s){var i=e.box.before(n,s);return e.secretbox(t,r,i)},e.box.before=function(e,t){me(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return H(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,n,s){var i=e.box.before(n,s);return e.secretbox.open(t,r,i)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return z(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(me(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return K(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=he,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(me(e,t),t.length!==fe)throw new Error("bad secret key size");var r=new Uint8Array(de+e.length);return ae(r,e,e.length,t),r},e.sign.open=function(e,t){if(me(e,t),t.length!==pe)throw new Error("bad public key size");var r=new Uint8Array(e.length),n=ce(r,e,e.length,t);if(n<0)return null;for(var s=new Uint8Array(n),i=0;i<s.length;i++)s[i]=r[i];return s},e.sign.detached=function(t,r){for(var n=e.sign(t,r),s=new Uint8Array(de),i=0;i<s.length;i++)s[i]=n[i];return s},e.sign.detached.verify=function(e,t,r){if(me(e,t,r),t.length!==de)throw new Error("bad signature size");if(r.length!==pe)throw new Error("bad public key size");var n,s=new Uint8Array(de+e.length),i=new Uint8Array(de+e.length);for(n=0;n<de;n++)s[n]=t[n];for(n=0;n<e.length;n++)s[n+de]=e[n];return ce(i,s,s.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(pe),t=new Uint8Array(fe);return ne(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(me(e),e.length!==fe)throw new Error("bad secret key size");for(var t=new Uint8Array(pe),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(me(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(pe),r=new Uint8Array(fe),n=0;n<32;n++)r[n]=e[n];return ne(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=pe,e.sign.secretKeyLength=fe,e.sign.seedLength=32,e.sign.signatureLength=de,e.hash=function(e){me(e);var t=new Uint8Array(64);return Z(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return me(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===g(e,0,t,0,e.length)},e.setPRNG=function(e){n=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;t&&t.getRandomValues?e.setPRNG((function(e,r){var n,s=new Uint8Array(r);for(n=0;n<r;n+=65536)t.getRandomValues(s.subarray(n,n+Math.min(r-n,65536)));for(n=0;n<r;n++)e[n]=s[n];ye(s)})):(t=r(5024))&&t.randomBytes&&e.setPRNG((function(e,r){var n,s=t.randomBytes(r);for(n=0;n<r;n++)e[n]=s[n];ye(s)}))}()}(e.exports?e.exports:self.nacl=self.nacl||{})},2592:(e,t,r)=>{"use strict";r.d(t,{g:()=>s});var n=r(9182);async function s(e,t,r=200){let s=`${n.Z.urls[n.Z.network].peraApiUrl}/assets/${e}`;try{const e=await fetch(s),n=await e.json();n.collectible.media[0].preview_url&&(t.src=`${n.collectible.media[0].preview_url}?height=${r}`)}catch(e){console.log(`Can't load asset image from ${s}`),t.src="default.png"}}},9182:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n={maxNfts:4,network:"mainnet",urls:{mainnet:{algodUrl:"https://xna-mainnet-api.algonode.cloud",algoIndexerUrl:"https://mainnet-idx.algonode.cloud",claimApiUrl:"https://api.atomixwap.xyz",peraApiUrl:"https://mainnet.api.perawallet.app/v1"},testnet:{algodUrl:"https://node.testnet.algoexplorerapi.io",algoIndexerUrl:"https://algoindexer.testnet.algoexplorerapi.io",claimApiUrl:"https://localhost",peraApiUrl:"https://testnet.api.perawallet.app/v1"}}}},5984:(e,t,r)=>{"use strict";r.d(t,{X:()=>s});var n=r(4126);class s{constructor(e,t,r){this.walletConnect=e,this.algodClient=t,this.algoIndexer=r,this.transactions,this.transactionsOrder,this.assets,this.currencyAsset}static signedTxToBase64(e){return btoa(String.fromCharCode.apply(null,e))}static base64ToSignedTx(e){const t=atob(e),r=t.length,n=new Uint8Array(r);for(var s=0;s<r;s++)n[s]=t.charCodeAt(s);return n}async generateTransactions(e){this.assets=[];for(const t of e.assetIds){const e=await this.algoIndexer.lookupAssetByID(t).do();this.assets.push(e.asset)}if("algo"!==e.currency&&"nft"!==e.currency){const t=await this.algoIndexer.lookupAssetByID(parseInt(e.currency)).do();this.currencyAsset=t.asset}else if("nft"===e.currency){const t=await this.algoIndexer.lookupAssetByID(e.priceAssetId).do();this.currencyAsset=t.asset,e.price=1}let t=await this.algodClient.getTransactionParams().do();this.transactions={},this.transactionsOrder=[],this.transactions.optins=[];for(const r of e.assetIds)this.transactions.optins.push(n.default.makeAssetTransferTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.buyerAddress,to:e.buyerAddress,assetIndex:r,amount:0}));this.transactionsOrder.push("optins");const r=(new TextEncoder).encode("atomixwap");this.transactions.assetTransfers=[];for(const s of e.assetIds)this.transactions.assetTransfers.push(n.default.makeAssetTransferTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.sellerAddress,to:e.buyerAddress,assetIndex:s,amount:1,note:r}));if(this.transactionsOrder.push("assetTransfers"),e.price>0)if("algo"===e.currency){let r=Math.round(1e6*e.price);e.royalties&&e.royalties>0&&"algo"===e.currency&&(r-=Math.round(1e6*e.royalties)),this.transactions.payment=n.default.makePaymentTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.buyerAddress,to:e.sellerAddress,amount:r}),this.transactionsOrder.push("payment")}else{let r;r="nft"!==e.currency?parseInt(e.currency):e.priceAssetId,this.transactions.optinCurrency=n.default.makeAssetTransferTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.sellerAddress,to:e.sellerAddress,assetIndex:r,amount:0}),this.transactionsOrder.push("optinCurrency"),this.transactions.payment=n.default.makeAssetTransferTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.buyerAddress,to:e.sellerAddress,assetIndex:r,amount:Math.round(e.price)}),this.transactionsOrder.push("payment")}if(e.price>0&&e.royalties&&e.royalties>0&&"algo"===e.currency){const r=this.assets[0].params.creator,s=Math.round(1e6*e.royalties);this.transactions.royaltiesPayment=n.default.makePaymentTxnWithSuggestedParamsFromObject({suggestedParams:{...t},from:e.buyerAddress,to:r,amount:s}),this.transactionsOrder.push("royaltiesPayment")}let s=[];for(const e of this.transactionsOrder)Array.isArray(this.transactions[e])?s=s.concat(this.transactions[e]):s.push(this.transactions[e]);e.firstRound&&s.map((t=>t.firstRound=e.firstRound)),e.lastRound&&s.map((t=>t.lastRound=e.lastRound)),n.default.assignGroupID(s)}async signAndGetLink(e){let t=[];for(const e of this.transactionsOrder)this.transactions[e]&&(Array.isArray(this.transactions[e])?t=t.concat(this.transactions[e]):t.push(this.transactions[e]));const r=await this.walletConnect.signTransactions(t);let i={},o=[];for(const e of r)e&&o.push(n.default.decodeSignedTransaction(e));for(const e of this.transactionsOrder)if(Array.isArray(this.transactions[e]))for(const t of this.transactions[e]){i[e]||(i[e]=[]);const n=t.txID();let s=0;for(const t of o){if(t.txn.txID()===n){i[e].push(r[s]);break}s++}}else{const t=this.transactions[e].txID();let n=0;for(const s of o){if(s.txn.txID()===t){i[e]=r[n];break}n++}}let a="algo",c=0;this.transactions.payment&&("pay"===this.transactions.payment.type?(a="algo",c=this.transactions.payment.amount/1e6):(a=this.transactions.payment.assetIndex,c=this.transactions.payment.amount));let l={price:c,currency:a,signedTransferTxs:i.assetTransfers.map((e=>s.signedTxToBase64(e)))};this.transactions.optinCurrency&&(l.signedOptinCurrencyTx=s.signedTxToBase64(i.optinCurrency)),this.transactions.royaltiesPayment&&this.transactions.payment&&(l.royalties=this.transactions.royaltiesPayment.amount/1e6,l.price=(this.transactions.payment.amount+this.transactions.royaltiesPayment.amount)/1e6);const u=JSON.stringify(l);return`${e}?swap=${btoa(u)}`}async signAndCommitTransactions(e,t,r,s,i){let o,a=[];for(const e of this.transactionsOrder)Array.isArray(this.transactions[e])?a=a.concat(this.transactions[e]):this.transactions[e]&&a.push(this.transactions[e]);try{o=await this.walletConnect.signTransactions(a)}catch(e){return void i(e)}r();let c=[...o,...e,t],l=[];for(const e of c)e&&l.push(n.default.decodeSignedTransaction(e));let u,h=[];for(const e of this.transactionsOrder)if(Array.isArray(this.transactions[e]))for(const t of this.transactions[e]){const e=t.txID();let r=0;for(const t of l){if(t.txn.txID()===e){h.push(c[r]);break}r++}}else{const t=this.transactions[e].txID();let r=0;for(const e of l){if(e.txn.txID()===t){h.push(c[r]);break}r++}}try{u=await this.algodClient.sendRawTransaction(h).do()}catch(e){return console.log(e),void i(e)}let d=await n.default.waitForConfirmation(this.algodClient,u.txId,4);console.log("Transaction "+u.txId+" confirmed in round "+d["confirmed-round"]),s()}}},5024:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={id:e,loaded:!1,exports:{}};return s[e].call(r.exports,r,r.exports,o),r.loaded=!0,r.exports}o.m=s,o.amdO={},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(r,n){if(1&n&&(r=this(r)),8&n)return r;if("object"==typeof r&&r){if(4&n&&r.__esModule)return r;if(16&n&&"function"==typeof r.then)return r}var s=Object.create(null);o.r(s);var i={};e=e||[null,t({}),t([]),t(t)];for(var a=2&n&&r;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>i[e]=()=>r[e]));return i.default=()=>r,o.d(s,i),s},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>e+"."+{72:"24c1973fab473691747e",186:"6b6e44b1d7551b36b2f1",339:"e97e710f4016826a244d",441:"49944396fb8cb4edcc01",563:"8cf7004501897d997fbf",586:"04fa405cfde11be86876",644:"f216679706ac0b4340e6",948:"2af07260c3246b1c89c3"}[e]+".js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},n="atomixwap:",o.l=(e,t,s,i)=>{if(r[e])r[e].push(t);else{var a,c;if(void 0!==s)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var h=l[u];if(h.getAttribute("src")==e||h.getAttribute("data-webpack")==n+s){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",n+s),a.src=e),r[e]=[t];var d=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var s=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(n))),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var s=new Promise(((r,s)=>n=e[t]=[r,s]));r.push(n[2]=s);var i=o.p+o.u(t),a=new Error;o.l(i,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var s=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+s+": "+i+")",a.name="ChunkLoadError",a.type=s,a.request=i,n[1](a)}}),"chunk-"+t,t)}};var t=(t,r)=>{var n,s,[i,a,c]=r,l=0;if(i.some((t=>0!==e[t]))){for(n in a)o.o(a,n)&&(o.m[n]=a[n]);c&&c(o)}for(t&&t(r);l<i.length;l++)s=i[l],o.o(e,s)&&e[s]&&e[s][0](),e[s]=0},r=self.webpackChunkatomixwap=self.webpackChunkatomixwap||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),(()=>{"use strict";var e={};o.r(e),o.d(e,{afterMain:()=>_,afterRead:()=>w,afterWrite:()=>E,applyStyles:()=>P,arrow:()=>Y,auto:()=>i,basePlacements:()=>a,beforeMain:()=>b,beforeRead:()=>m,beforeWrite:()=>A,bottom:()=>r,clippingParents:()=>u,computeStyles:()=>Q,createPopper:()=>Ie,createPopperBase:()=>Se,createPopperLite:()=>Re,detectOverflow:()=>fe,end:()=>l,eventListeners:()=>te,flip:()=>ge,hide:()=>we,left:()=>s,main:()=>v,modifierPhases:()=>T,offset:()=>be,placements:()=>g,popper:()=>d,popperGenerator:()=>ke,popperOffsets:()=>ve,preventOverflow:()=>_e,read:()=>y,reference:()=>p,right:()=>n,start:()=>c,top:()=>t,variationPlacements:()=>f,viewport:()=>h,write:()=>x});var t="top",r="bottom",n="right",s="left",i="auto",a=[t,r,n,s],c="start",l="end",u="clippingParents",h="viewport",d="popper",p="reference",f=a.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+l])}),[]),g=[].concat(a,[i]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+l])}),[]),m="beforeRead",y="read",w="afterRead",b="beforeMain",v="main",_="afterMain",A="beforeWrite",x="write",E="afterWrite",T=[m,y,w,b,v,_,A,x,E];function k(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function I(e){return e instanceof S(e).Element||e instanceof Element}function R(e){return e instanceof S(e).HTMLElement||e instanceof HTMLElement}function B(e){return"undefined"!=typeof ShadowRoot&&(e instanceof S(e).ShadowRoot||e instanceof ShadowRoot)}const P={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var r=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];R(s)&&k(s)&&(Object.assign(s.style,r),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,r={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,r.popper),t.styles=r,t.elements.arrow&&Object.assign(t.elements.arrow.style,r.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:r[e]).reduce((function(e,t){return e[t]="",e}),{});R(n)&&k(n)&&(Object.assign(n.style,i),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function U(e){return e.split("-")[0]}var C=Math.max,O=Math.min,$=Math.round;function D(e,t){void 0===t&&(t=!1);var r=e.getBoundingClientRect(),n=1,s=1;if(R(e)&&t){var i=e.offsetHeight,o=e.offsetWidth;o>0&&(n=$(r.width)/o||1),i>0&&(s=$(r.height)/i||1)}return{width:r.width/n,height:r.height/s,top:r.top/s,right:r.right/n,bottom:r.bottom/s,left:r.left/n,x:r.left/n,y:r.top/s}}function L(e){var t=D(e),r=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-r)<=1&&(r=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:r,height:n}}function j(e,t){var r=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(r&&B(r)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function q(e){return S(e).getComputedStyle(e)}function M(e){return["table","td","th"].indexOf(k(e))>=0}function N(e){return((I(e)?e.ownerDocument:e.document)||window.document).documentElement}function W(e){return"html"===k(e)?e:e.assignedSlot||e.parentNode||(B(e)?e.host:null)||N(e)}function F(e){return R(e)&&"fixed"!==q(e).position?e.offsetParent:null}function K(e){for(var t=S(e),r=F(e);r&&M(r)&&"static"===q(r).position;)r=F(r);return r&&("html"===k(r)||"body"===k(r)&&"static"===q(r).position)?t:r||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&R(e)&&"fixed"===q(e).position)return null;var r=W(e);for(B(r)&&(r=r.host);R(r)&&["html","body"].indexOf(k(r))<0;){var n=q(r);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return r;r=r.parentNode}return null}(e)||t}function z(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function H(e,t,r){return C(e,O(t,r))}function V(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function G(e,t){return t.reduce((function(t,r){return t[r]=e,t}),{})}const Y={name:"arrow",enabled:!0,phase:"main",fn:function(e){var i,o=e.state,c=e.name,l=e.options,u=o.elements.arrow,h=o.modifiersData.popperOffsets,d=U(o.placement),p=z(d),f=[s,n].indexOf(d)>=0?"height":"width";if(u&&h){var g=function(e,t){return V("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:G(e,a))}(l.padding,o),m=L(u),y="y"===p?t:s,w="y"===p?r:n,b=o.rects.reference[f]+o.rects.reference[p]-h[p]-o.rects.popper[f],v=h[p]-o.rects.reference[p],_=K(u),A=_?"y"===p?_.clientHeight||0:_.clientWidth||0:0,x=b/2-v/2,E=g[y],T=A-m[f]-g[w],k=A/2-m[f]/2+x,S=H(E,k,T),I=p;o.modifiersData[c]=((i={})[I]=S,i.centerOffset=S-k,i)}},effect:function(e){var t=e.state,r=e.options.element,n=void 0===r?"[data-popper-arrow]":r;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&j(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function X(e){return e.split("-")[1]}var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function J(e){var i,o=e.popper,a=e.popperRect,c=e.placement,u=e.variation,h=e.offsets,d=e.position,p=e.gpuAcceleration,f=e.adaptive,g=e.roundOffsets,m=e.isFixed,y=h.x,w=void 0===y?0:y,b=h.y,v=void 0===b?0:b,_="function"==typeof g?g({x:w,y:v}):{x:w,y:v};w=_.x,v=_.y;var A=h.hasOwnProperty("x"),x=h.hasOwnProperty("y"),E=s,T=t,k=window;if(f){var I=K(o),R="clientHeight",B="clientWidth";I===S(o)&&"static"!==q(I=N(o)).position&&"absolute"===d&&(R="scrollHeight",B="scrollWidth"),(c===t||(c===s||c===n)&&u===l)&&(T=r,v-=(m&&I===k&&k.visualViewport?k.visualViewport.height:I[R])-a.height,v*=p?1:-1),c!==s&&(c!==t&&c!==r||u!==l)||(E=n,w-=(m&&I===k&&k.visualViewport?k.visualViewport.width:I[B])-a.width,w*=p?1:-1)}var P,U=Object.assign({position:d},f&&Z),C=!0===g?function(e){var t=e.x,r=e.y,n=window.devicePixelRatio||1;return{x:$(t*n)/n||0,y:$(r*n)/n||0}}({x:w,y:v}):{x:w,y:v};return w=C.x,v=C.y,p?Object.assign({},U,((P={})[T]=x?"0":"",P[E]=A?"0":"",P.transform=(k.devicePixelRatio||1)<=1?"translate("+w+"px, "+v+"px)":"translate3d("+w+"px, "+v+"px, 0)",P)):Object.assign({},U,((i={})[T]=x?v+"px":"",i[E]=A?w+"px":"",i.transform="",i))}const Q={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,r=e.options,n=r.gpuAcceleration,s=void 0===n||n,i=r.adaptive,o=void 0===i||i,a=r.roundOffsets,c=void 0===a||a,l={placement:U(t.placement),variation:X(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,J(Object.assign({},l,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,J(Object.assign({},l,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ee={passive:!0};const te={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,r=e.instance,n=e.options,s=n.scroll,i=void 0===s||s,o=n.resize,a=void 0===o||o,c=S(t.elements.popper),l=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&l.forEach((function(e){e.addEventListener("scroll",r.update,ee)})),a&&c.addEventListener("resize",r.update,ee),function(){i&&l.forEach((function(e){e.removeEventListener("scroll",r.update,ee)})),a&&c.removeEventListener("resize",r.update,ee)}},data:{}};var re={left:"right",right:"left",bottom:"top",top:"bottom"};function ne(e){return e.replace(/left|right|bottom|top/g,(function(e){return re[e]}))}var se={start:"end",end:"start"};function ie(e){return e.replace(/start|end/g,(function(e){return se[e]}))}function oe(e){var t=S(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ae(e){return D(N(e)).left+oe(e).scrollLeft}function ce(e){var t=q(e),r=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(r+s+n)}function le(e){return["html","body","#document"].indexOf(k(e))>=0?e.ownerDocument.body:R(e)&&ce(e)?e:le(W(e))}function ue(e,t){var r;void 0===t&&(t=[]);var n=le(e),s=n===(null==(r=e.ownerDocument)?void 0:r.body),i=S(n),o=s?[i].concat(i.visualViewport||[],ce(n)?n:[]):n,a=t.concat(o);return s?a:a.concat(ue(W(o)))}function he(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function de(e,t){return t===h?he(function(e){var t=S(e),r=N(e),n=t.visualViewport,s=r.clientWidth,i=r.clientHeight,o=0,a=0;return n&&(s=n.width,i=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(o=n.offsetLeft,a=n.offsetTop)),{width:s,height:i,x:o+ae(e),y:a}}(e)):I(t)?function(e){var t=D(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):he(function(e){var t,r=N(e),n=oe(e),s=null==(t=e.ownerDocument)?void 0:t.body,i=C(r.scrollWidth,r.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),o=C(r.scrollHeight,r.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ae(e),c=-n.scrollTop;return"rtl"===q(s||r).direction&&(a+=C(r.clientWidth,s?s.clientWidth:0)-i),{width:i,height:o,x:a,y:c}}(N(e)))}function pe(e){var i,o=e.reference,a=e.element,u=e.placement,h=u?U(u):null,d=u?X(u):null,p=o.x+o.width/2-a.width/2,f=o.y+o.height/2-a.height/2;switch(h){case t:i={x:p,y:o.y-a.height};break;case r:i={x:p,y:o.y+o.height};break;case n:i={x:o.x+o.width,y:f};break;case s:i={x:o.x-a.width,y:f};break;default:i={x:o.x,y:o.y}}var g=h?z(h):null;if(null!=g){var m="y"===g?"height":"width";switch(d){case c:i[g]=i[g]-(o[m]/2-a[m]/2);break;case l:i[g]=i[g]+(o[m]/2-a[m]/2)}}return i}function fe(e,s){void 0===s&&(s={});var i=s,o=i.placement,c=void 0===o?e.placement:o,l=i.boundary,f=void 0===l?u:l,g=i.rootBoundary,m=void 0===g?h:g,y=i.elementContext,w=void 0===y?d:y,b=i.altBoundary,v=void 0!==b&&b,_=i.padding,A=void 0===_?0:_,x=V("number"!=typeof A?A:G(A,a)),E=w===d?p:d,T=e.rects.popper,S=e.elements[v?E:w],B=function(e,t,r){var n="clippingParents"===t?function(e){var t=ue(W(e)),r=["absolute","fixed"].indexOf(q(e).position)>=0&&R(e)?K(e):e;return I(r)?t.filter((function(e){return I(e)&&j(e,r)&&"body"!==k(e)})):[]}(e):[].concat(t),s=[].concat(n,[r]),i=s[0],o=s.reduce((function(t,r){var n=de(e,r);return t.top=C(n.top,t.top),t.right=O(n.right,t.right),t.bottom=O(n.bottom,t.bottom),t.left=C(n.left,t.left),t}),de(e,i));return o.width=o.right-o.left,o.height=o.bottom-o.top,o.x=o.left,o.y=o.top,o}(I(S)?S:S.contextElement||N(e.elements.popper),f,m),P=D(e.elements.reference),U=pe({reference:P,element:T,strategy:"absolute",placement:c}),$=he(Object.assign({},T,U)),L=w===d?$:P,M={top:B.top-L.top+x.top,bottom:L.bottom-B.bottom+x.bottom,left:B.left-L.left+x.left,right:L.right-B.right+x.right},F=e.modifiersData.offset;if(w===d&&F){var z=F[c];Object.keys(M).forEach((function(e){var s=[n,r].indexOf(e)>=0?1:-1,i=[t,r].indexOf(e)>=0?"y":"x";M[e]+=z[i]*s}))}return M}const ge={name:"flip",enabled:!0,phase:"main",fn:function(e){var o=e.state,l=e.options,u=e.name;if(!o.modifiersData[u]._skip){for(var h=l.mainAxis,d=void 0===h||h,p=l.altAxis,m=void 0===p||p,y=l.fallbackPlacements,w=l.padding,b=l.boundary,v=l.rootBoundary,_=l.altBoundary,A=l.flipVariations,x=void 0===A||A,E=l.allowedAutoPlacements,T=o.options.placement,k=U(T),S=y||(k!==T&&x?function(e){if(U(e)===i)return[];var t=ne(e);return[ie(e),t,ie(t)]}(T):[ne(T)]),I=[T].concat(S).reduce((function(e,t){return e.concat(U(t)===i?function(e,t){void 0===t&&(t={});var r=t,n=r.placement,s=r.boundary,i=r.rootBoundary,o=r.padding,c=r.flipVariations,l=r.allowedAutoPlacements,u=void 0===l?g:l,h=X(n),d=h?c?f:f.filter((function(e){return X(e)===h})):a,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var m=p.reduce((function(t,r){return t[r]=fe(e,{placement:r,boundary:s,rootBoundary:i,padding:o})[U(r)],t}),{});return Object.keys(m).sort((function(e,t){return m[e]-m[t]}))}(o,{placement:t,boundary:b,rootBoundary:v,padding:w,flipVariations:x,allowedAutoPlacements:E}):t)}),[]),R=o.rects.reference,B=o.rects.popper,P=new Map,C=!0,O=I[0],$=0;$<I.length;$++){var D=I[$],L=U(D),j=X(D)===c,q=[t,r].indexOf(L)>=0,M=q?"width":"height",N=fe(o,{placement:D,boundary:b,rootBoundary:v,altBoundary:_,padding:w}),W=q?j?n:s:j?r:t;R[M]>B[M]&&(W=ne(W));var F=ne(W),K=[];if(d&&K.push(N[L]<=0),m&&K.push(N[W]<=0,N[F]<=0),K.every((function(e){return e}))){O=D,C=!1;break}P.set(D,K)}if(C)for(var z=function(e){var t=I.find((function(t){var r=P.get(t);if(r)return r.slice(0,e).every((function(e){return e}))}));if(t)return O=t,"break"},H=x?3:1;H>0&&"break"!==z(H);H--);o.placement!==O&&(o.modifiersData[u]._skip=!0,o.placement=O,o.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function me(e,t,r){return void 0===r&&(r={x:0,y:0}),{top:e.top-t.height-r.y,right:e.right-t.width+r.x,bottom:e.bottom-t.height+r.y,left:e.left-t.width-r.x}}function ye(e){return[t,n,r,s].some((function(t){return e[t]>=0}))}const we={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,r=e.name,n=t.rects.reference,s=t.rects.popper,i=t.modifiersData.preventOverflow,o=fe(t,{elementContext:"reference"}),a=fe(t,{altBoundary:!0}),c=me(o,n),l=me(a,s,i),u=ye(c),h=ye(l);t.modifiersData[r]={referenceClippingOffsets:c,popperEscapeOffsets:l,isReferenceHidden:u,hasPopperEscaped:h},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":h})}},be={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var r=e.state,i=e.options,o=e.name,a=i.offset,c=void 0===a?[0,0]:a,l=g.reduce((function(e,i){return e[i]=function(e,r,i){var o=U(e),a=[s,t].indexOf(o)>=0?-1:1,c="function"==typeof i?i(Object.assign({},r,{placement:e})):i,l=c[0],u=c[1];return l=l||0,u=(u||0)*a,[s,n].indexOf(o)>=0?{x:u,y:l}:{x:l,y:u}}(i,r.rects,c),e}),{}),u=l[r.placement],h=u.x,d=u.y;null!=r.modifiersData.popperOffsets&&(r.modifiersData.popperOffsets.x+=h,r.modifiersData.popperOffsets.y+=d),r.modifiersData[o]=l}},ve={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,r=e.name;t.modifiersData[r]=pe({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},_e={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var i=e.state,o=e.options,a=e.name,l=o.mainAxis,u=void 0===l||l,h=o.altAxis,d=void 0!==h&&h,p=o.boundary,f=o.rootBoundary,g=o.altBoundary,m=o.padding,y=o.tether,w=void 0===y||y,b=o.tetherOffset,v=void 0===b?0:b,_=fe(i,{boundary:p,rootBoundary:f,padding:m,altBoundary:g}),A=U(i.placement),x=X(i.placement),E=!x,T=z(A),k="x"===T?"y":"x",S=i.modifiersData.popperOffsets,I=i.rects.reference,R=i.rects.popper,B="function"==typeof v?v(Object.assign({},i.rects,{placement:i.placement})):v,P="number"==typeof B?{mainAxis:B,altAxis:B}:Object.assign({mainAxis:0,altAxis:0},B),$=i.modifiersData.offset?i.modifiersData.offset[i.placement]:null,D={x:0,y:0};if(S){if(u){var j,q="y"===T?t:s,M="y"===T?r:n,N="y"===T?"height":"width",W=S[T],F=W+_[q],V=W-_[M],G=w?-R[N]/2:0,Y=x===c?I[N]:R[N],Z=x===c?-R[N]:-I[N],J=i.elements.arrow,Q=w&&J?L(J):{width:0,height:0},ee=i.modifiersData["arrow#persistent"]?i.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[q],re=ee[M],ne=H(0,I[N],Q[N]),se=E?I[N]/2-G-ne-te-P.mainAxis:Y-ne-te-P.mainAxis,ie=E?-I[N]/2+G+ne+re+P.mainAxis:Z+ne+re+P.mainAxis,oe=i.elements.arrow&&K(i.elements.arrow),ae=oe?"y"===T?oe.clientTop||0:oe.clientLeft||0:0,ce=null!=(j=null==$?void 0:$[T])?j:0,le=W+ie-ce,ue=H(w?O(F,W+se-ce-ae):F,W,w?C(V,le):V);S[T]=ue,D[T]=ue-W}if(d){var he,de="x"===T?t:s,pe="x"===T?r:n,ge=S[k],me="y"===k?"height":"width",ye=ge+_[de],we=ge-_[pe],be=-1!==[t,s].indexOf(A),ve=null!=(he=null==$?void 0:$[k])?he:0,_e=be?ye:ge-I[me]-R[me]-ve+P.altAxis,Ae=be?ge+I[me]+R[me]-ve-P.altAxis:we,xe=w&&be?function(e,t,r){var n=H(e,t,r);return n>r?r:n}(_e,ge,Ae):H(w?_e:ye,ge,w?Ae:we);S[k]=xe,D[k]=xe-ge}i.modifiersData[a]=D}},requiresIfExists:["offset"]};function Ae(e,t,r){void 0===r&&(r=!1);var n,s,i=R(t),o=R(t)&&function(e){var t=e.getBoundingClientRect(),r=$(t.width)/e.offsetWidth||1,n=$(t.height)/e.offsetHeight||1;return 1!==r||1!==n}(t),a=N(t),c=D(e,o),l={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(i||!i&&!r)&&(("body"!==k(t)||ce(a))&&(l=(n=t)!==S(n)&&R(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:oe(n)),R(t)?((u=D(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=ae(a))),{x:c.left+l.scrollLeft-u.x,y:c.top+l.scrollTop-u.y,width:c.width,height:c.height}}function xe(e){var t=new Map,r=new Set,n=[];function s(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!r.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){r.has(e.name)||s(e)})),n}var Ee={placement:"bottom",modifiers:[],strategy:"absolute"};function Te(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function ke(e){void 0===e&&(e={});var t=e,r=t.defaultModifiers,n=void 0===r?[]:r,s=t.defaultOptions,i=void 0===s?Ee:s;return function(e,t,r){void 0===r&&(r=i);var s,o,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ee,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],l=!1,u={state:a,setOptions:function(r){var s="function"==typeof r?r(a.options):r;h(),a.options=Object.assign({},i,a.options,s),a.scrollParents={reference:I(e)?ue(e):e.contextElement?ue(e.contextElement):[],popper:ue(t)};var o,l,d=function(e){var t=xe(e);return T.reduce((function(e,r){return e.concat(t.filter((function(e){return e.phase===r})))}),[])}((o=[].concat(n,a.options.modifiers),l=o.reduce((function(e,t){var r=e[t.name];return e[t.name]=r?Object.assign({},r,t,{options:Object.assign({},r.options,t.options),data:Object.assign({},r.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return a.orderedModifiers=d.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,r=e.options,n=void 0===r?{}:r,s=e.effect;if("function"==typeof s){var i=s({state:a,name:t,instance:u,options:n});c.push(i||function(){})}})),u.update()},forceUpdate:function(){if(!l){var e=a.elements,t=e.reference,r=e.popper;if(Te(t,r)){a.rects={reference:Ae(t,K(r),"fixed"===a.options.strategy),popper:L(r)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],i=s.fn,o=s.options,c=void 0===o?{}:o,h=s.name;"function"==typeof i&&(a=i({state:a,options:c,name:h,instance:u})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){u.forceUpdate(),e(a)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(s())}))}))),o}),destroy:function(){h(),l=!0}};if(!Te(e,t))return u;function h(){c.forEach((function(e){return e()})),c=[]}return u.setOptions(r).then((function(e){!l&&r.onFirstUpdate&&r.onFirstUpdate(e)})),u}}var Se=ke(),Ie=ke({defaultModifiers:[te,ve,Q,P,be,ge,_e,Y,we]}),Re=ke({defaultModifiers:[te,ve,Q,P]});const Be="transitionend",Pe=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let r=e.getAttribute("href");if(!r||!r.includes("#")&&!r.startsWith("."))return null;r.includes("#")&&!r.startsWith("#")&&(r=`#${r.split("#")[1]}`),t=r&&"#"!==r?r.trim():null}return t},Ue=e=>{const t=Pe(e);return t&&document.querySelector(t)?t:null},Ce=e=>{const t=Pe(e);return t?document.querySelector(t):null},Oe=e=>{e.dispatchEvent(new Event(Be))},$e=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),De=e=>$e(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,Le=(e,t,r)=>{Object.keys(r).forEach((n=>{const s=r[n],i=t[n],o=i&&$e(i)?"element":null==(a=i)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(s).test(o))throw new TypeError(`${e.toUpperCase()}: Option "${n}" provided type "${o}" but expected type "${s}".`)}))},je=e=>!(!$e(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility"),qe=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Me=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Me(e.parentNode):null},Ne=()=>{},We=e=>{e.offsetHeight},Fe=()=>{const{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},Ke=[],ze=()=>"rtl"===document.documentElement.dir,He=e=>{var t;t=()=>{const t=Fe();if(t){const r=e.NAME,n=t.fn[r];t.fn[r]=e.jQueryInterface,t.fn[r].Constructor=e,t.fn[r].noConflict=()=>(t.fn[r]=n,e.jQueryInterface)}},"loading"===document.readyState?(Ke.length||document.addEventListener("DOMContentLoaded",(()=>{Ke.forEach((e=>e()))})),Ke.push(t)):t()},Ve=e=>{"function"==typeof e&&e()},Ge=(e,t,r=!0)=>{if(!r)return void Ve(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:r}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(r);return n||s?(t=t.split(",")[0],r=r.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(r))):0})(t)+5;let s=!1;const i=({target:r})=>{r===t&&(s=!0,t.removeEventListener(Be,i),Ve(e))};t.addEventListener(Be,i),setTimeout((()=>{s||Oe(t)}),n)},Ye=(e,t,r,n)=>{let s=e.indexOf(t);if(-1===s)return e[!r&&n?e.length-1:0];const i=e.length;return s+=r?1:-1,n&&(s=(s+i)%i),e[Math.max(0,Math.min(s,i-1))]},Xe=/[^.]*(?=\..*)\.|.*/,Ze=/\..*/,Je=/::\d+$/,Qe={};let et=1;const tt={mouseenter:"mouseover",mouseleave:"mouseout"},rt=/^(mouseenter|mouseleave)/i,nt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function st(e,t){return t&&`${t}::${et++}`||e.uidEvent||et++}function it(e){const t=st(e);return e.uidEvent=t,Qe[t]=Qe[t]||{},Qe[t]}function ot(e,t,r=null){const n=Object.keys(e);for(let s=0,i=n.length;s<i;s++){const i=e[n[s]];if(i.originalHandler===t&&i.delegationSelector===r)return i}return null}function at(e,t,r){const n="string"==typeof t,s=n?r:t;let i=ut(e);return nt.has(i)||(i=e),[n,s,i]}function ct(e,t,r,n,s){if("string"!=typeof t||!e)return;if(r||(r=n,n=null),rt.test(t)){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};n?n=e(n):r=e(r)}const[i,o,a]=at(t,r,n),c=it(e),l=c[a]||(c[a]={}),u=ot(l,o,i?r:null);if(u)return void(u.oneOff=u.oneOff&&s);const h=st(o,t.replace(Xe,"")),d=i?function(e,t,r){return function n(s){const i=e.querySelectorAll(t);for(let{target:o}=s;o&&o!==this;o=o.parentNode)for(let a=i.length;a--;)if(i[a]===o)return s.delegateTarget=o,n.oneOff&&ht.off(e,s.type,t,r),r.apply(o,[s]);return null}}(e,r,n):function(e,t){return function r(n){return n.delegateTarget=e,r.oneOff&&ht.off(e,n.type,t),t.apply(e,[n])}}(e,r);d.delegationSelector=i?r:null,d.originalHandler=o,d.oneOff=s,d.uidEvent=h,l[h]=d,e.addEventListener(a,d,i)}function lt(e,t,r,n,s){const i=ot(t[r],n,s);i&&(e.removeEventListener(r,i,Boolean(s)),delete t[r][i.uidEvent])}function ut(e){return e=e.replace(Ze,""),tt[e]||e}const ht={on(e,t,r,n){ct(e,t,r,n,!1)},one(e,t,r,n){ct(e,t,r,n,!0)},off(e,t,r,n){if("string"!=typeof t||!e)return;const[s,i,o]=at(t,r,n),a=o!==t,c=it(e),l=t.startsWith(".");if(void 0!==i){if(!c||!c[o])return;return void lt(e,c,o,i,s?r:null)}l&&Object.keys(c).forEach((r=>{!function(e,t,r,n){const s=t[r]||{};Object.keys(s).forEach((i=>{if(i.includes(n)){const n=s[i];lt(e,t,r,n.originalHandler,n.delegationSelector)}}))}(e,c,r,t.slice(1))}));const u=c[o]||{};Object.keys(u).forEach((r=>{const n=r.replace(Je,"");if(!a||t.includes(n)){const t=u[r];lt(e,c,o,t.originalHandler,t.delegationSelector)}}))},trigger(e,t,r){if("string"!=typeof t||!e)return null;const n=Fe(),s=ut(t),i=t!==s,o=nt.has(s);let a,c=!0,l=!0,u=!1,h=null;return i&&n&&(a=n.Event(t,r),n(e).trigger(a),c=!a.isPropagationStopped(),l=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),o?(h=document.createEvent("HTMLEvents"),h.initEvent(s,c,!0)):h=new CustomEvent(t,{bubbles:c,cancelable:!0}),void 0!==r&&Object.keys(r).forEach((e=>{Object.defineProperty(h,e,{get:()=>r[e]})})),u&&h.preventDefault(),l&&e.dispatchEvent(h),h.defaultPrevented&&void 0!==a&&a.preventDefault(),h}},dt=new Map,pt={set(e,t,r){dt.has(e)||dt.set(e,new Map);const n=dt.get(e);n.has(t)||0===n.size?n.set(t,r):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>dt.has(e)&&dt.get(e).get(t)||null,remove(e,t){if(!dt.has(e))return;const r=dt.get(e);r.delete(t),0===r.size&&dt.delete(e)}};class ft{constructor(e){(e=De(e))&&(this._element=e,pt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){pt.remove(this._element,this.constructor.DATA_KEY),ht.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((e=>{this[e]=null}))}_queueCallback(e,t,r=!0){Ge(e,t,r)}static getInstance(e){return pt.get(De(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const gt=(e,t="hide")=>{const r=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;ht.on(document,r,`[data-bs-dismiss="${n}"]`,(function(r){if(["A","AREA"].includes(this.tagName)&&r.preventDefault(),qe(this))return;const s=Ce(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))},mt=".bs.alert",yt=`close${mt}`,wt=`closed${mt}`;class bt extends ft{static get NAME(){return"alert"}close(){if(ht.trigger(this._element,yt).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),ht.trigger(this._element,wt),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}gt(bt,"close"),He(bt);const vt='[data-bs-toggle="button"]';class _t extends ft{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=_t.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}function At(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function xt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}ht.on(document,"click.bs.button.data-api",vt,(e=>{e.preventDefault();const t=e.target.closest(vt);_t.getOrCreateInstance(t).toggle()})),He(_t);const Et={setDataAttribute(e,t,r){e.setAttribute(`data-bs-${xt(t)}`,r)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${xt(t)}`)},getDataAttributes(e){if(!e)return{};const t={};return Object.keys(e.dataset).filter((e=>e.startsWith("bs"))).forEach((r=>{let n=r.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=At(e.dataset[r])})),t},getDataAttribute:(e,t)=>At(e.getAttribute(`data-bs-${xt(t)}`)),offset(e){const t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:e=>({top:e.offsetTop,left:e.offsetLeft})},Tt={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const r=[];let n=e.parentNode;for(;n&&n.nodeType===Node.ELEMENT_NODE&&3!==n.nodeType;)n.matches(t)&&r.push(n),n=n.parentNode;return r},prev(e,t){let r=e.previousElementSibling;for(;r;){if(r.matches(t))return[r];r=r.previousElementSibling}return[]},next(e,t){let r=e.nextElementSibling;for(;r;){if(r.matches(t))return[r];r=r.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(", ");return this.find(t,e).filter((e=>!qe(e)&&je(e)))}},kt="carousel",St=".bs.carousel",It=".data-api",Rt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Bt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Pt="next",Ut="prev",Ct="left",Ot="right",$t={ArrowLeft:Ot,ArrowRight:Ct},Dt=`slide${St}`,Lt=`slid${St}`,jt=`keydown${St}`,qt=`mouseenter${St}`,Mt=`mouseleave${St}`,Nt=`touchstart${St}`,Wt=`touchmove${St}`,Ft=`touchend${St}`,Kt=`pointerdown${St}`,zt=`pointerup${St}`,Ht=`dragstart${St}`,Vt=`load${St}${It}`,Gt=`click${St}${It}`,Yt="active",Xt=".active.carousel-item";class Zt extends ft{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=Tt.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Rt}static get NAME(){return kt}next(){this._slide(Pt)}nextWhenVisible(){!document.hidden&&je(this._element)&&this.next()}prev(){this._slide(Ut)}pause(e){e||(this._isPaused=!0),Tt.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Oe(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=Tt.findOne(Xt,this._element);const t=this._getItemIndex(this._activeElement);if(e>this._items.length-1||e<0)return;if(this._isSliding)return void ht.one(this._element,Lt,(()=>this.to(e)));if(t===e)return this.pause(),void this.cycle();const r=e>t?Pt:Ut;this._slide(r,this._items[e])}_getConfig(e){return e={...Rt,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},Le(kt,e,Bt),e}_handleSwipe(){const e=Math.abs(this.touchDeltaX);if(e<=40)return;const t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?Ot:Ct)}_addEventListeners(){this._config.keyboard&&ht.on(this._element,jt,(e=>this._keydown(e))),"hover"===this._config.pause&&(ht.on(this._element,qt,(e=>this.pause(e))),ht.on(this._element,Mt,(e=>this.cycle(e)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const e=e=>this._pointerEvent&&("pen"===e.pointerType||"touch"===e.pointerType),t=t=>{e(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},r=e=>{this.touchDeltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this.touchStartX},n=t=>{e(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((e=>this.cycle(e)),500+this._config.interval))};Tt.find(".carousel-item img",this._element).forEach((e=>{ht.on(e,Ht,(e=>e.preventDefault()))})),this._pointerEvent?(ht.on(this._element,Kt,(e=>t(e))),ht.on(this._element,zt,(e=>n(e))),this._element.classList.add("pointer-event")):(ht.on(this._element,Nt,(e=>t(e))),ht.on(this._element,Wt,(e=>r(e))),ht.on(this._element,Ft,(e=>n(e))))}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=$t[e.key];t&&(e.preventDefault(),this._slide(t))}_getItemIndex(e){return this._items=e&&e.parentNode?Tt.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){const r=e===Pt;return Ye(this._items,t,r,this._config.wrap)}_triggerSlideEvent(e,t){const r=this._getItemIndex(e),n=this._getItemIndex(Tt.findOne(Xt,this._element));return ht.trigger(this._element,Dt,{relatedTarget:e,direction:t,from:n,to:r})}_setActiveIndicatorElement(e){if(this._indicatorsElement){const t=Tt.findOne(".active",this._indicatorsElement);t.classList.remove(Yt),t.removeAttribute("aria-current");const r=Tt.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<r.length;t++)if(Number.parseInt(r[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){r[t].classList.add(Yt),r[t].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||Tt.findOne(Xt,this._element);if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(e,t){const r=this._directionToOrder(e),n=Tt.findOne(Xt,this._element),s=this._getItemIndex(n),i=t||this._getItemByOrder(r,n),o=this._getItemIndex(i),a=Boolean(this._interval),c=r===Pt,l=c?"carousel-item-start":"carousel-item-end",u=c?"carousel-item-next":"carousel-item-prev",h=this._orderToDirection(r);if(i&&i.classList.contains(Yt))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(i,h).defaultPrevented)return;if(!n||!i)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(i),this._activeElement=i;const d=()=>{ht.trigger(this._element,Lt,{relatedTarget:i,direction:h,from:s,to:o})};if(this._element.classList.contains("slide")){i.classList.add(u),We(i),n.classList.add(l),i.classList.add(l);const e=()=>{i.classList.remove(l,u),i.classList.add(Yt),n.classList.remove(Yt,u,l),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(e,n,!0)}else n.classList.remove(Yt),i.classList.add(Yt),this._isSliding=!1,d();a&&this.cycle()}_directionToOrder(e){return[Ot,Ct].includes(e)?ze()?e===Ct?Ut:Pt:e===Ct?Pt:Ut:e}_orderToDirection(e){return[Pt,Ut].includes(e)?ze()?e===Ut?Ct:Ot:e===Ut?Ot:Ct:e}static carouselInterface(e,t){const r=Zt.getOrCreateInstance(e,t);let{_config:n}=r;"object"==typeof t&&(n={...n,...t});const s="string"==typeof t?t:n.slide;if("number"==typeof t)r.to(t);else if("string"==typeof s){if(void 0===r[s])throw new TypeError(`No method named "${s}"`);r[s]()}else n.interval&&n.ride&&(r.pause(),r.cycle())}static jQueryInterface(e){return this.each((function(){Zt.carouselInterface(this,e)}))}static dataApiClickHandler(e){const t=Ce(this);if(!t||!t.classList.contains("carousel"))return;const r={...Et.getDataAttributes(t),...Et.getDataAttributes(this)},n=this.getAttribute("data-bs-slide-to");n&&(r.interval=!1),Zt.carouselInterface(t,r),n&&Zt.getInstance(t).to(n),e.preventDefault()}}ht.on(document,Gt,"[data-bs-slide], [data-bs-slide-to]",Zt.dataApiClickHandler),ht.on(window,Vt,(()=>{const e=Tt.find('[data-bs-ride="carousel"]');for(let t=0,r=e.length;t<r;t++)Zt.carouselInterface(e[t],Zt.getInstance(e[t]))})),He(Zt);const Jt="collapse",Qt="bs.collapse",er=`.${Qt}`,tr={toggle:!0,parent:null},rr={toggle:"boolean",parent:"(null|element)"},nr=`show${er}`,sr=`shown${er}`,ir=`hide${er}`,or=`hidden${er}`,ar=`click${er}.data-api`,cr="show",lr="collapse",ur="collapsing",hr="collapsed",dr=`:scope .${lr} .${lr}`,pr='[data-bs-toggle="collapse"]';class fr extends ft{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const r=Tt.find(pr);for(let e=0,t=r.length;e<t;e++){const t=r[e],n=Ue(t),s=Tt.find(n).filter((e=>e===this._element));null!==n&&s.length&&(this._selector=n,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return tr}static get NAME(){return Jt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e,t=[];if(this._config.parent){const e=Tt.find(dr,this._config.parent);t=Tt.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!e.includes(t)))}const r=Tt.findOne(this._selector);if(t.length){const n=t.find((e=>r!==e));if(e=n?fr.getInstance(n):null,e&&e._isTransitioning)return}if(ht.trigger(this._element,nr).defaultPrevented)return;t.forEach((t=>{r!==t&&fr.getOrCreateInstance(t,{toggle:!1}).hide(),e||pt.set(t,Qt,null)}));const n=this._getDimension();this._element.classList.remove(lr),this._element.classList.add(ur),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const s=`scroll${n[0].toUpperCase()+n.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(ur),this._element.classList.add(lr,cr),this._element.style[n]="",ht.trigger(this._element,sr)}),this._element,!0),this._element.style[n]=`${this._element[s]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(ht.trigger(this._element,ir).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,We(this._element),this._element.classList.add(ur),this._element.classList.remove(lr,cr);const t=this._triggerArray.length;for(let e=0;e<t;e++){const t=this._triggerArray[e],r=Ce(t);r&&!this._isShown(r)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(ur),this._element.classList.add(lr),ht.trigger(this._element,or)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(cr)}_getConfig(e){return(e={...tr,...Et.getDataAttributes(this._element),...e}).toggle=Boolean(e.toggle),e.parent=De(e.parent),Le(Jt,e,rr),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=Tt.find(dr,this._config.parent);Tt.find(pr,this._config.parent).filter((t=>!e.includes(t))).forEach((e=>{const t=Ce(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}))}_addAriaAndCollapsedClass(e,t){e.length&&e.forEach((e=>{t?e.classList.remove(hr):e.classList.add(hr),e.setAttribute("aria-expanded",t)}))}static jQueryInterface(e){return this.each((function(){const t={};"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1);const r=fr.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===r[e])throw new TypeError(`No method named "${e}"`);r[e]()}}))}}ht.on(document,ar,pr,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Ue(this);Tt.find(t).forEach((e=>{fr.getOrCreateInstance(e,{toggle:!1}).toggle()}))})),He(fr);const gr="dropdown",mr=".bs.dropdown",yr=".data-api",wr="Escape",br="Space",vr="ArrowUp",_r="ArrowDown",Ar=new RegExp(`${vr}|${_r}|${wr}`),xr=`hide${mr}`,Er=`hidden${mr}`,Tr=`show${mr}`,kr=`shown${mr}`,Sr=`click${mr}${yr}`,Ir=`keydown${mr}${yr}`,Rr=`keyup${mr}${yr}`,Br="show",Pr='[data-bs-toggle="dropdown"]',Ur=".dropdown-menu",Cr=ze()?"top-end":"top-start",Or=ze()?"top-start":"top-end",$r=ze()?"bottom-end":"bottom-start",Dr=ze()?"bottom-start":"bottom-end",Lr=ze()?"left-start":"right-start",jr=ze()?"right-start":"left-start",qr={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Mr={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class Nr extends ft{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return qr}static get DefaultType(){return Mr}static get NAME(){return gr}toggle(){return this._isShown()?this.hide():this.show()}show(){if(qe(this._element)||this._isShown(this._menu))return;const e={relatedTarget:this._element};if(ht.trigger(this._element,Tr,e).defaultPrevented)return;const t=Nr.getParentFromElement(this._element);this._inNavbar?Et.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((e=>ht.on(e,"mouseover",Ne))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Br),this._element.classList.add(Br),ht.trigger(this._element,kr,e)}hide(){if(qe(this._element)||!this._isShown(this._menu))return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){ht.trigger(this._element,xr,e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>ht.off(e,"mouseover",Ne))),this._popper&&this._popper.destroy(),this._menu.classList.remove(Br),this._element.classList.remove(Br),this._element.setAttribute("aria-expanded","false"),Et.removeDataAttribute(this._menu,"popper"),ht.trigger(this._element,Er,e))}_getConfig(e){if(e={...this.constructor.Default,...Et.getDataAttributes(this._element),...e},Le(gr,e,this.constructor.DefaultType),"object"==typeof e.reference&&!$e(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${gr.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(t){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let r=this._element;"parent"===this._config.reference?r=t:$e(this._config.reference)?r=De(this._config.reference):"object"==typeof this._config.reference&&(r=this._config.reference);const n=this._getPopperConfig(),s=n.modifiers.find((e=>"applyStyles"===e.name&&!1===e.enabled));this._popper=Ie(r,this._menu,n),s&&Et.setDataAttribute(this._menu,"popper","static")}_isShown(e=this._element){return e.classList.contains(Br)}_getMenuElement(){return Tt.next(this._element,Ur)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return Lr;if(e.classList.contains("dropstart"))return jr;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?Or:Cr:t?Dr:$r}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const r=Tt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(je);r.length&&Ye(r,t,e===_r,!r.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=Nr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e&&(2===e.button||"keyup"===e.type&&"Tab"!==e.key))return;const t=Tt.find(Pr);for(let r=0,n=t.length;r<n;r++){const n=Nr.getInstance(t[r]);if(!n||!1===n._config.autoClose)continue;if(!n._isShown())continue;const s={relatedTarget:n._element};if(e){const t=e.composedPath(),r=t.includes(n._menu);if(t.includes(n._element)||"inside"===n._config.autoClose&&!r||"outside"===n._config.autoClose&&r)continue;if(n._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(s.clickEvent=e)}n._completeHide(s)}}static getParentFromElement(e){return Ce(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?e.key===br||e.key!==wr&&(e.key!==_r&&e.key!==vr||e.target.closest(Ur)):!Ar.test(e.key))return;const t=this.classList.contains(Br);if(!t&&e.key===wr)return;if(e.preventDefault(),e.stopPropagation(),qe(this))return;const r=this.matches(Pr)?this:Tt.prev(this,Pr)[0],n=Nr.getOrCreateInstance(r);if(e.key!==wr)return e.key===vr||e.key===_r?(t||n.show(),void n._selectMenuItem(e)):void(t&&e.key!==br||Nr.clearMenus());n.hide()}}ht.on(document,Ir,Pr,Nr.dataApiKeydownHandler),ht.on(document,Ir,Ur,Nr.dataApiKeydownHandler),ht.on(document,Sr,Nr.clearMenus),ht.on(document,Rr,Nr.clearMenus),ht.on(document,Sr,Pr,(function(e){e.preventDefault(),Nr.getOrCreateInstance(this).toggle()})),He(Nr);const Wr=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Fr=".sticky-top";class Kr{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+e)),this._setElementAttributes(Wr,"paddingRight",(t=>t+e)),this._setElementAttributes(Fr,"marginRight",(t=>t-e))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,r){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e)[t];e.style[t]=`${r(Number.parseFloat(s))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(Wr,"paddingRight"),this._resetElementAttributes(Fr,"marginRight")}_saveInitialAttribute(e,t){const r=e.style[t];r&&Et.setDataAttribute(e,t,r)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const r=Et.getDataAttribute(e,t);void 0===r?e.style.removeProperty(t):(Et.removeDataAttribute(e,t),e.style[t]=r)}))}_applyManipulationCallback(e,t){$e(e)?t(e):Tt.find(e,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const zr={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},Hr={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},Vr="backdrop",Gr="show",Yr=`mousedown.bs.${Vr}`;class Xr{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&We(this._getElement()),this._getElement().classList.add(Gr),this._emulateAnimation((()=>{Ve(e)}))):Ve(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove(Gr),this._emulateAnimation((()=>{this.dispose(),Ve(e)}))):Ve(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...zr,..."object"==typeof e?e:{}}).rootElement=De(e.rootElement),Le(Vr,e,Hr),e}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),ht.on(this._getElement(),Yr,(()=>{Ve(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(ht.off(this._element,Yr),this._element.remove(),this._isAppended=!1)}_emulateAnimation(e){Ge(e,this._getElement(),this._config.isAnimated)}}const Zr={trapElement:null,autofocus:!0},Jr={trapElement:"element",autofocus:"boolean"},Qr=".bs.focustrap",en=`focusin${Qr}`,tn=`keydown.tab${Qr}`,rn="backward";class nn{constructor(e){this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:e,autofocus:t}=this._config;this._isActive||(t&&e.focus(),ht.off(document,Qr),ht.on(document,en,(e=>this._handleFocusin(e))),ht.on(document,tn,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,ht.off(document,Qr))}_handleFocusin(e){const{target:t}=e,{trapElement:r}=this._config;if(t===document||t===r||r.contains(t))return;const n=Tt.focusableChildren(r);0===n.length?r.focus():this._lastTabNavDirection===rn?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?rn:"forward")}_getConfig(e){return e={...Zr,..."object"==typeof e?e:{}},Le("focustrap",e,Jr),e}}const sn="modal",on=".bs.modal",an="Escape",cn={backdrop:!0,keyboard:!0,focus:!0},ln={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},un=`hide${on}`,hn=`hidePrevented${on}`,dn=`hidden${on}`,pn=`show${on}`,fn=`shown${on}`,gn=`resize${on}`,mn=`click.dismiss${on}`,yn=`keydown.dismiss${on}`,wn=`mouseup.dismiss${on}`,bn=`mousedown.dismiss${on}`,vn=`click${on}.data-api`,_n="modal-open",An="show",xn="modal-static";class En extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=Tt.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new Kr}static get Default(){return cn}static get NAME(){return sn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||ht.trigger(this._element,pn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(_n),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),ht.on(this._dialog,bn,(()=>{ht.one(this._element,wn,(e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;if(ht.trigger(this._element,un).defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(An),ht.off(this._element,mn),ht.off(this._dialog,bn),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((e=>ht.off(e,on))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Xr({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new nn({trapElement:this._element})}_getConfig(e){return e={...cn,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},Le(sn,e,ln),e}_showElement(e){const t=this._isAnimated(),r=Tt.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,r&&(r.scrollTop=0),t&&We(this._element),this._element.classList.add(An),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,ht.trigger(this._element,fn,{relatedTarget:e})}),this._dialog,t)}_setEscapeEvent(){this._isShown?ht.on(this._element,yn,(e=>{this._config.keyboard&&e.key===an?(e.preventDefault(),this.hide()):this._config.keyboard||e.key!==an||this._triggerBackdropTransition()})):ht.off(this._element,yn)}_setResizeEvent(){this._isShown?ht.on(window,gn,(()=>this._adjustDialog())):ht.off(window,gn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(_n),this._resetAdjustments(),this._scrollBar.reset(),ht.trigger(this._element,dn)}))}_showBackdrop(e){ht.on(this._element,mn,(e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(ht.trigger(this._element,hn).defaultPrevented)return;const{classList:e,scrollHeight:t,style:r}=this._element,n=t>document.documentElement.clientHeight;!n&&"hidden"===r.overflowY||e.contains(xn)||(n||(r.overflowY="hidden"),e.add(xn),this._queueCallback((()=>{e.remove(xn),n||this._queueCallback((()=>{r.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),r=t>0;(!r&&e&&!ze()||r&&!e&&ze())&&(this._element.style.paddingLeft=`${t}px`),(r&&!e&&!ze()||!r&&e&&ze())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const r=En.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===r[e])throw new TypeError(`No method named "${e}"`);r[e](t)}}))}}ht.on(document,vn,'[data-bs-toggle="modal"]',(function(e){const t=Ce(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),ht.one(t,pn,(e=>{e.defaultPrevented||ht.one(t,dn,(()=>{je(this)&&this.focus()}))}));const r=Tt.findOne(".modal.show");r&&En.getInstance(r).hide(),En.getOrCreateInstance(t).toggle(this)})),gt(En),He(En);const Tn="offcanvas",kn=".bs.offcanvas",Sn=".data-api",In=`load${kn}${Sn}`,Rn={backdrop:!0,keyboard:!0,scroll:!1},Bn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Pn="show",Un=".offcanvas.show",Cn=`show${kn}`,On=`shown${kn}`,$n=`hide${kn}`,Dn=`hidden${kn}`,Ln=`click${kn}${Sn}`,jn=`keydown.dismiss${kn}`;class qn extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Tn}static get Default(){return Rn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||ht.trigger(this._element,Cn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new Kr).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Pn),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),ht.trigger(this._element,On,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(ht.trigger(this._element,$n).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Pn),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new Kr).reset(),ht.trigger(this._element,Dn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(e){return e={...Rn,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},Le(Tn,e,Bn),e}_initializeBackDrop(){return new Xr({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new nn({trapElement:this._element})}_addEventListeners(){ht.on(this._element,jn,(e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()}))}static jQueryInterface(e){return this.each((function(){const t=qn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}ht.on(document,Ln,'[data-bs-toggle="offcanvas"]',(function(e){const t=Ce(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this))return;ht.one(t,Dn,(()=>{je(this)&&this.focus()}));const r=Tt.findOne(Un);r&&r!==t&&qn.getInstance(r).hide(),qn.getOrCreateInstance(t).toggle(this)})),ht.on(window,In,(()=>Tt.find(Un).forEach((e=>qn.getOrCreateInstance(e).show())))),gt(qn),He(qn);const Mn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Nn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Wn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Fn=(e,t)=>{const r=e.nodeName.toLowerCase();if(t.includes(r))return!Mn.has(r)||Boolean(Nn.test(e.nodeValue)||Wn.test(e.nodeValue));const n=t.filter((e=>e instanceof RegExp));for(let e=0,t=n.length;e<t;e++)if(n[e].test(r))return!0;return!1};function Kn(e,t,r){if(!e.length)return e;if(r&&"function"==typeof r)return r(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(let e=0,r=s.length;e<r;e++){const r=s[e],n=r.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){r.remove();continue}const i=[].concat(...r.attributes),o=[].concat(t["*"]||[],t[n]||[]);i.forEach((e=>{Fn(e,o)||r.removeAttribute(e.nodeName)}))}return n.body.innerHTML}const zn="tooltip",Hn=".bs.tooltip",Vn=new Set(["sanitize","allowList","sanitizeFn"]),Gn={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Yn={AUTO:"auto",TOP:"top",RIGHT:ze()?"left":"right",BOTTOM:"bottom",LEFT:ze()?"right":"left"},Xn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},Zn={HIDE:`hide${Hn}`,HIDDEN:`hidden${Hn}`,SHOW:`show${Hn}`,SHOWN:`shown${Hn}`,INSERTED:`inserted${Hn}`,CLICK:`click${Hn}`,FOCUSIN:`focusin${Hn}`,FOCUSOUT:`focusout${Hn}`,MOUSEENTER:`mouseenter${Hn}`,MOUSELEAVE:`mouseleave${Hn}`},Jn="fade",Qn="show",es="show",ts="out",rs=".tooltip-inner",ns=".modal",ss="hide.bs.modal",is="hover",os="focus";class as extends ft{constructor(t,r){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(r),this.tip=null,this._setListeners()}static get Default(){return Xn}static get NAME(){return zn}static get Event(){return Zn}static get DefaultType(){return Gn}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(Qn))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),ht.off(this._element.closest(ns),ss,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const e=ht.trigger(this._element,this.constructor.Event.SHOW),t=Me(this._element),r=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(e.defaultPrevented||!r)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(rs).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const n=this.getTipElement(),s=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME);n.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this._config.animation&&n.classList.add(Jn);const i="function"==typeof this._config.placement?this._config.placement.call(this,n,this._element):this._config.placement,o=this._getAttachment(i);this._addAttachmentClass(o);const{container:a}=this._config;pt.set(n,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(n),ht.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Ie(this._element,n,this._getPopperConfig(o)),n.classList.add(Qn);const c=this._resolvePossibleFunction(this._config.customClass);c&&n.classList.add(...c.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>{ht.on(e,"mouseover",Ne)}));const l=this.tip.classList.contains(Jn);this._queueCallback((()=>{const e=this._hoverState;this._hoverState=null,ht.trigger(this._element,this.constructor.Event.SHOWN),e===ts&&this._leave(null,this)}),this.tip,l)}hide(){if(!this._popper)return;const e=this.getTipElement();if(ht.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;e.classList.remove(Qn),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>ht.off(e,"mouseover",Ne))),this._activeTrigger.click=!1,this._activeTrigger[os]=!1,this._activeTrigger[is]=!1;const t=this.tip.classList.contains(Jn);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==es&&e.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),ht.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");e.innerHTML=this._config.template;const t=e.children[0];return this.setContent(t),t.classList.remove(Jn,Qn),this.tip=t,this.tip}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),rs)}_sanitizeAndSetContent(e,t,r){const n=Tt.findOne(r,e);t||!n?this.setElementContent(n,t):n.remove()}setElementContent(e,t){if(null!==e)return $e(t)?(t=De(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.append(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Kn(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){const e=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(e)}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){return t||this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(e)}`)}_getAttachment(e){return Yn[e.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((e=>{if("click"===e)ht.on(this._element,this.constructor.Event.CLICK,this._config.selector,(e=>this.toggle(e)));else if("manual"!==e){const t=e===is?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,r=e===is?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;ht.on(this._element,t,this._config.selector,(e=>this._enter(e))),ht.on(this._element,r,this._config.selector,(e=>this._leave(e)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},ht.on(this._element.closest(ns),ss,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?os:is]=!0),t.getTipElement().classList.contains(Qn)||t._hoverState===es?t._hoverState=es:(clearTimeout(t._timeout),t._hoverState=es,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===es&&t.show()}),t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?os:is]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=ts,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===ts&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=Et.getDataAttributes(this._element);return Object.keys(t).forEach((e=>{Vn.has(e)&&delete t[e]})),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:De(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),Le(zn,e,this.constructor.DefaultType),e.sanitize&&(e.template=Kn(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const e=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),r=e.getAttribute("class").match(t);null!==r&&r.length>0&&r.map((e=>e.trim())).forEach((t=>e.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(e){const{state:t}=e;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=as.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}He(as);const cs=".bs.popover",ls={...as.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},us={...as.DefaultType,content:"(string|element|function)"},hs={HIDE:`hide${cs}`,HIDDEN:`hidden${cs}`,SHOW:`show${cs}`,SHOWN:`shown${cs}`,INSERTED:`inserted${cs}`,CLICK:`click${cs}`,FOCUSIN:`focusin${cs}`,FOCUSOUT:`focusout${cs}`,MOUSEENTER:`mouseenter${cs}`,MOUSELEAVE:`mouseleave${cs}`};class ds extends as{static get Default(){return ls}static get NAME(){return"popover"}static get Event(){return hs}static get DefaultType(){return us}isWithContent(){return this.getTitle()||this._getContent()}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(e,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(e){return this.each((function(){const t=ds.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}He(ds);const ps="scrollspy",fs=".bs.scrollspy",gs={offset:10,method:"auto",target:""},ms={offset:"number",method:"string",target:"(string|element)"},ys=`activate${fs}`,ws=`scroll${fs}`,bs=`load${fs}.data-api`,vs="dropdown-item",_s="active",As=".nav-link",xs=".list-group-item",Es=`${As}, ${xs}, .${vs}`,Ts="position";class ks extends ft{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,ht.on(this._scrollElement,ws,(()=>this._process())),this.refresh(),this._process()}static get Default(){return gs}static get NAME(){return ps}refresh(){const e=this._scrollElement===this._scrollElement.window?"offset":Ts,t="auto"===this._config.method?e:this._config.method,r=t===Ts?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Tt.find(Es,this._config.target).map((e=>{const n=Ue(e),s=n?Tt.findOne(n):null;if(s){const e=s.getBoundingClientRect();if(e.width||e.height)return[Et[t](s).top+r,n]}return null})).filter((e=>e)).sort(((e,t)=>e[0]-t[0])).forEach((e=>{this._offsets.push(e[0]),this._targets.push(e[1])}))}dispose(){ht.off(this._scrollElement,fs),super.dispose()}_getConfig(e){return(e={...gs,...Et.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}}).target=De(e.target)||document.documentElement,Le(ps,e,ms),e}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),r=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=r){const e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&e>=this._offsets[t]&&(void 0===this._offsets[t+1]||e<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(e){this._activeTarget=e,this._clear();const t=Es.split(",").map((t=>`${t}[data-bs-target="${e}"],${t}[href="${e}"]`)),r=Tt.findOne(t.join(","),this._config.target);r.classList.add(_s),r.classList.contains(vs)?Tt.findOne(".dropdown-toggle",r.closest(".dropdown")).classList.add(_s):Tt.parents(r,".nav, .list-group").forEach((e=>{Tt.prev(e,`${As}, ${xs}`).forEach((e=>e.classList.add(_s))),Tt.prev(e,".nav-item").forEach((e=>{Tt.children(e,As).forEach((e=>e.classList.add(_s)))}))})),ht.trigger(this._scrollElement,ys,{relatedTarget:e})}_clear(){Tt.find(Es,this._config.target).filter((e=>e.classList.contains(_s))).forEach((e=>e.classList.remove(_s)))}static jQueryInterface(e){return this.each((function(){const t=ks.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ht.on(window,bs,(()=>{Tt.find('[data-bs-spy="scroll"]').forEach((e=>new ks(e)))})),He(ks);const Ss=".bs.tab",Is=`hide${Ss}`,Rs=`hidden${Ss}`,Bs=`show${Ss}`,Ps=`shown${Ss}`,Us=`click${Ss}.data-api`,Cs="active",Os="fade",$s="show",Ds=".active",Ls=":scope > li > .active";class js extends ft{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Cs))return;let e;const t=Ce(this._element),r=this._element.closest(".nav, .list-group");if(r){const t="UL"===r.nodeName||"OL"===r.nodeName?Ls:Ds;e=Tt.find(t,r),e=e[e.length-1]}const n=e?ht.trigger(e,Is,{relatedTarget:this._element}):null;if(ht.trigger(this._element,Bs,{relatedTarget:e}).defaultPrevented||null!==n&&n.defaultPrevented)return;this._activate(this._element,r);const s=()=>{ht.trigger(e,Rs,{relatedTarget:this._element}),ht.trigger(this._element,Ps,{relatedTarget:e})};t?this._activate(t,t.parentNode,s):s()}_activate(e,t,r){const n=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?Tt.children(t,Ds):Tt.find(Ls,t))[0],s=r&&n&&n.classList.contains(Os),i=()=>this._transitionComplete(e,n,r);n&&s?(n.classList.remove($s),this._queueCallback(i,e,!0)):i()}_transitionComplete(e,t,r){if(t){t.classList.remove(Cs);const e=Tt.findOne(":scope > .dropdown-menu .active",t.parentNode);e&&e.classList.remove(Cs),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(Cs),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),We(e),e.classList.contains(Os)&&e.classList.add($s);let n=e.parentNode;if(n&&"LI"===n.nodeName&&(n=n.parentNode),n&&n.classList.contains("dropdown-menu")){const t=e.closest(".dropdown");t&&Tt.find(".dropdown-toggle",t).forEach((e=>e.classList.add(Cs))),e.setAttribute("aria-expanded",!0)}r&&r()}static jQueryInterface(e){return this.each((function(){const t=js.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ht.on(document,Us,'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this)||js.getOrCreateInstance(this).show()})),He(js);const qs="toast",Ms=".bs.toast",Ns=`mouseover${Ms}`,Ws=`mouseout${Ms}`,Fs=`focusin${Ms}`,Ks=`focusout${Ms}`,zs=`hide${Ms}`,Hs=`hidden${Ms}`,Vs=`show${Ms}`,Gs=`shown${Ms}`,Ys="hide",Xs="show",Zs="showing",Js={animation:"boolean",autohide:"boolean",delay:"number"},Qs={animation:!0,autohide:!0,delay:5e3};class ei extends ft{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Js}static get Default(){return Qs}static get NAME(){return qs}show(){ht.trigger(this._element,Vs).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Ys),We(this._element),this._element.classList.add(Xs),this._element.classList.add(Zs),this._queueCallback((()=>{this._element.classList.remove(Zs),ht.trigger(this._element,Gs),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Xs)&&(ht.trigger(this._element,zs).defaultPrevented||(this._element.classList.add(Zs),this._queueCallback((()=>{this._element.classList.add(Ys),this._element.classList.remove(Zs),this._element.classList.remove(Xs),ht.trigger(this._element,Hs)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Xs)&&this._element.classList.remove(Xs),super.dispose()}_getConfig(e){return e={...Qs,...Et.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},Le(qs,e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const r=e.relatedTarget;this._element===r||this._element.contains(r)||this._maybeScheduleHide()}_setListeners(){ht.on(this._element,Ns,(e=>this._onInteraction(e,!0))),ht.on(this._element,Ws,(e=>this._onInteraction(e,!1))),ht.on(this._element,Fs,(e=>this._onInteraction(e,!0))),ht.on(this._element,Ks,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=ei.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}gt(ei),He(ei);var ti=o(4126),ri=o(5984),ni=o(2592);class si{constructor(e,t,r){this.swapLinkManager=e,this.walletConnect=t,this.baseURL=r,this.ui=document.createElement("div"),this.displayUI()}displayUI(){const e=this.swapLinkManager.transactions,t=e.assetTransfers.map((e=>e.assetIndex)),r=ti.default.encodeAddress(e.assetTransfers[0].to.publicKey);let n,s;if(ti.default.encodeAddress(e.assetTransfers[0].from.publicKey),e.payment)if(n=e.payment.amount,"pay"===e.payment.type)n/=1e6,s="ALGO";else{let e="";360019122===this.swapLinkManager.currencyAsset.index&&(e="&#127844; "),s=`${this.swapLinkManager.currencyAsset.params.name} ${e}(ASA ${this.swapLinkManager.currencyAsset.index})`}else n="nothing",s="";const i=this.swapLinkManager.assets.map((e=>`<strong><a href="https://www.nftexplorer.app/asset/${e.index}" target="_blank">${e.index}</a></strong> (${e.params.name})`));if(this.ui.innerHTML=`<h4>Swap link</h4>\n        <div class="row mb-3">\n            <div class="col-md-6">\n                <ul>\n                    <li>You'll send asset${i.length>1?"s":""} ${i.join(", ")}<br>\n                    <span class="wallet-info">TO ${r}</span></li>\n                    <li>You'll receive <span class="price">${n} ${s}</span></li>\n                </ul>\n            </div>\n            <div class="col-md-6 ">\n                <img src="default.png" id="imgAssetPreview" class="img-fluid">\n            </div>\n            \n        </div>\n        \n        <a href="" id="swapLink" style="word-break: break-all;"></a><br>\n        <span id="linkInfo" class="form-text mt-3" hidden>This link will expire in about 1h15. (<a href="https://developer.algorand.org/docs/get-details/transactions/#sending-a-transaction-in-the-future" target="_blank">Why?</a>)</span><br>\n        <button class="btn btn-secondary" id="buttonCopy" hidden>copy</button>\n        <button class="btn btn-generate" id="buttonSign">Sign</button>`,e.royaltiesPayment){const t=this.ui.querySelector("ul"),r=document.createElement("li");let n=e.royaltiesPayment.amount;"pay"===e.royaltiesPayment.type?(n/=1e6,s="ALGO"):s=e.royaltiesPayment.assetIndex;const i=ti.default.encodeAddress(e.royaltiesPayment.to.publicKey);r.innerHTML=`Creator will receive <span class="price">${n} ${s}</span><br>\n            <span class="wallet-info">TO ${i}</span>`,t.append(r)}(0,ni.g)(t[0],this.ui.querySelector("#imgAssetPreview"),512),this.ui.querySelector("#buttonSign").addEventListener("click",this.sign.bind(this))}makeBusy(){const e=this.ui.querySelector("#buttonSign");e.disabled=!0,e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n        Waiting for signature...'}async sign(e){const t=this.ui.querySelector("#buttonSign");t.disabled=!0,this.makeBusy();try{const e=await this.swapLinkManager.signAndGetLink(this.baseURL);this.displayLink(e)}catch(e){console.error(e),t.disabled=!1,t.innerHTML="Sign",alert(e)}}displayLink(e){this.ui.querySelector("#buttonSign").hidden=!0;const t=this.ui.querySelector("#swapLink");t.href=e,t.textContent=e,this.ui.querySelector("#buttonCopy").hidden=!1,this.ui.querySelector("#buttonCopy").addEventListener("click",(t=>{navigator.clipboard.writeText(e),t.currentTarget.textContent="copied"})),this.ui.querySelector("#linkInfo").hidden=!1}}var ii=o(9182);const oi=ii.Z.urls[ii.Z.network].algodUrl,ai=ii.Z.urls[ii.Z.network].algoIndexerUrl;let ci;"testnet"===ii.Z.network?ci=[{name:"TEST DEGEN",assetId:"94799644"}]:"mainnet"===ii.Z.network&&(ci=[{name:"ROAR",assetId:"917962457"},{name:"DEGEN",assetId:"417708610"},{name:"SHRIMP",assetId:"360019122"},{name:"GRUB",assetId:"787168529"},{name:"CRUMB",assetId:"751294723"},{name:"WIG",assetId:"952755839"},{name:"ALCH",assetId:"310014962"},{name:"BSCTS",assetId:"765722712"}]);const li=new ti.default.Algodv2("",oi,"443"),ui=new ti.default.Indexer("",ai,"443"),hi=(document.getElementById("content-title"),document.getElementById("wallet-connect-title")),di=document.getElementById("wallet-connect-content"),pi=document.getElementById("content"),fi=document.getElementById("atomixwap-info"),gi=document.getElementById("networkBadge");gi&&"mainnet"!==ii.Z.network&&(gi.hidden=!1,gi.textContent=ii.Z.network.toLowerCase());const mi=new class{constructor(e,t,r=""){this.connectedCallback=e,this.disconnectedCallback=t,this.ui=document.createElement("div"),this.wallet,this.walletType,this.walletAddress,this.nfd,this.btnClass=r,this.loadState().then((()=>{this.walletType&&this.walletAddress?(this.connectedCallback(),this.loadNfd()):this.disconnectedCallback(),this.updateUI()}))}updateUI(){this.ui.textContent="",this.walletType&&this.walletAddress?this.displayConnectedUI():this.displayConnectUI()}displayConnectUI(){this.ui.innerHTML=`\n    <button class="btn-myalgo ${this.btnClass}" id="buttonMyAlgo" disabled>MyAlgo</button>\n    <button class="btn-pera ${this.btnClass}" id="buttonPera">Pera</button>\n    <br /><br />\n    <span style="color:#235fc6;">Due to the ongoing investigation into the supposed myalgo hack, access with this wallet is disabled.\n    <a href="https://twitter.com/myalgo_/status/1632862464244162560" target="_blank" style="color: #235fc6;">More info</a></span>\n    \n    `,this.ui.querySelector("#buttonMyAlgo").addEventListener("click",this.connectMyAlgo.bind(this)),this.ui.querySelector("#buttonPera").addEventListener("click",this.connectPera.bind(this))}displayConnectedUI(){let e;e=this.nfd?this.nfd:this.walletAddress,this.ui.innerHTML=`\n    <span style="word-break: break-all;">${e}</span>\n    <a href="#" id="buttonDisconnect"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">\n    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>\n    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>\n  </svg></a>\n    `,this.ui.querySelector("#buttonDisconnect").addEventListener("click",this.disconnect.bind(this))}async loadState(){if(this.walletType=localStorage.getItem("wallet-connect-type"),this.walletAddress=localStorage.getItem("wallet-connect-address"),"myalgo"===this.walletType&&this.walletAddress){const e=await o.e(72).then(o.t.bind(o,1072,23));this.wallet=new e.default}else if("pera"===this.walletType&&this.walletAddress){const{PeraWalletConnect:e}=await Promise.all([o.e(339),o.e(563)]).then(o.bind(o,2339));this.wallet=new e;try{this.wallet.connector?.on("disconnect",this.disconnect.bind(this));const e=await this.wallet.reconnectSession();e?.[0]&&(this.walletAddress=e[0],this.saveState())}catch(e){console.error(e),this.wallet.disconnect()}}}saveState(){localStorage.setItem("wallet-connect-type",this.walletType),localStorage.setItem("wallet-connect-address",this.walletAddress)}clearState(){this.nfd=null,this.wallet=null,this.walletType=null,this.walletAddress=null,localStorage.removeItem("wallet-connect-type"),localStorage.removeItem("wallet-connect-address")}async loadNfd(){if(this.walletAddress){const e=await fetch("https://api.nf.domains/nfd/address?address="+this.walletAddress+"&limit=1&view=thumbnail");if(200===e.status){const t=await e.json();t.length>0&&t[0].caAlgo&&t[0].caAlgo.includes(this.walletAddress)&&(this.nfd=t[0].name,this.updateUI())}}}async connectMyAlgo(){const e=await o.e(72).then(o.t.bind(o,1072,23));this.wallet=new e.default;const t=await this.wallet.connect({shouldSelectOneAccount:!0,openManager:!0});t[0]&&(this.walletType="myalgo",this.walletAddress=t[0].address,this.saveState(),this.updateUI(),this.loadNfd(),this.connectedCallback())}async connectPera(){const{PeraWalletConnect:e}=await Promise.all([o.e(339),o.e(563)]).then(o.bind(o,2339));this.wallet=new e,this.wallet?.connector?.connected&&await this.wallet.disconnect();try{await this.wallet.disconnect();const e=await this.wallet.connect();e[0]&&(this.walletType="pera",this.walletAddress=e[0],this.saveState(),this.updateUI(),this.loadNfd(),this.wallet.connector?.on("disconnect",this.disconnect.bind(this)),this.connectedCallback())}catch(e){"CONNECT_MODAL_CLOSED"!==e?.data?.type&&alert(e.message)}}disconnect(){"pera"===this.walletType&&this.wallet?.disconnect(),this.clearState(),this.updateUI(),this.disconnectedCallback()}async signTransactions(e){let t;if("myalgo"===this.walletType){const r=[];for(const t of e)(0,ti.encodeAddress)(t.from.publicKey)===this.walletAddress&&r.push(t.toByte());try{t=await this.wallet.signTransaction(r),t=t.map((e=>e.blob))}catch(e){throw e}}else{if("pera"!==this.walletType)throw new Error("No wallet connected");{const r=e.map((e=>({txn:e,signers:[(0,ti.encodeAddress)(e.from.publicKey)]})));try{t=await this.wallet.signTransaction([r])}catch(e){throw e}}}return t}}((async function(){if(hi.textContent="Connected wallet",fi.hidden=!0,pi.hidden=!1,pi.textContent="",wi.get("swap"))try{const e=new((await o.e(441).then(o.bind(o,9441))).SwapLinkAccept)(wi.get("swap"),mi,li,ui);pi.append(e.ui)}catch(e){alert(e)}else if(wi.get("optin")){const e=new((await o.e(186).then(o.bind(o,7186))).OptIn)(mi,li,wi.get("optin"));pi.append(e.ui)}else if(wi.get("verify")){const e=new((await o.e(586).then(o.bind(o,1586))).verify)(mi,li,wi);pi.append(e.ui)}else if(wi.has("claim")){const e=new((await o.e(644).then(o.bind(o,644))).Claim)(mi,li);pi.append(e.ui)}else{const e=new((await o.e(948).then(o.bind(o,1948))).SwapLinkForm)(ci,5,bi,mi,ui);pi.append(e.ui)}}),(function(){hi.textContent="Connect wallet",fi.hidden=!1,pi.hidden=!0,pi.textContent=""}),"btn");di.append(mi.ui);const yi=window.location.search,wi=new URLSearchParams(yi);async function bi(e){e.makeBusy();const t=new ri.X(mi,li,ui),r={assetIds:e.data.assetIds,sellerAddress:mi.walletAddress,buyerAddress:e.data.buyerAddress,price:Number(e.data.price),priceAssetId:e.data.priceAssetId,currency:e.data.currency,royalties:Number((e.data.price*e.data.royaltiesPercent/100).toFixed(2))};try{await t.generateTransactions(r)}catch(t){return e.stopBusy(),console.error(t),void alert(t)}const n=new si(t,mi,"https://atomixwap.xyz/");pi.textContent="",pi.append(n.ui)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,