"use strict";(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[948],{1948:(e,t,s)=>{s.r(t),s.d(t,{SwapLinkForm:()=>l});var i=s(4050),a=s.n(i),r=s(2592),n=s(9182);class l{constructor(e,t,s,i,a){this.ui=document.createElement("div"),this.defaultRoyalties=t,this.submitCallback=s,this.walletConnect=i,this.algoIndexer=a,this.data={},this.isAssetCreator=!1,this.numNfts=0,this.ndfWalletAddress,this.ui.innerHTML=`<h4>Create swap link</h4>\n        <form>\n                    <div class="mb-3" id="nfts">\n                    </div>\n                    <div class="mb-3">\n                        <label for="inputAlgoAddress" class="form-label">Receiver</label>\n                        <input type="text" class="form-control" id="inputAlgoAddress"\n                            aria-describedby="AlgoAddressdHelp" required>\n                        <div id="AlgoAddressdHelp" class="form-text">Algorand Wallet Address or NFD</div>\n                    </div>\n                    <div class="mb-3">\n                        <div class="row">\n                        <label for="inputPrice" class="form-label" id="price-label">Price</label>\n                        <label for="inputPriceAssetId" class="form-label" id="nft-label" hidden>NFT to receive</label>\n                            <div class="col" id="price-div">\n                                <input type="number" class="form-control" id="inputPrice" min="0" step="1">\n                            </div>\n                            <div class="col" id="nft-div" hidden>\n                                <input type="text" class="form-control" id="inputPriceAssetId" aria-describedby="priceAssetIdHelp"\n                                    pattern="\\d*">\n                                <div id="priceAssetIdHelp" class="form-text">ASA asset ID</div>\n                            </div>\n                            <div class="col">\n                                <select class="form-select" id="inputCurrency" aria-label="Select currency">\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="mb-3">\n                      <div class="row">\n                        <div class="col-6">\n                          <div class="d-flex justify-content-between">\n                          <label for="inputRoyalties" class="form-label">Creator royalty</label>\n                          <span id="royaltiesValueLabel" class="royalties">0&percnt;</span>\n                      </div>\n\n                      <input type="range" class="form-range" value="${this.defaultRoyalties}" min="0" max="10" step="0.5" id="inputRoyalties"\n                          aria-describedby="royaltiesdHelp">\n                      <div id="royaltiesdHelp" class="form-text"></div>\n                        </div>\n                        <div class="col-6 position-relative">\n                        <span class="position-absolute heart" id="royaltiesLoveRed" hidden>&#10084;</span>\n                        <span class="position-absolute heart" id="royaltiesLoveGreen">&#128154;</span>\n                        \n                        </div>\n                      </div>\n                       \n                    </div>\n                    <div class="mb-3 form-check">\n                        <input type="checkbox" class="form-check-input" id="checkAcceptRisk" required>\n                        <label class="form-check-label" for="checkAcceptRisk">I accept to use this tool at my own\n                            risk</label>\n                    </div>\n                    <button type="submit" id="buttonSubmit" class="btn btn-generate fw-bold">Preview</button>\n\n\n                </form>`,this.addNFT();const r=this.ui.querySelector("#inputCurrency"),n=document.createElement("option");n.textContent="ALGO",n.value="algo",n.selected=!0,r.append(n);const l=document.createElement("option");l.textContent="NFT",l.value="nft",r.append(l);const d=document.createElement("optgroup");d.label="ASAs",r.append(d);for(const t of e){const e=document.createElement("option");e.textContent=t.name,e.value=t.assetId,d.append(e)}this.ui.querySelector("#inputRoyalties").addEventListener("input",this.royaltiesChange.bind(this),!1),this.ui.querySelector("#inputCurrency").addEventListener("change",this.currencyChange.bind(this),!1),this.ui.querySelector("form").addEventListener("submit",this.submitForm.bind(this),!1),this.ui.querySelector("#inputAlgoAddress").addEventListener("focusout",this.checkNfd.bind(this),!1),this.ui.querySelector("#inputRoyalties").dispatchEvent(new Event("input"))}addNFT(e){if(e&&e.currentTarget&&(e.currentTarget.hidden=!0),this.numNfts>=n.Z.maxNfts)return;const t=this.ui.querySelector("#nfts"),s=document.createElement("div");s.className="row mt-2",s.innerHTML=`\n      <div class="col-6">\n        <label for="inputAssetId" class="form-label">NFT</label>\n        <input type="text" class="form-control" id="inputAssetId" data-id="${this.numNfts}" aria-describedby="assetIdHelp"\n            pattern="\\d*">\n        <div id="assetIdHelp" class="form-text">ASA asset ID</div>\n      </div>\n      <div class="col-1">\n        <br>\n        <a href="javascript:void(0);" id="add-nft" hidden>\n          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-square mt-3" viewBox="0 0 16 16">\n            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>\n            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>\n          </svg>\n        </a>\n      </div>\n      <div class="col-5 text-center">\n        <img src="default.png" id="imgAssetPreview" width="auto" height="95">\n      </div>\n    `;const i=s.querySelector("#inputAssetId");0===this.numNfts&&(i.required=!0),i.addEventListener("focusout",this.assetIdFocusOut.bind(this),!1);const a=s.querySelector("#add-nft");this.numNfts<n.Z.maxNfts-1&&(a.hidden=!1,a.addEventListener("click",this.addNFT.bind(this),!1)),t.append(s),this.numNfts++}async assetIdFocusOut(e){const t=e.currentTarget;this.displayAssetInfo(t)}async displayAssetInfo(e){const t=e.parentNode.parentNode,s=t.querySelector("#assetIdHelp"),i=t.querySelector("#imgAssetPreview"),a=this.ui.querySelector("#inputRoyalties"),n=this.ui.querySelector("#royaltiesdHelp"),l=parseInt(e.value);if(isNaN(l))s.innerHTML='<span class="text-danger">Wrong asset ID format</span>',a.disabled=!1,n.textContent="";else{try{const e=await this.algoIndexer.lookupAssetByID(l).do();s.innerHTML=`<span class="text-success">${e.asset.params.name} (${e.asset.params["unit-name"]})</span>`,e.asset.params.creator===this.walletConnect.walletAddress?this.isAssetCreator=!0:this.isAssetCreator=!1}catch(e){console.log(e),s.innerHTML=`<span class="text-danger">Error: Asset with ID ${l} not found</span>`,this.isAssetCreator=!1}this.checkRoyaltiesAvailability(),(0,r.g)(l,i,200)}}async checkNfd(e){const t=e.currentTarget.value,s=this.ui.querySelector("#AlgoAddressdHelp");if(this.ndfWalletAddress=void 0,t.endsWith(".algo"))try{const e=await fetch("https://api.nf.domains/nfd/"+t+"?view=brief");if(200===e.status){const t=await e.json();t.caAlgo&&t.caAlgo.length>0?this.ndfWalletAddress=t.caAlgo[0]:t.unverifiedCaAlgo&&t.unverifiedCaAlgo.length>0?this.ndfWalletAddress=t.unverifiedCaAlgo[0]:"owned"===t.state&&t.owner&&(this.ndfWalletAddress=t.owner),this.ndfWalletAddress&&(s.innerHTML=`<span class="text-success">${this.ndfWalletAddress}</span>`)}else s.innerHTML=`<span class="text-danger">Error: NFD ${t} not found</span>`}catch(e){console.error(e),s.innerHTML='<span class="text-danger">Error: Can\'t load NFD</span>'}else a().isValidAddress(t)?s.textContent="Algorand Wallet Address or NFD":s.innerHTML='<span class="text-danger">Wrong wallet address format</span>'}currencyChange(e){const t=e.currentTarget.value,s=this.ui.querySelector("#nft-div"),i=this.ui.querySelector("#nft-label"),a=this.ui.querySelector("#price-div"),r=this.ui.querySelector("#price-label");"nft"===t?(s.hidden=!1,i.hidden=!1,s.querySelector("input").required=!0,a.hidden=!0,r.hidden=!0,a.querySelector("input").required=!1):(s.hidden=!0,i.hidden=!0,s.querySelector("input").required=!1,a.hidden=!1,r.hidden=!1,a.querySelector("input").required=!0),this.checkRoyaltiesAvailability()}async checkRoyaltiesAvailability(){const e=this.ui.querySelector("#inputCurrency"),t=this.ui.querySelector("#inputRoyalties"),s=this.ui.querySelector("#royaltiesdHelp"),i=this.ui.querySelector("#royaltiesLoveGreen"),a=this.ui.querySelector("#royaltiesLoveRed");let r=!1;if(this.numNfts>1){let e="";for(const t of this.ui.querySelectorAll("#inputAssetId"))if(t.value&&!isNaN(t.value))try{const s=await this.algoIndexer.lookupAssetByID(parseInt(t.value)).do();e&&e!=s.asset.params.creator&&(r=!0),e=s.asset.params.creator}catch(e){console.error(e)}}"algo"!==e.value||this.isAssetCreator||r?(t.value=0,t.disabled=!0,"algo"!==e.value?s.textContent="Royalty not available for other token than Algo":this.isAssetCreator?s.textContent="You're the creator of this asset, royalty disabled.":r&&(s.textContent="Multiple creators detected, royalty disabled."),i.hidden=!0,a.hidden=!0):(t.disabled=!1,s.textContent="",i.hidden=!1),t.dispatchEvent(new Event("input"))}royaltiesChange(e){const t=this.ui.querySelector("#inputRoyalties");this.ui.querySelector("#royaltiesValueLabel").textContent=`${t.value} %`;const s=this.ui.querySelector("#royaltiesLoveGreen"),i=this.ui.querySelector("#royaltiesLoveRed"),a=Number(t.min),r=Number(t.max),n=1+(t.value-t.min)/(t.max-t.min)*3.5;if(s.style=`font-size: ${n}rem`,t.value>a+(r-a)/2){const e=(t.value-(a+(r-a)/2))/((r-a)/2);let l="";t.value===t.max&&(l="animation: animateHeart 1.2s infinite;"),i.hidden=!1,i.style=`font-size: ${n}rem; ${l}`,s.style=`font-size: ${n}rem; opacity: ${1-e}`}else i.hidden=!0}async validate(){await this.checkRoyaltiesAvailability();const e=[];if(this.ui.querySelectorAll("#inputAssetId").forEach((async t=>{if(t.value&&!isNaN(t.value))e.push(parseInt(t.value,10)),await this.displayAssetInfo(t);else if(t.value&&isNaN(t.value))throw new Error(`Wrong format for asset id ${t.value}`)})),this.data.assetIds=e,this.data.buyerAddress=this.ui.querySelector("#inputAlgoAddress").value,this.data.price=this.ui.querySelector("#inputPrice").value,this.data.currency=this.ui.querySelector("#inputCurrency").value,this.data.royaltiesPercent=this.ui.querySelector("#inputRoyalties").value,this.data.acceptRisk=this.ui.querySelector("#checkAcceptRisk").checked,0===this.data.assetIds.length)throw new Error("No asset id provided or wrong format");if(this.data.buyerAddress.endsWith(".algo")&&!this.ndfWalletAddress)throw new Error("NFD not found");if(!this.data.buyerAddress.endsWith(".algo")&&!a().isValidAddress(this.data.buyerAddress))throw new Error("Algorand wallet address is not valid");if(isNaN(this.data.price))throw new Error("Price is not a number");if(isNaN(this.data.royaltiesPercent))throw new Error("Royalties value is not a number");if(!this.data.acceptRisk)throw new Error("Risk not accepted");if("nft"===this.data.currency&&isNaN(this.ui.querySelector("#inputPriceAssetId").value))throw new Error(`Wrong format for asset id ${this.ui.querySelector("#inputPriceAssetId").value}`);this.data.buyerAddress.endsWith(".algo")&&(this.data.buyerAddress=this.ndfWalletAddress),this.data.priceAssetId=parseInt(this.ui.querySelector("#inputPriceAssetId").value)}async submitForm(e){this.makeBusy(),e.preventDefault();try{await this.validate()}catch(e){return this.stopBusy(),void alert(e)}this.submitCallback&&this.submitCallback(this)}makeBusy(){const e=this.ui.querySelector("#buttonSubmit");e.disabled=!0,e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n    Preview'}stopBusy(){const e=this.ui.querySelector("#buttonSubmit");e.textContent="Preview",e.disabled=!1}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxFQUFhMUcsVUFBWSxzR0FFM0IsQ0FFQXdHLFdBQ0UsTUFBTUUsRUFBZWxILEtBQUtDLEdBQUdVLGNBQWMsaUJBQzNDdUcsRUFBYXJHLFlBQWMsVUFDM0JxRyxFQUFhN0QsVUFBVyxDQUMxQixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXRvbWl4d2FwLy4vc3JjL3N3YXAtbGluay1mb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhbGdvc2RrIGZyb20gXCJhbGdvc2RrXCI7XG5pbXBvcnQgeyBsb2FkQXNzZXRJbWFnZSB9IGZyb20gXCIuL2Fzc2V0LWRldGFpbHNcIjtcbmltcG9ydCBjb25maWcgZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTd2FwTGlua0Zvcm0ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBjdXJyZW5jaWVzLFxuICAgIGRlZmF1bHRSb3lhbHRpZXMsXG4gICAgc3VibWl0Q2FsbGJhY2ssXG4gICAgd2FsbGV0Q29ubmVjdCxcbiAgICBhbGdvSW5kZXhlclxuICApIHtcbiAgICB0aGlzLnVpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRlZmF1bHRSb3lhbHRpZXMgPSBkZWZhdWx0Um95YWx0aWVzO1xuICAgIHRoaXMuc3VibWl0Q2FsbGJhY2sgPSBzdWJtaXRDYWxsYmFjaztcbiAgICB0aGlzLndhbGxldENvbm5lY3QgPSB3YWxsZXRDb25uZWN0O1xuICAgIHRoaXMuYWxnb0luZGV4ZXIgPSBhbGdvSW5kZXhlcjtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICB0aGlzLmlzQXNzZXRDcmVhdG9yID0gZmFsc2U7XG4gICAgdGhpcy5udW1OZnRzID0gMDtcbiAgICB0aGlzLm5kZldhbGxldEFkZHJlc3M7XG5cbiAgICB0aGlzLnVpLmlubmVySFRNTCA9IGA8aDQ+Q3JlYXRlIHN3YXAgbGluazwvaDQ+XG4gICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiIGlkPVwibmZ0c1wiPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dEFsZ29BZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWxhYmVsXCI+UmVjZWl2ZXI8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImlucHV0QWxnb0FkZHJlc3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJBbGdvQWRkcmVzc2RIZWxwXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiQWxnb0FkZHJlc3NkSGVscFwiIGNsYXNzPVwiZm9ybS10ZXh0XCI+QWxnb3JhbmQgV2FsbGV0IEFkZHJlc3Mgb3IgTkZEPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0UHJpY2VcIiBjbGFzcz1cImZvcm0tbGFiZWxcIiBpZD1cInByaWNlLWxhYmVsXCI+UHJpY2U8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0UHJpY2VBc3NldElkXCIgY2xhc3M9XCJmb3JtLWxhYmVsXCIgaWQ9XCJuZnQtbGFiZWxcIiBoaWRkZW4+TkZUIHRvIHJlY2VpdmU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xcIiBpZD1cInByaWNlLWRpdlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJpbnB1dFByaWNlXCIgbWluPVwiMFwiIHN0ZXA9XCIxXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiIGlkPVwibmZ0LWRpdlwiIGhpZGRlbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImlucHV0UHJpY2VBc3NldElkXCIgYXJpYS1kZXNjcmliZWRieT1cInByaWNlQXNzZXRJZEhlbHBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybj1cIlxcXFxkKlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicHJpY2VBc3NldElkSGVscFwiIGNsYXNzPVwiZm9ybS10ZXh0XCI+QVNBIGFzc2V0IElEPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiBpZD1cImlucHV0Q3VycmVuY3lcIiBhcmlhLWxhYmVsPVwiU2VsZWN0IGN1cnJlbmN5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dFJveWFsdGllc1wiIGNsYXNzPVwiZm9ybS1sYWJlbFwiPkNyZWF0b3Igcm95YWx0eTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwicm95YWx0aWVzVmFsdWVMYWJlbFwiIGNsYXNzPVwicm95YWx0aWVzXCI+MCZwZXJjbnQ7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIGNsYXNzPVwiZm9ybS1yYW5nZVwiIHZhbHVlPVwiJHt0aGlzLmRlZmF1bHRSb3lhbHRpZXN9XCIgbWluPVwiMFwiIG1heD1cIjEwXCIgc3RlcD1cIjAuNVwiIGlkPVwiaW5wdXRSb3lhbHRpZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwicm95YWx0aWVzZEhlbHBcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicm95YWx0aWVzZEhlbHBcIiBjbGFzcz1cImZvcm0tdGV4dFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTYgcG9zaXRpb24tcmVsYXRpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicG9zaXRpb24tYWJzb2x1dGUgaGVhcnRcIiBpZD1cInJveWFsdGllc0xvdmVSZWRcIiBoaWRkZW4+JiMxMDA4NDs8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBvc2l0aW9uLWFic29sdXRlIGhlYXJ0XCIgaWQ9XCJyb3lhbHRpZXNMb3ZlR3JlZW5cIj4mIzEyODE1NDs8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0zIGZvcm0tY2hlY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiBpZD1cImNoZWNrQWNjZXB0Umlza1wiIHJlcXVpcmVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImNoZWNrQWNjZXB0Umlza1wiPkkgYWNjZXB0IHRvIHVzZSB0aGlzIHRvb2wgYXQgbXkgb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlzazwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBpZD1cImJ1dHRvblN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1nZW5lcmF0ZSBmdy1ib2xkXCI+UHJldmlldzwvYnV0dG9uPlxuXG5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+YDtcblxuICAgIC8vYWRkIG5mdCBmb3JtXG4gICAgdGhpcy5hZGRORlQoKTtcblxuICAgIC8vYWRkIGN1cnJlbmNpZXNcbiAgICBjb25zdCBpbnB1dEN1cnJlbmN5ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Q3VycmVuY3lcIik7XG5cbiAgICAvL2FkZCBhbGdvIGJ5IGRlZmF1bHRcbiAgICBjb25zdCBhbGdvT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBhbGdvT3B0aW9uLnRleHRDb250ZW50ID0gXCJBTEdPXCI7XG4gICAgYWxnb09wdGlvbi52YWx1ZSA9IFwiYWxnb1wiO1xuICAgIGFsZ29PcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuXG4gICAgaW5wdXRDdXJyZW5jeS5hcHBlbmQoYWxnb09wdGlvbik7XG5cbiAgICAvL2FkZCBuZnQgb3B0aW9uXG4gICAgY29uc3QgbmZ0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBuZnRPcHRpb24udGV4dENvbnRlbnQgPSBcIk5GVFwiO1xuICAgIG5mdE9wdGlvbi52YWx1ZSA9IFwibmZ0XCI7XG5cbiAgICBpbnB1dEN1cnJlbmN5LmFwcGVuZChuZnRPcHRpb24pO1xuXG4gICAgLy9hZGQgYXNhIG9wdGlvblxuICAgIGNvbnN0IGFzYU9wdEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGdyb3VwXCIpO1xuICAgIGFzYU9wdEdyb3VwLmxhYmVsID0gXCJBU0FzXCI7XG4gICAgaW5wdXRDdXJyZW5jeS5hcHBlbmQoYXNhT3B0R3JvdXApO1xuXG4gICAgZm9yIChjb25zdCBjdXJyZW5jeSBvZiBjdXJyZW5jaWVzKSB7XG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gY3VycmVuY3kubmFtZTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGN1cnJlbmN5LmFzc2V0SWQ7XG4gICAgICBhc2FPcHRHcm91cC5hcHBlbmQob3B0aW9uKTtcbiAgICB9XG5cbiAgICAvL2xpc3RlbiB0byBjaGFuZ2UgZXZlbnRzXG4gICAgdGhpcy51aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXRSb3lhbHRpZXNcIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5yb3lhbHRpZXNDaGFuZ2UuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgdGhpcy51aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXRDdXJyZW5jeVwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5jdXJyZW5jeUNoYW5nZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvL2xpc3RlbiB0byBmb3JtIHN1Ym1pdCBldmVudFxuICAgIHRoaXMudWlcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5zdWJtaXRGb3JtLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgIC8vZmluZCBuZmRcbiAgICB0aGlzLnVpXG4gICAgICAucXVlcnlTZWxlY3RvcihcIiNpbnB1dEFsZ29BZGRyZXNzXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIHRoaXMuY2hlY2tOZmQuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgLy91cGRhdGUgcm95YWx0aWVzXG4gICAgdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Um95YWx0aWVzXCIpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIikpO1xuICB9XG5cbiAgYWRkTkZUKGV2ZW50KSB7XG4gICAgLy9oaWRlICcrJyBidXR0b24gdGhhdCBoYXZlIGJlZW4ganVzdCBjbGlja2VkXG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5udW1OZnRzID49IGNvbmZpZy5tYXhOZnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbmZ0c0RpdiA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNuZnRzXCIpO1xuXG4gICAgY29uc3QgbmV3TmZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBuZXdOZnQuY2xhc3NOYW1lID0gXCJyb3cgbXQtMlwiO1xuICAgIG5ld05mdC5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0QXNzZXRJZFwiIGNsYXNzPVwiZm9ybS1sYWJlbFwiPk5GVDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJpbnB1dEFzc2V0SWRcIiBkYXRhLWlkPVwiJHt0aGlzLm51bU5mdHN9XCIgYXJpYS1kZXNjcmliZWRieT1cImFzc2V0SWRIZWxwXCJcbiAgICAgICAgICAgIHBhdHRlcm49XCJcXFxcZCpcIj5cbiAgICAgICAgPGRpdiBpZD1cImFzc2V0SWRIZWxwXCIgY2xhc3M9XCJmb3JtLXRleHRcIj5BU0EgYXNzZXQgSUQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xXCI+XG4gICAgICAgIDxicj5cbiAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBpZD1cImFkZC1uZnRcIiBoaWRkZW4+XG4gICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGNsYXNzPVwiYmkgYmktcGx1cy1zcXVhcmUgbXQtM1wiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTQgMWExIDEgMCAwIDEgMSAxdjEyYTEgMSAwIDAgMS0xIDFIMmExIDEgMCAwIDEtMS0xVjJhMSAxIDAgMCAxIDEtMWgxMnpNMiAwYTIgMiAwIDAgMC0yIDJ2MTJhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMi0yVjJhMiAyIDAgMCAwLTItMkgyelwiLz5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNOCA0YS41LjUgMCAwIDEgLjUuNXYzaDNhLjUuNSAwIDAgMSAwIDFoLTN2M2EuNS41IDAgMCAxLTEgMHYtM2gtM2EuNS41IDAgMCAxIDAtMWgzdi0zQS41LjUgMCAwIDEgOCA0elwiLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTUgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPGltZyBzcmM9XCJkZWZhdWx0LnBuZ1wiIGlkPVwiaW1nQXNzZXRQcmV2aWV3XCIgd2lkdGg9XCJhdXRvXCIgaGVpZ2h0PVwiOTVcIj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICBjb25zdCBpbnB1dEFzc2V0SWQgPSBuZXdOZnQucXVlcnlTZWxlY3RvcihgI2lucHV0QXNzZXRJZGApO1xuXG4gICAgaWYgKHRoaXMubnVtTmZ0cyA9PT0gMCkge1xuICAgICAgaW5wdXRBc3NldElkLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbnB1dEFzc2V0SWQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwiZm9jdXNvdXRcIixcbiAgICAgIHRoaXMuYXNzZXRJZEZvY3VzT3V0LmJpbmQodGhpcyksXG4gICAgICBmYWxzZVxuICAgICk7XG5cbiAgICBjb25zdCBhZGRMaW5rID0gbmV3TmZ0LnF1ZXJ5U2VsZWN0b3IoYCNhZGQtbmZ0YCk7XG5cbiAgICBpZiAodGhpcy5udW1OZnRzIDwgY29uZmlnLm1heE5mdHMgLSAxKSB7XG4gICAgICBhZGRMaW5rLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgYWRkTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5hZGRORlQuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH1cblxuICAgIG5mdHNEaXYuYXBwZW5kKG5ld05mdCk7XG5cbiAgICB0aGlzLm51bU5mdHMrKztcbiAgfVxuXG4gIGFzeW5jIGFzc2V0SWRGb2N1c091dChldmVudCkge1xuICAgIGNvbnN0IGlucHV0QXNzZXRJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgdGhpcy5kaXNwbGF5QXNzZXRJbmZvKGlucHV0QXNzZXRJZCk7XG4gIH1cblxuICBhc3luYyBkaXNwbGF5QXNzZXRJbmZvKGlucHV0QXNzZXRJZCkge1xuICAgIGNvbnN0IHBhcmVudCA9IGlucHV0QXNzZXRJZC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG5cbiAgICBjb25zdCBhc3NldElkSGVscCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFwiI2Fzc2V0SWRIZWxwXCIpO1xuICAgIGNvbnN0IGFzc2V0SW1nID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaW1nQXNzZXRQcmV2aWV3XCIpO1xuICAgIC8vY29uc3QgaW5wdXRBc3NldElkID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0QXNzZXRJZFwiKTtcbiAgICBjb25zdCBpbnB1dFJveWFsdGllcyA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNpbnB1dFJveWFsdGllc1wiKTtcbiAgICBjb25zdCByb3lhbHRpZXNkSGVscCA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNyb3lhbHRpZXNkSGVscFwiKTtcbiAgICBjb25zdCBhc3NldElEID0gcGFyc2VJbnQoaW5wdXRBc3NldElkLnZhbHVlKTtcblxuICAgIC8vcmV0cmVpdmUgYXNzZXQgaW5mb3NcbiAgICBpZiAoIWlzTmFOKGFzc2V0SUQpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFsZ29JbmRleGVyLmxvb2t1cEFzc2V0QnlJRChhc3NldElEKS5kbygpO1xuXG4gICAgICAgIGFzc2V0SWRIZWxwLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInRleHQtc3VjY2Vzc1wiPiR7cmVzdWx0LmFzc2V0LnBhcmFtcy5uYW1lfSAoJHtyZXN1bHQuYXNzZXQucGFyYW1zW1widW5pdC1uYW1lXCJdfSk8L3NwYW4+YDtcblxuICAgICAgICBjb25zdCBjcmVhdG9yQWRkcmVzcyA9IHJlc3VsdC5hc3NldC5wYXJhbXMuY3JlYXRvcjtcblxuICAgICAgICBpZiAoY3JlYXRvckFkZHJlc3MgPT09IHRoaXMud2FsbGV0Q29ubmVjdC53YWxsZXRBZGRyZXNzKSB7XG4gICAgICAgICAgdGhpcy5pc0Fzc2V0Q3JlYXRvciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pc0Fzc2V0Q3JlYXRvciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgYXNzZXRJZEhlbHAuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5FcnJvcjogQXNzZXQgd2l0aCBJRCAke2Fzc2V0SUR9IG5vdCBmb3VuZDwvc3Bhbj5gO1xuXG4gICAgICAgIHRoaXMuaXNBc3NldENyZWF0b3IgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGVja1JveWFsdGllc0F2YWlsYWJpbGl0eSgpO1xuXG4gICAgICAvL2xvYWQgYXNzZXQgaW1hemdlXG4gICAgICBsb2FkQXNzZXRJbWFnZShhc3NldElELCBhc3NldEltZywgMjAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXRJZEhlbHAuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5Xcm9uZyBhc3NldCBJRCBmb3JtYXQ8L3NwYW4+YDtcblxuICAgICAgaW5wdXRSb3lhbHRpZXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHJveWFsdGllc2RIZWxwLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjaGVja05mZChldmVudCkge1xuICAgIGNvbnN0IGFkZHJlc3MgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuXG4gICAgY29uc3QgYWRkcmVzc0hlbHAgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjQWxnb0FkZHJlc3NkSGVscFwiKTtcblxuICAgIHRoaXMubmRmV2FsbGV0QWRkcmVzcyA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChhZGRyZXNzLmVuZHNXaXRoKFwiLmFsZ29cIikpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2FwaS5uZi5kb21haW5zL25mZC9cIiArIGFkZHJlc3MgK1wiP3ZpZXc9YnJpZWZcIiApO1xuXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgICBpZiAoanNvbi5jYUFsZ28gJiYganNvbi5jYUFsZ28ubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICB0aGlzLm5kZldhbGxldEFkZHJlc3MgPSBqc29uLmNhQWxnb1swXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb24udW52ZXJpZmllZENhQWxnbyAmJiBqc29uLnVudmVyaWZpZWRDYUFsZ28ubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICB0aGlzLm5kZldhbGxldEFkZHJlc3MgPSBqc29uLnVudmVyaWZpZWRDYUFsZ29bMF07XG4gICAgICAgICAgfSBlbHNlIGlmIChqc29uLnN0YXRlID09PSAnb3duZWQnICYmIGpzb24ub3duZXIpe1xuICAgICAgICAgICAgdGhpcy5uZGZXYWxsZXRBZGRyZXNzID0ganNvbi5vd25lcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5uZGZXYWxsZXRBZGRyZXNzKSB7XG4gICAgICAgICAgICBhZGRyZXNzSGVscC5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ0ZXh0LXN1Y2Nlc3NcIj4ke3RoaXMubmRmV2FsbGV0QWRkcmVzc308L3NwYW4+YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkcmVzc0hlbHAuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5FcnJvcjogTkZEICR7YWRkcmVzc30gbm90IGZvdW5kPC9zcGFuPmA7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIGFkZHJlc3NIZWxwLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+RXJyb3I6IENhbid0IGxvYWQgTkZEPC9zcGFuPmA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWxnb3Nkay5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzKSkge1xuICAgICAgYWRkcmVzc0hlbHAuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidGV4dC1kYW5nZXJcIj5Xcm9uZyB3YWxsZXQgYWRkcmVzcyBmb3JtYXQ8L3NwYW4+YDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkcmVzc0hlbHAudGV4dENvbnRlbnQgPSAnQWxnb3JhbmQgV2FsbGV0IEFkZHJlc3Mgb3IgTkZEJztcbiAgICB9XG4gIH1cblxuICBjdXJyZW5jeUNoYW5nZShldmVudCkge1xuICAgIGNvbnN0IGN1cnJlbmN5ID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcblxuICAgIGNvbnN0IG5mdElucHV0ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI25mdC1kaXZcIik7XG4gICAgY29uc3QgbmZ0TGFiZWwgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjbmZ0LWxhYmVsXCIpO1xuICAgIGNvbnN0IHByaWNlSW5wdXQgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcHJpY2UtZGl2XCIpO1xuICAgIGNvbnN0IHByaWNlTGFiZWwgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcHJpY2UtbGFiZWxcIik7XG5cbiAgICBpZiAoY3VycmVuY3kgPT09IFwibmZ0XCIpIHtcbiAgICAgIG5mdElucHV0LmhpZGRlbiA9IGZhbHNlO1xuICAgICAgbmZ0TGFiZWwuaGlkZGVuID0gZmFsc2U7XG4gICAgICBuZnRJbnB1dC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikucmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgICBwcmljZUlucHV0LmhpZGRlbiA9IHRydWU7XG4gICAgICBwcmljZUxhYmVsLmhpZGRlbiA9IHRydWU7XG4gICAgICBwcmljZUlucHV0LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZnRJbnB1dC5oaWRkZW4gPSB0cnVlO1xuICAgICAgbmZ0TGFiZWwuaGlkZGVuID0gdHJ1ZTtcbiAgICAgIG5mdElucHV0LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5yZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgICBwcmljZUlucHV0LmhpZGRlbiA9IGZhbHNlO1xuICAgICAgcHJpY2VMYWJlbC5oaWRkZW4gPSBmYWxzZTtcbiAgICAgIHByaWNlSW5wdXQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrUm95YWx0aWVzQXZhaWxhYmlsaXR5KCk7XG4gIH1cblxuICBhc3luYyBjaGVja1JveWFsdGllc0F2YWlsYWJpbGl0eSgpIHtcbiAgICBjb25zdCBpbnB1dEN1cnJlbmN5ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Q3VycmVuY3lcIik7XG4gICAgY29uc3QgaW5wdXRSb3lhbHRpZXMgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXRSb3lhbHRpZXNcIik7XG4gICAgY29uc3Qgcm95YWx0aWVzZEhlbHAgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcm95YWx0aWVzZEhlbHBcIik7XG4gICAgY29uc3QgZ3JlZW5IZWFydCA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNyb3lhbHRpZXNMb3ZlR3JlZW5cIik7XG4gICAgY29uc3QgcmVkSGVhcnQgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcm95YWx0aWVzTG92ZVJlZFwiKTtcblxuICAgIC8vaWYgdGhlcmUgaWYgbXVsdGlwbGUgYXNzZXRzLCBjaGVjayBpZiB0aGV5J3JlIGZyb20gbXVsdGlwbGUgY3JlYXRvcnNcbiAgICBsZXQgbXVsdGlwbGVDcmVhdG9ycyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMubnVtTmZ0cyA+IDEpIHtcbiAgICAgIGNvbnN0IGFzc2V0SWRzID0gW107XG5cbiAgICAgIGxldCBwcmV2Q3JlYXRvciA9IFwiXCI7XG5cbiAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3JBbGwoXCIjaW5wdXRBc3NldElkXCIpKSB7XG4gICAgICAgIGlmIChlLnZhbHVlICYmICFpc05hTihlLnZhbHVlKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFsZ29JbmRleGVyXG4gICAgICAgICAgICAgIC5sb29rdXBBc3NldEJ5SUQocGFyc2VJbnQoZS52YWx1ZSkpXG4gICAgICAgICAgICAgIC5kbygpO1xuXG4gICAgICAgICAgICAgIGlmIChwcmV2Q3JlYXRvciAmJiBwcmV2Q3JlYXRvciAhPSByZXN1bHQuYXNzZXQucGFyYW1zLmNyZWF0b3IpIHtcbiAgICAgICAgICAgICAgbXVsdGlwbGVDcmVhdG9ycyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZXZDcmVhdG9yID0gcmVzdWx0LmFzc2V0LnBhcmFtcy5jcmVhdG9yO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKFxuICAgICAgaW5wdXRDdXJyZW5jeS52YWx1ZSAhPT0gXCJhbGdvXCIgfHxcbiAgICAgIHRoaXMuaXNBc3NldENyZWF0b3IgfHxcbiAgICAgIG11bHRpcGxlQ3JlYXRvcnNcbiAgICApIHtcbiAgICAgIGlucHV0Um95YWx0aWVzLnZhbHVlID0gMDtcbiAgICAgIGlucHV0Um95YWx0aWVzLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKGlucHV0Q3VycmVuY3kudmFsdWUgIT09IFwiYWxnb1wiKSB7XG4gICAgICAgIHJveWFsdGllc2RIZWxwLnRleHRDb250ZW50ID1cbiAgICAgICAgICBcIlJveWFsdHkgbm90IGF2YWlsYWJsZSBmb3Igb3RoZXIgdG9rZW4gdGhhbiBBbGdvXCI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNBc3NldENyZWF0b3IpIHtcbiAgICAgICAgcm95YWx0aWVzZEhlbHAudGV4dENvbnRlbnQgPVxuICAgICAgICAgIFwiWW91J3JlIHRoZSBjcmVhdG9yIG9mIHRoaXMgYXNzZXQsIHJveWFsdHkgZGlzYWJsZWQuXCI7XG4gICAgICB9IGVsc2UgaWYgKG11bHRpcGxlQ3JlYXRvcnMpIHtcbiAgICAgICAgcm95YWx0aWVzZEhlbHAudGV4dENvbnRlbnQgPVxuICAgICAgICAgIFwiTXVsdGlwbGUgY3JlYXRvcnMgZGV0ZWN0ZWQsIHJveWFsdHkgZGlzYWJsZWQuXCI7XG4gICAgICB9XG5cbiAgICAgIGdyZWVuSGVhcnQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgIHJlZEhlYXJ0LmhpZGRlbiA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vaW5wdXRSb3lhbHRpZXMudmFsdWUgPSB0aGlzLmRlZmF1bHRSb3lhbHRpZXM7XG4gICAgICBpbnB1dFJveWFsdGllcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgcm95YWx0aWVzZEhlbHAudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgZ3JlZW5IZWFydC5oaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbnB1dFJveWFsdGllcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIpKTtcbiAgfVxuXG4gIHJveWFsdGllc0NoYW5nZShldmVudCkge1xuICAgIGNvbnN0IHJveWFsdGllc1NsaWRlciA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNpbnB1dFJveWFsdGllc1wiKTtcblxuICAgIHRoaXMudWkucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI3JveWFsdGllc1ZhbHVlTGFiZWxcIlxuICAgICkudGV4dENvbnRlbnQgPSBgJHtyb3lhbHRpZXNTbGlkZXIudmFsdWV9ICVgO1xuXG4gICAgY29uc3QgZ3JlZW5IZWFydCA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNyb3lhbHRpZXNMb3ZlR3JlZW5cIik7XG4gICAgY29uc3QgcmVkSGVhcnQgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcm95YWx0aWVzTG92ZVJlZFwiKTtcblxuICAgIGNvbnN0IG1pbkZvbnRTaXplID0gMS4wO1xuICAgIGNvbnN0IG1heEZvbnRTaXplID0gNC41O1xuICAgIGNvbnN0IHNsaWRlck1pbiA9IE51bWJlcihyb3lhbHRpZXNTbGlkZXIubWluKTtcbiAgICBjb25zdCBzbGlkZXJNYXggPSBOdW1iZXIocm95YWx0aWVzU2xpZGVyLm1heCk7XG5cbiAgICBjb25zdCBmb250U2l6ZSA9XG4gICAgICBtaW5Gb250U2l6ZSArXG4gICAgICAobWF4Rm9udFNpemUgLSBtaW5Gb250U2l6ZSkgKlxuICAgICAgICAoKHJveWFsdGllc1NsaWRlci52YWx1ZSAtIHJveWFsdGllc1NsaWRlci5taW4pIC9cbiAgICAgICAgICAocm95YWx0aWVzU2xpZGVyLm1heCAtIHJveWFsdGllc1NsaWRlci5taW4pKTtcblxuICAgIGdyZWVuSGVhcnQuc3R5bGUgPSBgZm9udC1zaXplOiAke2ZvbnRTaXplfXJlbWA7XG5cbiAgICBpZiAocm95YWx0aWVzU2xpZGVyLnZhbHVlID4gc2xpZGVyTWluICsgKHNsaWRlck1heCAtIHNsaWRlck1pbikgLyAyKSB7XG4gICAgICBjb25zdCByZWRIZWFydE9wYWNpdHkgPVxuICAgICAgICAocm95YWx0aWVzU2xpZGVyLnZhbHVlIC0gKHNsaWRlck1pbiArIChzbGlkZXJNYXggLSBzbGlkZXJNaW4pIC8gMikpIC9cbiAgICAgICAgKChzbGlkZXJNYXggLSBzbGlkZXJNaW4pIC8gMik7XG5cbiAgICAgIGxldCBhbmltYXRpb24gPSBcIlwiO1xuICAgICAgaWYgKHJveWFsdGllc1NsaWRlci52YWx1ZSA9PT0gcm95YWx0aWVzU2xpZGVyLm1heCkge1xuICAgICAgICBhbmltYXRpb24gPSBcImFuaW1hdGlvbjogYW5pbWF0ZUhlYXJ0IDEuMnMgaW5maW5pdGU7XCI7XG4gICAgICB9XG5cbiAgICAgIHJlZEhlYXJ0LmhpZGRlbiA9IGZhbHNlO1xuICAgICAgcmVkSGVhcnQuc3R5bGUgPSBgZm9udC1zaXplOiAke2ZvbnRTaXplfXJlbTsgJHthbmltYXRpb259YDtcbiAgICAgIGdyZWVuSGVhcnQuc3R5bGUgPSBgZm9udC1zaXplOiAke2ZvbnRTaXplfXJlbTsgb3BhY2l0eTogJHtcbiAgICAgICAgMSAtIHJlZEhlYXJ0T3BhY2l0eVxuICAgICAgfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZEhlYXJ0LmhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGUoKSB7XG5cbiAgICBhd2FpdCB0aGlzLmNoZWNrUm95YWx0aWVzQXZhaWxhYmlsaXR5KCk7XG5cbiAgICBjb25zdCBhc3NldElkcyA9IFtdO1xuICAgIHRoaXMudWkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dEFzc2V0SWRcIikuZm9yRWFjaChhc3luYyAoZSkgPT4ge1xuICAgICAgaWYgKGUudmFsdWUgJiYgIWlzTmFOKGUudmFsdWUpKSB7XG4gICAgICAgIGFzc2V0SWRzLnB1c2gocGFyc2VJbnQoZS52YWx1ZSwgMTApKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5QXNzZXRJbmZvKGUpO1xuICAgICAgfSBlbHNlIGlmIChlLnZhbHVlICYmIGlzTmFOKGUudmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgZm9ybWF0IGZvciBhc3NldCBpZCAke2UudmFsdWV9YCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmRhdGEuYXNzZXRJZHMgPSBhc3NldElkcztcbiAgICB0aGlzLmRhdGEuYnV5ZXJBZGRyZXNzID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0QWxnb0FkZHJlc3NcIikudmFsdWU7XG4gICAgdGhpcy5kYXRhLnByaWNlID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0UHJpY2VcIikudmFsdWU7XG4gICAgdGhpcy5kYXRhLmN1cnJlbmN5ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Q3VycmVuY3lcIikudmFsdWU7XG4gICAgdGhpcy5kYXRhLnJveWFsdGllc1BlcmNlbnQgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXRSb3lhbHRpZXNcIikudmFsdWU7XG4gICAgdGhpcy5kYXRhLmFjY2VwdFJpc2sgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjY2hlY2tBY2NlcHRSaXNrXCIpLmNoZWNrZWQ7XG5cbiAgICBcblxuICAgIGlmICh0aGlzLmRhdGEuYXNzZXRJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhc3NldCBpZCBwcm92aWRlZCBvciB3cm9uZyBmb3JtYXRcIik7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuYnV5ZXJBZGRyZXNzLmVuZHNXaXRoKCcuYWxnbycpICYmICF0aGlzLm5kZldhbGxldEFkZHJlc3Mpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTkZEIG5vdCBmb3VuZFwiKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmRhdGEuYnV5ZXJBZGRyZXNzLmVuZHNXaXRoKCcuYWxnbycpICYmICFhbGdvc2RrLmlzVmFsaWRBZGRyZXNzKHRoaXMuZGF0YS5idXllckFkZHJlc3MpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbGdvcmFuZCB3YWxsZXQgYWRkcmVzcyBpcyBub3QgdmFsaWRcIik7XG4gICAgfSBlbHNlIGlmIChpc05hTih0aGlzLmRhdGEucHJpY2UpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmljZSBpcyBub3QgYSBudW1iZXJcIik7XG4gICAgfSBlbHNlIGlmIChpc05hTih0aGlzLmRhdGEucm95YWx0aWVzUGVyY2VudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJveWFsdGllcyB2YWx1ZSBpcyBub3QgYSBudW1iZXJcIik7XG4gICAgfSBlbHNlIGlmICghdGhpcy5kYXRhLmFjY2VwdFJpc2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJpc2sgbm90IGFjY2VwdGVkXCIpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLmRhdGEuY3VycmVuY3kgPT09IFwibmZ0XCIgJiZcbiAgICAgIGlzTmFOKHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNpbnB1dFByaWNlQXNzZXRJZFwiKS52YWx1ZSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFdyb25nIGZvcm1hdCBmb3IgYXNzZXQgaWQgJHtcbiAgICAgICAgICB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXRQcmljZUFzc2V0SWRcIikudmFsdWVcbiAgICAgICAgfWBcbiAgICAgICk7XG4gICAgfSBcblxuICAgIGlmICh0aGlzLmRhdGEuYnV5ZXJBZGRyZXNzLmVuZHNXaXRoKCcuYWxnbycpKXtcbiAgICAgIHRoaXMuZGF0YS5idXllckFkZHJlc3MgPSB0aGlzLm5kZldhbGxldEFkZHJlc3M7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhLnByaWNlQXNzZXRJZCA9IHBhcnNlSW50KFxuICAgICAgdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0UHJpY2VBc3NldElkXCIpLnZhbHVlXG4gICAgKTtcblxuICAgIFxuICB9XG5cbiAgYXN5bmMgc3VibWl0Rm9ybShldmVudCkge1xuXG4gICAgdGhpcy5tYWtlQnVzeSgpO1xuXG4gICAgLy9jYW5jZWwgZGVmYXVsdCBiZWhhdmlvdXIgd2hlbiBzdWJtaXRpbmcgYSBmb3JtXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLnN0b3BCdXN5KCk7XG4gICAgICBhbGVydChlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN1Ym1pdENhbGxiYWNrKSB7XG4gICAgICB0aGlzLnN1Ym1pdENhbGxiYWNrKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG1ha2VCdXN5KCkge1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNidXR0b25TdWJtaXRcIik7XG4gICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgIHN1Ym1pdEJ1dHRvbi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJzcGlubmVyLWJvcmRlciBzcGlubmVyLWJvcmRlci1zbVwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG4gICAgUHJldmlld2A7XG4gIH1cblxuICBzdG9wQnVzeSgpIHtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjYnV0dG9uU3VibWl0XCIpO1xuICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUHJldmlld1wiO1xuICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiU3dhcExpbmtGb3JtIiwiY29uc3RydWN0b3IiLCJjdXJyZW5jaWVzIiwiZGVmYXVsdFJveWFsdGllcyIsInN1Ym1pdENhbGxiYWNrIiwid2FsbGV0Q29ubmVjdCIsImFsZ29JbmRleGVyIiwidGhpcyIsInVpIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGF0YSIsImlzQXNzZXRDcmVhdG9yIiwibnVtTmZ0cyIsIm5kZldhbGxldEFkZHJlc3MiLCJpbm5lckhUTUwiLCJhZGRORlQiLCJpbnB1dEN1cnJlbmN5IiwicXVlcnlTZWxlY3RvciIsImFsZ29PcHRpb24iLCJ0ZXh0Q29udGVudCIsInZhbHVlIiwic2VsZWN0ZWQiLCJhcHBlbmQiLCJuZnRPcHRpb24iLCJhc2FPcHRHcm91cCIsImxhYmVsIiwiY3VycmVuY3kiLCJvcHRpb24iLCJuYW1lIiwiYXNzZXRJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyb3lhbHRpZXNDaGFuZ2UiLCJiaW5kIiwiY3VycmVuY3lDaGFuZ2UiLCJzdWJtaXRGb3JtIiwiY2hlY2tOZmQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJoaWRkZW4iLCJuZnRzRGl2IiwibmV3TmZ0IiwiY2xhc3NOYW1lIiwiaW5wdXRBc3NldElkIiwicmVxdWlyZWQiLCJhc3NldElkRm9jdXNPdXQiLCJhZGRMaW5rIiwiYXN5bmMiLCJkaXNwbGF5QXNzZXRJbmZvIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImFzc2V0SWRIZWxwIiwiYXNzZXRJbWciLCJpbnB1dFJveWFsdGllcyIsInJveWFsdGllc2RIZWxwIiwiYXNzZXRJRCIsInBhcnNlSW50IiwiaXNOYU4iLCJkaXNhYmxlZCIsInJlc3VsdCIsImxvb2t1cEFzc2V0QnlJRCIsImRvIiwiYXNzZXQiLCJwYXJhbXMiLCJjcmVhdG9yIiwid2FsbGV0QWRkcmVzcyIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJjaGVja1JveWFsdGllc0F2YWlsYWJpbGl0eSIsImFkZHJlc3MiLCJhZGRyZXNzSGVscCIsInVuZGVmaW5lZCIsImVuZHNXaXRoIiwicmVzcG9uc2UiLCJmZXRjaCIsInN0YXR1cyIsImpzb24iLCJjYUFsZ28iLCJsZW5ndGgiLCJ1bnZlcmlmaWVkQ2FBbGdvIiwic3RhdGUiLCJvd25lciIsImVycm9yIiwibmZ0SW5wdXQiLCJuZnRMYWJlbCIsInByaWNlSW5wdXQiLCJwcmljZUxhYmVsIiwiZ3JlZW5IZWFydCIsInJlZEhlYXJ0IiwibXVsdGlwbGVDcmVhdG9ycyIsInByZXZDcmVhdG9yIiwiZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyb3lhbHRpZXNTbGlkZXIiLCJzbGlkZXJNaW4iLCJOdW1iZXIiLCJtaW4iLCJzbGlkZXJNYXgiLCJtYXgiLCJmb250U2l6ZSIsInN0eWxlIiwicmVkSGVhcnRPcGFjaXR5IiwiYW5pbWF0aW9uIiwiYXNzZXRJZHMiLCJmb3JFYWNoIiwicHVzaCIsIkVycm9yIiwiYnV5ZXJBZGRyZXNzIiwicHJpY2UiLCJyb3lhbHRpZXNQZXJjZW50IiwiYWNjZXB0UmlzayIsImNoZWNrZWQiLCJwcmljZUFzc2V0SWQiLCJtYWtlQnVzeSIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGUiLCJzdG9wQnVzeSIsImFsZXJ0Iiwic3VibWl0QnV0dG9uIl0sInNvdXJjZVJvb3QiOiIifQ==