"use strict";(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[441],{9441:(e,s,n)=>{n.r(s),n.d(s,{SwapLinkAccept:()=>l});var t=n(5984),a=n(4050),i=n.n(a),r=n(2592);class l{constructor(e,s,n,t){this.walletConnect=s,this.algodClient=n,this.algoIndexer=t,this.ui=document.createElement("div"),this.fields={},this.signedTransferTxs,this.signedOptinCurrencyTx,this.resolveData(e)}async resolveData(e){const s=atob(e),n=JSON.parse(s);console.log(n),this.signedTransferTxs=n.signedTransferTxs.map((e=>t.X.base64ToSignedTx(e)));const a=this.signedTransferTxs.map((e=>i().decodeSignedTransaction(e)));n.signedOptinCurrencyTx&&(this.signedOptinCurrencyTx=t.X.base64ToSignedTx(n.signedOptinCurrencyTx)),this.fields={assetIds:a.map((e=>e.txn.assetIndex)),sellerAddress:i().encodeAddress(a[0].txn.from.publicKey),buyerAddress:i().encodeAddress(a[0].txn.to.publicKey),price:n.price,currency:n.currency,royalties:n.royalties,groupID:a[0].txn.group,firstRound:a[0].txn.firstRound,lastRound:a[0].txn.lastRound},(await this.algodClient.status().do())["last-round"]>=this.fields.lastRound?this.ui.innerHTML='<h4>Accept swap</h4>\n        <div class="alert alert-danger" role="alert">This link expired.</div>':this.fields.buyerAddress!==this.walletConnect.walletAddress?this.ui.innerHTML=`<h4>Accept swap</h4>\n        <div class="alert alert-warning" role="alert">This swap can only be accepted by the following wallet:<br><span style="word-break: break-all;">${this.fields.buyerAddress}</span></div>`:(this.ui.innerHTML="<h4>Accept swap</h4>\n        Loading...",this.swapLinkManager=new t.X(this.walletConnect,this.algodClient,this.algoIndexer),this.generateTransactions())}async generateTransactions(){try{await this.swapLinkManager.generateTransactions(this.fields)}catch(e){this.ui.innerHTML=`<h4>Accept swap</h4>\n        <div class="alert alert-danger" role="alert">${e.message}</div>`}this.displayUI()}displayUI(){const e=this.swapLinkManager.transactions,s=e.assetTransfers.map((e=>e.assetIndex)),n=(i().encodeAddress(e.assetTransfers[0].to.publicKey),i().encodeAddress(e.assetTransfers[0].from.publicKey));let t="";if(e.payment){let s,a=e.payment.amount;if("pay"===e.payment.type)a/=1e6,s="ALGO";else{let e="";360019122===this.swapLinkManager.currencyAsset.index&&(e="&#127844; "),s=`${this.swapLinkManager.currencyAsset.params["unit-name"]} ${e}(ASA ${this.swapLinkManager.currencyAsset.index})`}t=`<li>You'll send <span class="price">${a} ${s}</span><br>\n      <span class="wallet-info">TO ${n}</span></li>`}const a=this.swapLinkManager.assets.map((e=>`<strong><a href="https://www.nftexplorer.app/asset/${e.index}" target="_blank">${e.index}</a></strong> (${e.params.name})`));if(this.ui.innerHTML=`<h4>Accept swap</h4>\n        <div class="row">\n            <div class="col-md-6">\n              <ul>\n                ${t}\n                <li>You'll receive asset${a.length>1?"s":""} ${a.join(", ")}</li>\n              </ul>\n            </div>\n            <div class="col-md-6 ">\n                <img src="default.png" id="imgAssetPreview" class="img-fluid">\n            </div>\n        </div>\n        <form>\n            <div class="mb-3 form-check">\n                <input type="checkbox" class="form-check-input" id="checkAcceptRisk" required>\n                <label class="form-check-label" for="checkAcceptRisk">I accept to use this tool at my own\n                    risk</label>\n            </div>\n            \n            <button type="submit" class="btn btn-generate fw-bold" id="buttonAccept">Accept & sign</button>\n        </form>`,this.ui.querySelector("form").addEventListener("submit",this.submitAccept.bind(this)),e.royaltiesPayment){const s=this.ui.querySelector("ul"),n=document.createElement("li");let t,a=e.royaltiesPayment.amount;"pay"===e.royaltiesPayment.type?(a/=1e6,t="ALGO"):t=e.royaltiesPayment.assetIndex;const r=i().encodeAddress(e.royaltiesPayment.to.publicKey);n.innerHTML=`You'll send <span class="price">${a} ${t}</span> to asset's creator &#128154;<br>\n      <span class="wallet-info">TO ${r}</span>`,s.append(n)}(0,r.g)(s[0],this.ui.querySelector("#imgAssetPreview"),512)}async submitAccept(e){e.preventDefault();const s=this.ui.querySelector("#buttonAccept");s.disabled=!0,s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n    Waiting for signatures...',this.swapLinkManager.signAndCommitTransactions(this.signedTransferTxs,this.signedOptinCurrencyTx,(()=>{s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n        Sending transactions...'}),(()=>{s.hidden=!0;const e=this.swapLinkManager.assets.map((e=>`<a href="https://www.nftexplorer.app/asset/${e.index}" target="_blank">${e.index}</a> (${e.params.name})`));this.ui.innerHTML=`<h4>Swapped ðŸ¥³</h4>\n        You received asset${e.length>1?"s":""} ${e.join(", ")}.`}),(e=>{console.error(e),s.hidden=!0,this.ui.innerHTML=`<h4>Accept swap</h4>\n            <div class="alert alert-danger" role="alert">Error:<br>${e}</div>`}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,